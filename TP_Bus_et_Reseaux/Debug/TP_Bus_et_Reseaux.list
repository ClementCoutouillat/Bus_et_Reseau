
TP_Bus_et_Reseaux.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004380  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08004550  08004550  00014550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004680  08004680  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08004680  08004680  00014680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004688  08004688  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004688  08004688  00014688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800468c  0800468c  0001468c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08004690  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000080  08004710  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08004710  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bd99  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ef3  00000000  00000000  0002be8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a50  00000000  00000000  0002dd80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007fc  00000000  00000000  0002e7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000227ad  00000000  00000000  0002efcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000efa5  00000000  00000000  00051779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc4c5  00000000  00000000  0006071e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003140  00000000  00000000  0012cbe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0012fd24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004538 	.word	0x08004538

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08004538 	.word	0x08004538

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	; 0x28
 80005b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	613b      	str	r3, [r7, #16]
 80005c6:	4b2d      	ldr	r3, [pc, #180]	; (800067c <MX_GPIO_Init+0xd0>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a2c      	ldr	r2, [pc, #176]	; (800067c <MX_GPIO_Init+0xd0>)
 80005cc:	f043 0304 	orr.w	r3, r3, #4
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b2a      	ldr	r3, [pc, #168]	; (800067c <MX_GPIO_Init+0xd0>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0304 	and.w	r3, r3, #4
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	4b26      	ldr	r3, [pc, #152]	; (800067c <MX_GPIO_Init+0xd0>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a25      	ldr	r2, [pc, #148]	; (800067c <MX_GPIO_Init+0xd0>)
 80005e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b23      	ldr	r3, [pc, #140]	; (800067c <MX_GPIO_Init+0xd0>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	4b1f      	ldr	r3, [pc, #124]	; (800067c <MX_GPIO_Init+0xd0>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a1e      	ldr	r2, [pc, #120]	; (800067c <MX_GPIO_Init+0xd0>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b1c      	ldr	r3, [pc, #112]	; (800067c <MX_GPIO_Init+0xd0>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	4b18      	ldr	r3, [pc, #96]	; (800067c <MX_GPIO_Init+0xd0>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a17      	ldr	r2, [pc, #92]	; (800067c <MX_GPIO_Init+0xd0>)
 8000620:	f043 0302 	orr.w	r3, r3, #2
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b15      	ldr	r3, [pc, #84]	; (800067c <MX_GPIO_Init+0xd0>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0302 	and.w	r3, r3, #2
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	2120      	movs	r1, #32
 8000636:	4812      	ldr	r0, [pc, #72]	; (8000680 <MX_GPIO_Init+0xd4>)
 8000638:	f000 fea6 	bl	8001388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800063c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000642:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	4619      	mov	r1, r3
 8000652:	480c      	ldr	r0, [pc, #48]	; (8000684 <MX_GPIO_Init+0xd8>)
 8000654:	f000 fd04 	bl	8001060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000658:	2320      	movs	r3, #32
 800065a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	2301      	movs	r3, #1
 800065e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2300      	movs	r3, #0
 8000666:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	4619      	mov	r1, r3
 800066e:	4804      	ldr	r0, [pc, #16]	; (8000680 <MX_GPIO_Init+0xd4>)
 8000670:	f000 fcf6 	bl	8001060 <HAL_GPIO_Init>

}
 8000674:	bf00      	nop
 8000676:	3728      	adds	r7, #40	; 0x28
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40023800 	.word	0x40023800
 8000680:	40020000 	.word	0x40020000
 8000684:	40020800 	.word	0x40020800

08000688 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_I2C1_Init+0x50>)
 800068e:	4a13      	ldr	r2, [pc, #76]	; (80006dc <MX_I2C1_Init+0x54>)
 8000690:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_I2C1_Init+0x50>)
 8000694:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <MX_I2C1_Init+0x58>)
 8000696:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_I2C1_Init+0x50>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ac:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <MX_I2C1_Init+0x50>)
 80006c6:	f000 fe79 	bl	80013bc <HAL_I2C_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006d0:	f000 f98e 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	2000009c 	.word	0x2000009c
 80006dc:	40005400 	.word	0x40005400
 80006e0:	000186a0 	.word	0x000186a0

080006e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	; 0x28
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a19      	ldr	r2, [pc, #100]	; (8000768 <HAL_I2C_MspInit+0x84>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d12c      	bne.n	8000760 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <HAL_I2C_MspInit+0x88>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a17      	ldr	r2, [pc, #92]	; (800076c <HAL_I2C_MspInit+0x88>)
 8000710:	f043 0302 	orr.w	r3, r3, #2
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b15      	ldr	r3, [pc, #84]	; (800076c <HAL_I2C_MspInit+0x88>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0302 	and.w	r3, r3, #2
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000722:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000728:	2312      	movs	r3, #18
 800072a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000730:	2303      	movs	r3, #3
 8000732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000734:	2304      	movs	r3, #4
 8000736:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	4619      	mov	r1, r3
 800073e:	480c      	ldr	r0, [pc, #48]	; (8000770 <HAL_I2C_MspInit+0x8c>)
 8000740:	f000 fc8e 	bl	8001060 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000744:	2300      	movs	r3, #0
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	4b08      	ldr	r3, [pc, #32]	; (800076c <HAL_I2C_MspInit+0x88>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	4a07      	ldr	r2, [pc, #28]	; (800076c <HAL_I2C_MspInit+0x88>)
 800074e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000752:	6413      	str	r3, [r2, #64]	; 0x40
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <HAL_I2C_MspInit+0x88>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000760:	bf00      	nop
 8000762:	3728      	adds	r7, #40	; 0x28
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40005400 	.word	0x40005400
 800076c:	40023800 	.word	0x40023800
 8000770:	40020400 	.word	0x40020400

08000774 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800077a:	f000 faf5 	bl	8000d68 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800077e:	f000 f8c9 	bl	8000914 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000782:	f7ff ff13 	bl	80005ac <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000786:	f000 fa53 	bl	8000c30 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 800078a:	f7ff ff7d 	bl	8000688 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	test = HAL_I2C_Master_Transmit(&hi2c1, I2C_Address, buffer_transmit, sizeof(buffer_transmit), HAL_MAX_DELAY);
 800078e:	f04f 33ff 	mov.w	r3, #4294967295
 8000792:	9300      	str	r3, [sp, #0]
 8000794:	2301      	movs	r3, #1
 8000796:	4a49      	ldr	r2, [pc, #292]	; (80008bc <main+0x148>)
 8000798:	21ee      	movs	r1, #238	; 0xee
 800079a:	4849      	ldr	r0, [pc, #292]	; (80008c0 <main+0x14c>)
 800079c:	f000 ff52 	bl	8001644 <HAL_I2C_Master_Transmit>
 80007a0:	4603      	mov	r3, r0
 80007a2:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Master_Receive( &hi2c1,  I2C_Address,  buffer_receive,  sizeof(buffer_receive), HAL_MAX_DELAY);
 80007a4:	f04f 33ff 	mov.w	r3, #4294967295
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	2301      	movs	r3, #1
 80007ac:	4a45      	ldr	r2, [pc, #276]	; (80008c4 <main+0x150>)
 80007ae:	21ee      	movs	r1, #238	; 0xee
 80007b0:	4843      	ldr	r0, [pc, #268]	; (80008c0 <main+0x14c>)
 80007b2:	f001 f845 	bl	8001840 <HAL_I2C_Master_Receive>

	while(test != HAL_OK){
 80007b6:	e006      	b.n	80007c6 <main+0x52>

		printf("Erreur de communication \r\n");
 80007b8:	4843      	ldr	r0, [pc, #268]	; (80008c8 <main+0x154>)
 80007ba:	f003 f855 	bl	8003868 <puts>
		HAL_Delay(1000);
 80007be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007c2:	f000 fb43 	bl	8000e4c <HAL_Delay>
	while(test != HAL_OK){
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d1f5      	bne.n	80007b8 <main+0x44>

	}

	printf("BMP280 connecte \r\n");
 80007cc:	483f      	ldr	r0, [pc, #252]	; (80008cc <main+0x158>)
 80007ce:	f003 f84b 	bl	8003868 <puts>
	printf("ID : %x\r\n",buffer_receive[0]);
 80007d2:	4b3c      	ldr	r3, [pc, #240]	; (80008c4 <main+0x150>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	4619      	mov	r1, r3
 80007d8:	483d      	ldr	r0, [pc, #244]	; (80008d0 <main+0x15c>)
 80007da:	f002 ffdf 	bl	800379c <iprintf>

	HAL_I2C_Master_Transmit(&hi2c1, I2C_Address, mode_normal, 2, HAL_MAX_DELAY);
 80007de:	f04f 33ff 	mov.w	r3, #4294967295
 80007e2:	9300      	str	r3, [sp, #0]
 80007e4:	2302      	movs	r3, #2
 80007e6:	4a3b      	ldr	r2, [pc, #236]	; (80008d4 <main+0x160>)
 80007e8:	21ee      	movs	r1, #238	; 0xee
 80007ea:	4835      	ldr	r0, [pc, #212]	; (80008c0 <main+0x14c>)
 80007ec:	f000 ff2a 	bl	8001644 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, I2C_Address, buffer_receive, 1, HAL_MAX_DELAY);
 80007f0:	f04f 33ff 	mov.w	r3, #4294967295
 80007f4:	9300      	str	r3, [sp, #0]
 80007f6:	2301      	movs	r3, #1
 80007f8:	4a32      	ldr	r2, [pc, #200]	; (80008c4 <main+0x150>)
 80007fa:	21ee      	movs	r1, #238	; 0xee
 80007fc:	4830      	ldr	r0, [pc, #192]	; (80008c0 <main+0x14c>)
 80007fe:	f001 f81f 	bl	8001840 <HAL_I2C_Master_Receive>

	printf("le mode est : %x\r\n",buffer_receive[0]);
 8000802:	4b30      	ldr	r3, [pc, #192]	; (80008c4 <main+0x150>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	4619      	mov	r1, r3
 8000808:	4833      	ldr	r0, [pc, #204]	; (80008d8 <main+0x164>)
 800080a:	f002 ffc7 	bl	800379c <iprintf>
	printf("mode normal, Pressure oversampling x16, Temperature oversampling x2\r\n");
 800080e:	4833      	ldr	r0, [pc, #204]	; (80008dc <main+0x168>)
 8000810:	f003 f82a 	bl	8003868 <puts>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{

		test_pression = HAL_I2C_Master_Transmit(&hi2c1, I2C_Address, recup_temp1, 1, HAL_MAX_DELAY);
 8000814:	f04f 33ff 	mov.w	r3, #4294967295
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	2301      	movs	r3, #1
 800081c:	4a30      	ldr	r2, [pc, #192]	; (80008e0 <main+0x16c>)
 800081e:	21ee      	movs	r1, #238	; 0xee
 8000820:	4827      	ldr	r0, [pc, #156]	; (80008c0 <main+0x14c>)
 8000822:	f000 ff0f 	bl	8001644 <HAL_I2C_Master_Transmit>
 8000826:	4603      	mov	r3, r0
 8000828:	71bb      	strb	r3, [r7, #6]

		HAL_I2C_Master_Receive(&hi2c1, I2C_Address, temp1,1,HAL_MAX_DELAY);
 800082a:	f04f 33ff 	mov.w	r3, #4294967295
 800082e:	9300      	str	r3, [sp, #0]
 8000830:	2301      	movs	r3, #1
 8000832:	4a2c      	ldr	r2, [pc, #176]	; (80008e4 <main+0x170>)
 8000834:	21ee      	movs	r1, #238	; 0xee
 8000836:	4822      	ldr	r0, [pc, #136]	; (80008c0 <main+0x14c>)
 8000838:	f001 f802 	bl	8001840 <HAL_I2C_Master_Receive>

		HAL_I2C_Master_Transmit(&hi2c1, I2C_Address, recup_temp2, 1, HAL_MAX_DELAY);
 800083c:	f04f 33ff 	mov.w	r3, #4294967295
 8000840:	9300      	str	r3, [sp, #0]
 8000842:	2301      	movs	r3, #1
 8000844:	4a28      	ldr	r2, [pc, #160]	; (80008e8 <main+0x174>)
 8000846:	21ee      	movs	r1, #238	; 0xee
 8000848:	481d      	ldr	r0, [pc, #116]	; (80008c0 <main+0x14c>)
 800084a:	f000 fefb 	bl	8001644 <HAL_I2C_Master_Transmit>

		HAL_I2C_Master_Receive(&hi2c1, I2C_Address, recup_pression1,1,HAL_MAX_DELAY);
 800084e:	f04f 33ff 	mov.w	r3, #4294967295
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	2301      	movs	r3, #1
 8000856:	4a25      	ldr	r2, [pc, #148]	; (80008ec <main+0x178>)
 8000858:	21ee      	movs	r1, #238	; 0xee
 800085a:	4819      	ldr	r0, [pc, #100]	; (80008c0 <main+0x14c>)
 800085c:	f000 fff0 	bl	8001840 <HAL_I2C_Master_Receive>

		HAL_I2C_Master_Transmit(&hi2c1, I2C_Address, recup_temp2, 1, HAL_MAX_DELAY);
 8000860:	f04f 33ff 	mov.w	r3, #4294967295
 8000864:	9300      	str	r3, [sp, #0]
 8000866:	2301      	movs	r3, #1
 8000868:	4a1f      	ldr	r2, [pc, #124]	; (80008e8 <main+0x174>)
 800086a:	21ee      	movs	r1, #238	; 0xee
 800086c:	4814      	ldr	r0, [pc, #80]	; (80008c0 <main+0x14c>)
 800086e:	f000 fee9 	bl	8001644 <HAL_I2C_Master_Transmit>

		HAL_I2C_Master_Receive(&hi2c1, I2C_Address, recup_pression2,1,HAL_MAX_DELAY);
 8000872:	f04f 33ff 	mov.w	r3, #4294967295
 8000876:	9300      	str	r3, [sp, #0]
 8000878:	2301      	movs	r3, #1
 800087a:	4a1d      	ldr	r2, [pc, #116]	; (80008f0 <main+0x17c>)
 800087c:	21ee      	movs	r1, #238	; 0xee
 800087e:	4810      	ldr	r0, [pc, #64]	; (80008c0 <main+0x14c>)
 8000880:	f000 ffde 	bl	8001840 <HAL_I2C_Master_Receive>

		while(test_pression != HAL_OK)
 8000884:	e006      	b.n	8000894 <main+0x120>
		{
			printf("Aucune temperature\r\n");
 8000886:	481b      	ldr	r0, [pc, #108]	; (80008f4 <main+0x180>)
 8000888:	f002 ffee 	bl	8003868 <puts>
			HAL_Delay(1000);
 800088c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000890:	f000 fadc 	bl	8000e4c <HAL_Delay>
		while(test_pression != HAL_OK)
 8000894:	79bb      	ldrb	r3, [r7, #6]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d1f5      	bne.n	8000886 <main+0x112>
		}

		HAL_Delay(100);
 800089a:	2064      	movs	r0, #100	; 0x64
 800089c:	f000 fad6 	bl	8000e4c <HAL_Delay>
		printf("La temperature est : %x %x %x\r\n",temp1,temp2, temp3);
 80008a0:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <main+0x184>)
 80008a2:	4a16      	ldr	r2, [pc, #88]	; (80008fc <main+0x188>)
 80008a4:	490f      	ldr	r1, [pc, #60]	; (80008e4 <main+0x170>)
 80008a6:	4816      	ldr	r0, [pc, #88]	; (8000900 <main+0x18c>)
 80008a8:	f002 ff78 	bl	800379c <iprintf>

		printf("La pression est : %x\r\n",pression1, pression2, pression3);
 80008ac:	4b15      	ldr	r3, [pc, #84]	; (8000904 <main+0x190>)
 80008ae:	4a16      	ldr	r2, [pc, #88]	; (8000908 <main+0x194>)
 80008b0:	4916      	ldr	r1, [pc, #88]	; (800090c <main+0x198>)
 80008b2:	4817      	ldr	r0, [pc, #92]	; (8000910 <main+0x19c>)
 80008b4:	f002 ff72 	bl	800379c <iprintf>
		test_pression = HAL_I2C_Master_Transmit(&hi2c1, I2C_Address, recup_temp1, 1, HAL_MAX_DELAY);
 80008b8:	e7ac      	b.n	8000814 <main+0xa0>
 80008ba:	bf00      	nop
 80008bc:	20000000 	.word	0x20000000
 80008c0:	2000009c 	.word	0x2000009c
 80008c4:	20000108 	.word	0x20000108
 80008c8:	08004550 	.word	0x08004550
 80008cc:	0800456c 	.word	0x0800456c
 80008d0:	08004580 	.word	0x08004580
 80008d4:	20000004 	.word	0x20000004
 80008d8:	0800458c 	.word	0x0800458c
 80008dc:	080045a0 	.word	0x080045a0
 80008e0:	2000000c 	.word	0x2000000c
 80008e4:	200000f0 	.word	0x200000f0
 80008e8:	20000008 	.word	0x20000008
 80008ec:	20000010 	.word	0x20000010
 80008f0:	20000014 	.word	0x20000014
 80008f4:	080045e8 	.word	0x080045e8
 80008f8:	200000f8 	.word	0x200000f8
 80008fc:	200000f4 	.word	0x200000f4
 8000900:	080045fc 	.word	0x080045fc
 8000904:	20000104 	.word	0x20000104
 8000908:	20000100 	.word	0x20000100
 800090c:	200000fc 	.word	0x200000fc
 8000910:	0800461c 	.word	0x0800461c

08000914 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b094      	sub	sp, #80	; 0x50
 8000918:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	2234      	movs	r2, #52	; 0x34
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f003 f880 	bl	8003a28 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000928:	f107 0308 	add.w	r3, r7, #8
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000938:	2300      	movs	r3, #0
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	4b2a      	ldr	r3, [pc, #168]	; (80009e8 <SystemClock_Config+0xd4>)
 800093e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000940:	4a29      	ldr	r2, [pc, #164]	; (80009e8 <SystemClock_Config+0xd4>)
 8000942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000946:	6413      	str	r3, [r2, #64]	; 0x40
 8000948:	4b27      	ldr	r3, [pc, #156]	; (80009e8 <SystemClock_Config+0xd4>)
 800094a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000954:	2300      	movs	r3, #0
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	4b24      	ldr	r3, [pc, #144]	; (80009ec <SystemClock_Config+0xd8>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000960:	4a22      	ldr	r2, [pc, #136]	; (80009ec <SystemClock_Config+0xd8>)
 8000962:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000966:	6013      	str	r3, [r2, #0]
 8000968:	4b20      	ldr	r3, [pc, #128]	; (80009ec <SystemClock_Config+0xd8>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000974:	2302      	movs	r3, #2
 8000976:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000978:	2301      	movs	r3, #1
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800097c:	2310      	movs	r3, #16
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000980:	2302      	movs	r3, #2
 8000982:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000984:	2300      	movs	r3, #0
 8000986:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000988:	2310      	movs	r3, #16
 800098a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 800098c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000990:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000992:	2304      	movs	r3, #4
 8000994:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000996:	2302      	movs	r3, #2
 8000998:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 800099a:	2302      	movs	r3, #2
 800099c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4618      	mov	r0, r3
 80009a4:	f001 ffea 	bl	800297c <HAL_RCC_OscConfig>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <SystemClock_Config+0x9e>
	{
		Error_Handler();
 80009ae:	f000 f81f 	bl	80009f0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b2:	230f      	movs	r3, #15
 80009b4:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b6:	2302      	movs	r3, #2
 80009b8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009c8:	f107 0308 	add.w	r3, r7, #8
 80009cc:	2102      	movs	r1, #2
 80009ce:	4618      	mov	r0, r3
 80009d0:	f001 fc8a 	bl	80022e8 <HAL_RCC_ClockConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <SystemClock_Config+0xca>
	{
		Error_Handler();
 80009da:	f000 f809 	bl	80009f0 <Error_Handler>
	}
}
 80009de:	bf00      	nop
 80009e0:	3750      	adds	r7, #80	; 0x50
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40007000 	.word	0x40007000

080009f0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f4:	b672      	cpsid	i
}
 80009f6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80009f8:	e7fe      	b.n	80009f8 <Error_Handler+0x8>
	...

080009fc <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000a04:	1d39      	adds	r1, r7, #4
 8000a06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	4803      	ldr	r0, [pc, #12]	; (8000a1c <__io_putchar+0x20>)
 8000a0e:	f002 faa0 	bl	8002f52 <HAL_UART_Transmit>

  return ch;
 8000a12:	687b      	ldr	r3, [r7, #4]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000110 	.word	0x20000110

08000a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	4a0f      	ldr	r2, [pc, #60]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a34:	6453      	str	r3, [r2, #68]	; 0x44
 8000a36:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	603b      	str	r3, [r7, #0]
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a50:	6413      	str	r3, [r2, #64]	; 0x40
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a5e:	2007      	movs	r0, #7
 8000a60:	f000 faca 	bl	8000ff8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40023800 	.word	0x40023800

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <NMI_Handler+0x4>

08000a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <HardFault_Handler+0x4>

08000a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <MemManage_Handler+0x4>

08000a82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <BusFault_Handler+0x4>

08000a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <UsageFault_Handler+0x4>

08000a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000abc:	f000 f9a6 	bl	8000e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
 8000ad4:	e00a      	b.n	8000aec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ad6:	f3af 8000 	nop.w
 8000ada:	4601      	mov	r1, r0
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	1c5a      	adds	r2, r3, #1
 8000ae0:	60ba      	str	r2, [r7, #8]
 8000ae2:	b2ca      	uxtb	r2, r1
 8000ae4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	617b      	str	r3, [r7, #20]
 8000aec:	697a      	ldr	r2, [r7, #20]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	dbf0      	blt.n	8000ad6 <_read+0x12>
  }

  return len;
 8000af4:	687b      	ldr	r3, [r7, #4]
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b086      	sub	sp, #24
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	60f8      	str	r0, [r7, #12]
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
 8000b0e:	e009      	b.n	8000b24 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	1c5a      	adds	r2, r3, #1
 8000b14:	60ba      	str	r2, [r7, #8]
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ff6f 	bl	80009fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	3301      	adds	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	697a      	ldr	r2, [r7, #20]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	dbf1      	blt.n	8000b10 <_write+0x12>
  }
  return len;
 8000b2c:	687b      	ldr	r3, [r7, #4]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <_close>:

int _close(int file)
{
 8000b36:	b480      	push	{r7}
 8000b38:	b083      	sub	sp, #12
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	b083      	sub	sp, #12
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b5e:	605a      	str	r2, [r3, #4]
  return 0;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <_isatty>:

int _isatty(int file)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
	...

08000ba0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba8:	4a14      	ldr	r2, [pc, #80]	; (8000bfc <_sbrk+0x5c>)
 8000baa:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <_sbrk+0x60>)
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb4:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <_sbrk+0x64>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d102      	bne.n	8000bc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <_sbrk+0x64>)
 8000bbe:	4a12      	ldr	r2, [pc, #72]	; (8000c08 <_sbrk+0x68>)
 8000bc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <_sbrk+0x64>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d207      	bcs.n	8000be0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bd0:	f002 ff78 	bl	8003ac4 <__errno>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295
 8000bde:	e009      	b.n	8000bf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <_sbrk+0x64>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000be6:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <_sbrk+0x64>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <_sbrk+0x64>)
 8000bf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20020000 	.word	0x20020000
 8000c00:	00000400 	.word	0x00000400
 8000c04:	2000010c 	.word	0x2000010c
 8000c08:	200002a8 	.word	0x200002a8

08000c0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <SystemInit+0x20>)
 8000c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c16:	4a05      	ldr	r2, [pc, #20]	; (8000c2c <SystemInit+0x20>)
 8000c18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c36:	4a12      	ldr	r2, [pc, #72]	; (8000c80 <MX_USART2_UART_Init+0x50>)
 8000c38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c54:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c56:	220c      	movs	r2, #12
 8000c58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5a:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c66:	4805      	ldr	r0, [pc, #20]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c68:	f002 f926 	bl	8002eb8 <HAL_UART_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c72:	f7ff febd 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000110 	.word	0x20000110
 8000c80:	40004400 	.word	0x40004400

08000c84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	; 0x28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a19      	ldr	r2, [pc, #100]	; (8000d08 <HAL_UART_MspInit+0x84>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d12b      	bne.n	8000cfe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <HAL_UART_MspInit+0x88>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	4a17      	ldr	r2, [pc, #92]	; (8000d0c <HAL_UART_MspInit+0x88>)
 8000cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <HAL_UART_MspInit+0x88>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <HAL_UART_MspInit+0x88>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a10      	ldr	r2, [pc, #64]	; (8000d0c <HAL_UART_MspInit+0x88>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <HAL_UART_MspInit+0x88>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cde:	230c      	movs	r3, #12
 8000ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cea:	2303      	movs	r3, #3
 8000cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cee:	2307      	movs	r3, #7
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4805      	ldr	r0, [pc, #20]	; (8000d10 <HAL_UART_MspInit+0x8c>)
 8000cfa:	f000 f9b1 	bl	8001060 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000cfe:	bf00      	nop
 8000d00:	3728      	adds	r7, #40	; 0x28
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40004400 	.word	0x40004400
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020000 	.word	0x40020000

08000d14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d18:	480d      	ldr	r0, [pc, #52]	; (8000d50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d1a:	490e      	ldr	r1, [pc, #56]	; (8000d54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d1c:	4a0e      	ldr	r2, [pc, #56]	; (8000d58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d20:	e002      	b.n	8000d28 <LoopCopyDataInit>

08000d22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d26:	3304      	adds	r3, #4

08000d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d2c:	d3f9      	bcc.n	8000d22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2e:	4a0b      	ldr	r2, [pc, #44]	; (8000d5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d30:	4c0b      	ldr	r4, [pc, #44]	; (8000d60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d34:	e001      	b.n	8000d3a <LoopFillZerobss>

08000d36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d38:	3204      	adds	r2, #4

08000d3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d3c:	d3fb      	bcc.n	8000d36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d3e:	f7ff ff65 	bl	8000c0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d42:	f002 fec5 	bl	8003ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d46:	f7ff fd15 	bl	8000774 <main>
  bx  lr    
 8000d4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d54:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000d58:	08004690 	.word	0x08004690
  ldr r2, =_sbss
 8000d5c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000d60:	200002a4 	.word	0x200002a4

08000d64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d64:	e7fe      	b.n	8000d64 <ADC_IRQHandler>
	...

08000d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d6c:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <HAL_Init+0x40>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a0d      	ldr	r2, [pc, #52]	; (8000da8 <HAL_Init+0x40>)
 8000d72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d78:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <HAL_Init+0x40>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <HAL_Init+0x40>)
 8000d7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <HAL_Init+0x40>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a07      	ldr	r2, [pc, #28]	; (8000da8 <HAL_Init+0x40>)
 8000d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d90:	2003      	movs	r0, #3
 8000d92:	f000 f931 	bl	8000ff8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d96:	2000      	movs	r0, #0
 8000d98:	f000 f808 	bl	8000dac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d9c:	f7ff fe40 	bl	8000a20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40023c00 	.word	0x40023c00

08000dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db4:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <HAL_InitTick+0x54>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <HAL_InitTick+0x58>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 f93b 	bl	8001046 <HAL_SYSTICK_Config>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e00e      	b.n	8000df8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2b0f      	cmp	r3, #15
 8000dde:	d80a      	bhi.n	8000df6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de0:	2200      	movs	r2, #0
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	f04f 30ff 	mov.w	r0, #4294967295
 8000de8:	f000 f911 	bl	800100e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dec:	4a06      	ldr	r2, [pc, #24]	; (8000e08 <HAL_InitTick+0x5c>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000df2:	2300      	movs	r3, #0
 8000df4:	e000      	b.n	8000df8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000018 	.word	0x20000018
 8000e04:	20000020 	.word	0x20000020
 8000e08:	2000001c 	.word	0x2000001c

08000e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_IncTick+0x20>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_IncTick+0x24>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <HAL_IncTick+0x24>)
 8000e1e:	6013      	str	r3, [r2, #0]
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20000020 	.word	0x20000020
 8000e30:	20000154 	.word	0x20000154

08000e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return uwTick;
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <HAL_GetTick+0x14>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000154 	.word	0x20000154

08000e4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e54:	f7ff ffee 	bl	8000e34 <HAL_GetTick>
 8000e58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e64:	d005      	beq.n	8000e72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e66:	4b0a      	ldr	r3, [pc, #40]	; (8000e90 <HAL_Delay+0x44>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4413      	add	r3, r2
 8000e70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e72:	bf00      	nop
 8000e74:	f7ff ffde 	bl	8000e34 <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d8f7      	bhi.n	8000e74 <HAL_Delay+0x28>
  {
  }
}
 8000e84:	bf00      	nop
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000020 	.word	0x20000020

08000e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ec6:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	60d3      	str	r3, [r2, #12]
}
 8000ecc:	bf00      	nop
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	0a1b      	lsrs	r3, r3, #8
 8000ee6:	f003 0307 	and.w	r3, r3, #7
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	6039      	str	r1, [r7, #0]
 8000f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	db0a      	blt.n	8000f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	490c      	ldr	r1, [pc, #48]	; (8000f44 <__NVIC_SetPriority+0x4c>)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	0112      	lsls	r2, r2, #4
 8000f18:	b2d2      	uxtb	r2, r2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f20:	e00a      	b.n	8000f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4908      	ldr	r1, [pc, #32]	; (8000f48 <__NVIC_SetPriority+0x50>)
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	f003 030f 	and.w	r3, r3, #15
 8000f2e:	3b04      	subs	r3, #4
 8000f30:	0112      	lsls	r2, r2, #4
 8000f32:	b2d2      	uxtb	r2, r2
 8000f34:	440b      	add	r3, r1
 8000f36:	761a      	strb	r2, [r3, #24]
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000e100 	.word	0xe000e100
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b089      	sub	sp, #36	; 0x24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f1c3 0307 	rsb	r3, r3, #7
 8000f66:	2b04      	cmp	r3, #4
 8000f68:	bf28      	it	cs
 8000f6a:	2304      	movcs	r3, #4
 8000f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3304      	adds	r3, #4
 8000f72:	2b06      	cmp	r3, #6
 8000f74:	d902      	bls.n	8000f7c <NVIC_EncodePriority+0x30>
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3b03      	subs	r3, #3
 8000f7a:	e000      	b.n	8000f7e <NVIC_EncodePriority+0x32>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	f04f 32ff 	mov.w	r2, #4294967295
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43da      	mvns	r2, r3
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	401a      	ands	r2, r3
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f94:	f04f 31ff 	mov.w	r1, #4294967295
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9e:	43d9      	mvns	r1, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa4:	4313      	orrs	r3, r2
         );
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3724      	adds	r7, #36	; 0x24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fc4:	d301      	bcc.n	8000fca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e00f      	b.n	8000fea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fca:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <SysTick_Config+0x40>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fd2:	210f      	movs	r1, #15
 8000fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd8:	f7ff ff8e 	bl	8000ef8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fdc:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <SysTick_Config+0x40>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fe2:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <SysTick_Config+0x40>)
 8000fe4:	2207      	movs	r2, #7
 8000fe6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	e000e010 	.word	0xe000e010

08000ff8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff ff47 	bl	8000e94 <__NVIC_SetPriorityGrouping>
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800100e:	b580      	push	{r7, lr}
 8001010:	b086      	sub	sp, #24
 8001012:	af00      	add	r7, sp, #0
 8001014:	4603      	mov	r3, r0
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	607a      	str	r2, [r7, #4]
 800101a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001020:	f7ff ff5c 	bl	8000edc <__NVIC_GetPriorityGrouping>
 8001024:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	68b9      	ldr	r1, [r7, #8]
 800102a:	6978      	ldr	r0, [r7, #20]
 800102c:	f7ff ff8e 	bl	8000f4c <NVIC_EncodePriority>
 8001030:	4602      	mov	r2, r0
 8001032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001036:	4611      	mov	r1, r2
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff5d 	bl	8000ef8 <__NVIC_SetPriority>
}
 800103e:	bf00      	nop
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff ffb0 	bl	8000fb4 <SysTick_Config>
 8001054:	4603      	mov	r3, r0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001060:	b480      	push	{r7}
 8001062:	b089      	sub	sp, #36	; 0x24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001072:	2300      	movs	r3, #0
 8001074:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
 800107a:	e165      	b.n	8001348 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800107c:	2201      	movs	r2, #1
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	429a      	cmp	r2, r3
 8001096:	f040 8154 	bne.w	8001342 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f003 0303 	and.w	r3, r3, #3
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d005      	beq.n	80010b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d130      	bne.n	8001114 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	2203      	movs	r2, #3
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	68da      	ldr	r2, [r3, #12]
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010e8:	2201      	movs	r2, #1
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	091b      	lsrs	r3, r3, #4
 80010fe:	f003 0201 	and.w	r2, r3, #1
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	2b03      	cmp	r3, #3
 800111e:	d017      	beq.n	8001150 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	2203      	movs	r2, #3
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d123      	bne.n	80011a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	08da      	lsrs	r2, r3, #3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3208      	adds	r2, #8
 8001164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001168:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	f003 0307 	and.w	r3, r3, #7
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	220f      	movs	r2, #15
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	691a      	ldr	r2, [r3, #16]
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	08da      	lsrs	r2, r3, #3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3208      	adds	r2, #8
 800119e:	69b9      	ldr	r1, [r7, #24]
 80011a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	2203      	movs	r2, #3
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 0203 	and.w	r2, r3, #3
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f000 80ae 	beq.w	8001342 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4b5d      	ldr	r3, [pc, #372]	; (8001360 <HAL_GPIO_Init+0x300>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	4a5c      	ldr	r2, [pc, #368]	; (8001360 <HAL_GPIO_Init+0x300>)
 80011f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f4:	6453      	str	r3, [r2, #68]	; 0x44
 80011f6:	4b5a      	ldr	r3, [pc, #360]	; (8001360 <HAL_GPIO_Init+0x300>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001202:	4a58      	ldr	r2, [pc, #352]	; (8001364 <HAL_GPIO_Init+0x304>)
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	089b      	lsrs	r3, r3, #2
 8001208:	3302      	adds	r3, #2
 800120a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	220f      	movs	r2, #15
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4f      	ldr	r2, [pc, #316]	; (8001368 <HAL_GPIO_Init+0x308>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d025      	beq.n	800127a <HAL_GPIO_Init+0x21a>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4e      	ldr	r2, [pc, #312]	; (800136c <HAL_GPIO_Init+0x30c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d01f      	beq.n	8001276 <HAL_GPIO_Init+0x216>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4d      	ldr	r2, [pc, #308]	; (8001370 <HAL_GPIO_Init+0x310>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d019      	beq.n	8001272 <HAL_GPIO_Init+0x212>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4c      	ldr	r2, [pc, #304]	; (8001374 <HAL_GPIO_Init+0x314>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d013      	beq.n	800126e <HAL_GPIO_Init+0x20e>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a4b      	ldr	r2, [pc, #300]	; (8001378 <HAL_GPIO_Init+0x318>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d00d      	beq.n	800126a <HAL_GPIO_Init+0x20a>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a4a      	ldr	r2, [pc, #296]	; (800137c <HAL_GPIO_Init+0x31c>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d007      	beq.n	8001266 <HAL_GPIO_Init+0x206>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a49      	ldr	r2, [pc, #292]	; (8001380 <HAL_GPIO_Init+0x320>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d101      	bne.n	8001262 <HAL_GPIO_Init+0x202>
 800125e:	2306      	movs	r3, #6
 8001260:	e00c      	b.n	800127c <HAL_GPIO_Init+0x21c>
 8001262:	2307      	movs	r3, #7
 8001264:	e00a      	b.n	800127c <HAL_GPIO_Init+0x21c>
 8001266:	2305      	movs	r3, #5
 8001268:	e008      	b.n	800127c <HAL_GPIO_Init+0x21c>
 800126a:	2304      	movs	r3, #4
 800126c:	e006      	b.n	800127c <HAL_GPIO_Init+0x21c>
 800126e:	2303      	movs	r3, #3
 8001270:	e004      	b.n	800127c <HAL_GPIO_Init+0x21c>
 8001272:	2302      	movs	r3, #2
 8001274:	e002      	b.n	800127c <HAL_GPIO_Init+0x21c>
 8001276:	2301      	movs	r3, #1
 8001278:	e000      	b.n	800127c <HAL_GPIO_Init+0x21c>
 800127a:	2300      	movs	r3, #0
 800127c:	69fa      	ldr	r2, [r7, #28]
 800127e:	f002 0203 	and.w	r2, r2, #3
 8001282:	0092      	lsls	r2, r2, #2
 8001284:	4093      	lsls	r3, r2
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800128c:	4935      	ldr	r1, [pc, #212]	; (8001364 <HAL_GPIO_Init+0x304>)
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	089b      	lsrs	r3, r3, #2
 8001292:	3302      	adds	r3, #2
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800129a:	4b3a      	ldr	r3, [pc, #232]	; (8001384 <HAL_GPIO_Init+0x324>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	43db      	mvns	r3, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4013      	ands	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012be:	4a31      	ldr	r2, [pc, #196]	; (8001384 <HAL_GPIO_Init+0x324>)
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012c4:	4b2f      	ldr	r3, [pc, #188]	; (8001384 <HAL_GPIO_Init+0x324>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d003      	beq.n	80012e8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012e8:	4a26      	ldr	r2, [pc, #152]	; (8001384 <HAL_GPIO_Init+0x324>)
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012ee:	4b25      	ldr	r3, [pc, #148]	; (8001384 <HAL_GPIO_Init+0x324>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	43db      	mvns	r3, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001312:	4a1c      	ldr	r2, [pc, #112]	; (8001384 <HAL_GPIO_Init+0x324>)
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001318:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <HAL_GPIO_Init+0x324>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800133c:	4a11      	ldr	r2, [pc, #68]	; (8001384 <HAL_GPIO_Init+0x324>)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3301      	adds	r3, #1
 8001346:	61fb      	str	r3, [r7, #28]
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	2b0f      	cmp	r3, #15
 800134c:	f67f ae96 	bls.w	800107c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	3724      	adds	r7, #36	; 0x24
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	40023800 	.word	0x40023800
 8001364:	40013800 	.word	0x40013800
 8001368:	40020000 	.word	0x40020000
 800136c:	40020400 	.word	0x40020400
 8001370:	40020800 	.word	0x40020800
 8001374:	40020c00 	.word	0x40020c00
 8001378:	40021000 	.word	0x40021000
 800137c:	40021400 	.word	0x40021400
 8001380:	40021800 	.word	0x40021800
 8001384:	40013c00 	.word	0x40013c00

08001388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	807b      	strh	r3, [r7, #2]
 8001394:	4613      	mov	r3, r2
 8001396:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001398:	787b      	ldrb	r3, [r7, #1]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800139e:	887a      	ldrh	r2, [r7, #2]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013a4:	e003      	b.n	80013ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013a6:	887b      	ldrh	r3, [r7, #2]
 80013a8:	041a      	lsls	r2, r3, #16
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	619a      	str	r2, [r3, #24]
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
	...

080013bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e12b      	b.n	8001626 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d106      	bne.n	80013e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff f97e 	bl	80006e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2224      	movs	r2, #36	; 0x24
 80013ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 0201 	bic.w	r2, r2, #1
 80013fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800140e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800141e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001420:	f001 f854 	bl	80024cc <HAL_RCC_GetPCLK1Freq>
 8001424:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	4a81      	ldr	r2, [pc, #516]	; (8001630 <HAL_I2C_Init+0x274>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d807      	bhi.n	8001440 <HAL_I2C_Init+0x84>
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4a80      	ldr	r2, [pc, #512]	; (8001634 <HAL_I2C_Init+0x278>)
 8001434:	4293      	cmp	r3, r2
 8001436:	bf94      	ite	ls
 8001438:	2301      	movls	r3, #1
 800143a:	2300      	movhi	r3, #0
 800143c:	b2db      	uxtb	r3, r3
 800143e:	e006      	b.n	800144e <HAL_I2C_Init+0x92>
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4a7d      	ldr	r2, [pc, #500]	; (8001638 <HAL_I2C_Init+0x27c>)
 8001444:	4293      	cmp	r3, r2
 8001446:	bf94      	ite	ls
 8001448:	2301      	movls	r3, #1
 800144a:	2300      	movhi	r3, #0
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e0e7      	b.n	8001626 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	4a78      	ldr	r2, [pc, #480]	; (800163c <HAL_I2C_Init+0x280>)
 800145a:	fba2 2303 	umull	r2, r3, r2, r3
 800145e:	0c9b      	lsrs	r3, r3, #18
 8001460:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	68ba      	ldr	r2, [r7, #8]
 8001472:	430a      	orrs	r2, r1
 8001474:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	4a6a      	ldr	r2, [pc, #424]	; (8001630 <HAL_I2C_Init+0x274>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d802      	bhi.n	8001490 <HAL_I2C_Init+0xd4>
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	3301      	adds	r3, #1
 800148e:	e009      	b.n	80014a4 <HAL_I2C_Init+0xe8>
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001496:	fb02 f303 	mul.w	r3, r2, r3
 800149a:	4a69      	ldr	r2, [pc, #420]	; (8001640 <HAL_I2C_Init+0x284>)
 800149c:	fba2 2303 	umull	r2, r3, r2, r3
 80014a0:	099b      	lsrs	r3, r3, #6
 80014a2:	3301      	adds	r3, #1
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	6812      	ldr	r2, [r2, #0]
 80014a8:	430b      	orrs	r3, r1
 80014aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80014b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	495c      	ldr	r1, [pc, #368]	; (8001630 <HAL_I2C_Init+0x274>)
 80014c0:	428b      	cmp	r3, r1
 80014c2:	d819      	bhi.n	80014f8 <HAL_I2C_Init+0x13c>
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	1e59      	subs	r1, r3, #1
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80014d2:	1c59      	adds	r1, r3, #1
 80014d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80014d8:	400b      	ands	r3, r1
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d00a      	beq.n	80014f4 <HAL_I2C_Init+0x138>
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	1e59      	subs	r1, r3, #1
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80014ec:	3301      	adds	r3, #1
 80014ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014f2:	e051      	b.n	8001598 <HAL_I2C_Init+0x1dc>
 80014f4:	2304      	movs	r3, #4
 80014f6:	e04f      	b.n	8001598 <HAL_I2C_Init+0x1dc>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d111      	bne.n	8001524 <HAL_I2C_Init+0x168>
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	1e58      	subs	r0, r3, #1
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6859      	ldr	r1, [r3, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	440b      	add	r3, r1
 800150e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001512:	3301      	adds	r3, #1
 8001514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001518:	2b00      	cmp	r3, #0
 800151a:	bf0c      	ite	eq
 800151c:	2301      	moveq	r3, #1
 800151e:	2300      	movne	r3, #0
 8001520:	b2db      	uxtb	r3, r3
 8001522:	e012      	b.n	800154a <HAL_I2C_Init+0x18e>
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	1e58      	subs	r0, r3, #1
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6859      	ldr	r1, [r3, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	440b      	add	r3, r1
 8001532:	0099      	lsls	r1, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	fbb0 f3f3 	udiv	r3, r0, r3
 800153a:	3301      	adds	r3, #1
 800153c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001540:	2b00      	cmp	r3, #0
 8001542:	bf0c      	ite	eq
 8001544:	2301      	moveq	r3, #1
 8001546:	2300      	movne	r3, #0
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <HAL_I2C_Init+0x196>
 800154e:	2301      	movs	r3, #1
 8001550:	e022      	b.n	8001598 <HAL_I2C_Init+0x1dc>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d10e      	bne.n	8001578 <HAL_I2C_Init+0x1bc>
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	1e58      	subs	r0, r3, #1
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6859      	ldr	r1, [r3, #4]
 8001562:	460b      	mov	r3, r1
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	440b      	add	r3, r1
 8001568:	fbb0 f3f3 	udiv	r3, r0, r3
 800156c:	3301      	adds	r3, #1
 800156e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001576:	e00f      	b.n	8001598 <HAL_I2C_Init+0x1dc>
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	1e58      	subs	r0, r3, #1
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6859      	ldr	r1, [r3, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	440b      	add	r3, r1
 8001586:	0099      	lsls	r1, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	fbb0 f3f3 	udiv	r3, r0, r3
 800158e:	3301      	adds	r3, #1
 8001590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001594:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001598:	6879      	ldr	r1, [r7, #4]
 800159a:	6809      	ldr	r1, [r1, #0]
 800159c:	4313      	orrs	r3, r2
 800159e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69da      	ldr	r2, [r3, #28]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a1b      	ldr	r3, [r3, #32]
 80015b2:	431a      	orrs	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	430a      	orrs	r2, r1
 80015ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80015c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	6911      	ldr	r1, [r2, #16]
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	68d2      	ldr	r2, [r2, #12]
 80015d2:	4311      	orrs	r1, r2
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	6812      	ldr	r2, [r2, #0]
 80015d8:	430b      	orrs	r3, r1
 80015da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	695a      	ldr	r2, [r3, #20]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	430a      	orrs	r2, r1
 80015f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f042 0201 	orr.w	r2, r2, #1
 8001606:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2220      	movs	r2, #32
 8001612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	000186a0 	.word	0x000186a0
 8001634:	001e847f 	.word	0x001e847f
 8001638:	003d08ff 	.word	0x003d08ff
 800163c:	431bde83 	.word	0x431bde83
 8001640:	10624dd3 	.word	0x10624dd3

08001644 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b088      	sub	sp, #32
 8001648:	af02      	add	r7, sp, #8
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	607a      	str	r2, [r7, #4]
 800164e:	461a      	mov	r2, r3
 8001650:	460b      	mov	r3, r1
 8001652:	817b      	strh	r3, [r7, #10]
 8001654:	4613      	mov	r3, r2
 8001656:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001658:	f7ff fbec 	bl	8000e34 <HAL_GetTick>
 800165c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b20      	cmp	r3, #32
 8001668:	f040 80e0 	bne.w	800182c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	2319      	movs	r3, #25
 8001672:	2201      	movs	r2, #1
 8001674:	4970      	ldr	r1, [pc, #448]	; (8001838 <HAL_I2C_Master_Transmit+0x1f4>)
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f000 fc58 	bl	8001f2c <I2C_WaitOnFlagUntilTimeout>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001682:	2302      	movs	r3, #2
 8001684:	e0d3      	b.n	800182e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800168c:	2b01      	cmp	r3, #1
 800168e:	d101      	bne.n	8001694 <HAL_I2C_Master_Transmit+0x50>
 8001690:	2302      	movs	r3, #2
 8001692:	e0cc      	b.n	800182e <HAL_I2C_Master_Transmit+0x1ea>
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2201      	movs	r2, #1
 8001698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d007      	beq.n	80016ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f042 0201 	orr.w	r2, r2, #1
 80016b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2221      	movs	r2, #33	; 0x21
 80016ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2210      	movs	r2, #16
 80016d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2200      	movs	r2, #0
 80016de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	893a      	ldrh	r2, [r7, #8]
 80016ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	4a50      	ldr	r2, [pc, #320]	; (800183c <HAL_I2C_Master_Transmit+0x1f8>)
 80016fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80016fc:	8979      	ldrh	r1, [r7, #10]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	6a3a      	ldr	r2, [r7, #32]
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f000 fac2 	bl	8001c8c <I2C_MasterRequestWrite>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e08d      	b.n	800182e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	695b      	ldr	r3, [r3, #20]
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001728:	e066      	b.n	80017f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	6a39      	ldr	r1, [r7, #32]
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	f000 fcd2 	bl	80020d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d00d      	beq.n	8001756 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	2b04      	cmp	r3, #4
 8001740:	d107      	bne.n	8001752 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001750:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e06b      	b.n	800182e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175a:	781a      	ldrb	r2, [r3, #0]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001766:	1c5a      	adds	r2, r3, #1
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001770:	b29b      	uxth	r3, r3
 8001772:	3b01      	subs	r3, #1
 8001774:	b29a      	uxth	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800177e:	3b01      	subs	r3, #1
 8001780:	b29a      	uxth	r2, r3
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	695b      	ldr	r3, [r3, #20]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b04      	cmp	r3, #4
 8001792:	d11b      	bne.n	80017cc <HAL_I2C_Master_Transmit+0x188>
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001798:	2b00      	cmp	r3, #0
 800179a:	d017      	beq.n	80017cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a0:	781a      	ldrb	r2, [r3, #0]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ac:	1c5a      	adds	r2, r3, #1
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	3b01      	subs	r3, #1
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c4:	3b01      	subs	r3, #1
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	6a39      	ldr	r1, [r7, #32]
 80017d0:	68f8      	ldr	r0, [r7, #12]
 80017d2:	f000 fcc2 	bl	800215a <I2C_WaitOnBTFFlagUntilTimeout>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d00d      	beq.n	80017f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	2b04      	cmp	r3, #4
 80017e2:	d107      	bne.n	80017f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e01a      	b.n	800182e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d194      	bne.n	800172a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800180e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2220      	movs	r2, #32
 8001814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001828:	2300      	movs	r3, #0
 800182a:	e000      	b.n	800182e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800182c:	2302      	movs	r3, #2
  }
}
 800182e:	4618      	mov	r0, r3
 8001830:	3718      	adds	r7, #24
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	00100002 	.word	0x00100002
 800183c:	ffff0000 	.word	0xffff0000

08001840 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08c      	sub	sp, #48	; 0x30
 8001844:	af02      	add	r7, sp, #8
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	607a      	str	r2, [r7, #4]
 800184a:	461a      	mov	r2, r3
 800184c:	460b      	mov	r3, r1
 800184e:	817b      	strh	r3, [r7, #10]
 8001850:	4613      	mov	r3, r2
 8001852:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001854:	f7ff faee 	bl	8000e34 <HAL_GetTick>
 8001858:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b20      	cmp	r3, #32
 8001864:	f040 820b 	bne.w	8001c7e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	2319      	movs	r3, #25
 800186e:	2201      	movs	r2, #1
 8001870:	497c      	ldr	r1, [pc, #496]	; (8001a64 <HAL_I2C_Master_Receive+0x224>)
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f000 fb5a 	bl	8001f2c <I2C_WaitOnFlagUntilTimeout>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800187e:	2302      	movs	r3, #2
 8001880:	e1fe      	b.n	8001c80 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001888:	2b01      	cmp	r3, #1
 800188a:	d101      	bne.n	8001890 <HAL_I2C_Master_Receive+0x50>
 800188c:	2302      	movs	r3, #2
 800188e:	e1f7      	b.n	8001c80 <HAL_I2C_Master_Receive+0x440>
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d007      	beq.n	80018b6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f042 0201 	orr.w	r2, r2, #1
 80018b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2222      	movs	r2, #34	; 0x22
 80018ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2210      	movs	r2, #16
 80018d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2200      	movs	r2, #0
 80018da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	893a      	ldrh	r2, [r7, #8]
 80018e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4a5c      	ldr	r2, [pc, #368]	; (8001a68 <HAL_I2C_Master_Receive+0x228>)
 80018f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80018f8:	8979      	ldrh	r1, [r7, #10]
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f000 fa46 	bl	8001d90 <I2C_MasterRequestRead>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e1b8      	b.n	8001c80 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001912:	2b00      	cmp	r3, #0
 8001914:	d113      	bne.n	800193e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001916:	2300      	movs	r3, #0
 8001918:	623b      	str	r3, [r7, #32]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	623b      	str	r3, [r7, #32]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	623b      	str	r3, [r7, #32]
 800192a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	e18c      	b.n	8001c58 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001942:	2b01      	cmp	r3, #1
 8001944:	d11b      	bne.n	800197e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001954:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	61fb      	str	r3, [r7, #28]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	61fb      	str	r3, [r7, #28]
 800196a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	e16c      	b.n	8001c58 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001982:	2b02      	cmp	r3, #2
 8001984:	d11b      	bne.n	80019be <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001994:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019a6:	2300      	movs	r3, #0
 80019a8:	61bb      	str	r3, [r7, #24]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	695b      	ldr	r3, [r3, #20]
 80019b0:	61bb      	str	r3, [r7, #24]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	61bb      	str	r3, [r7, #24]
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	e14c      	b.n	8001c58 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80019cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	617b      	str	r3, [r7, #20]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80019e4:	e138      	b.n	8001c58 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ea:	2b03      	cmp	r3, #3
 80019ec:	f200 80f1 	bhi.w	8001bd2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d123      	bne.n	8001a40 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	f000 fbed 	bl	80021dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e139      	b.n	8001c80 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	691a      	ldr	r2, [r3, #16]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	3b01      	subs	r3, #1
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a3e:	e10b      	b.n	8001c58 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d14e      	bne.n	8001ae6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a4e:	2200      	movs	r2, #0
 8001a50:	4906      	ldr	r1, [pc, #24]	; (8001a6c <HAL_I2C_Master_Receive+0x22c>)
 8001a52:	68f8      	ldr	r0, [r7, #12]
 8001a54:	f000 fa6a 	bl	8001f2c <I2C_WaitOnFlagUntilTimeout>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d008      	beq.n	8001a70 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e10e      	b.n	8001c80 <HAL_I2C_Master_Receive+0x440>
 8001a62:	bf00      	nop
 8001a64:	00100002 	.word	0x00100002
 8001a68:	ffff0000 	.word	0xffff0000
 8001a6c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	691a      	ldr	r2, [r3, #16]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	b2d2      	uxtb	r2, r2
 8001a8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	691a      	ldr	r2, [r3, #16]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abc:	b2d2      	uxtb	r2, r2
 8001abe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac4:	1c5a      	adds	r2, r3, #1
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	3b01      	subs	r3, #1
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ae4:	e0b8      	b.n	8001c58 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aec:	2200      	movs	r2, #0
 8001aee:	4966      	ldr	r1, [pc, #408]	; (8001c88 <HAL_I2C_Master_Receive+0x448>)
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f000 fa1b 	bl	8001f2c <I2C_WaitOnFlagUntilTimeout>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e0bf      	b.n	8001c80 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	691a      	ldr	r2, [r3, #16]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b48:	2200      	movs	r2, #0
 8001b4a:	494f      	ldr	r1, [pc, #316]	; (8001c88 <HAL_I2C_Master_Receive+0x448>)
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f000 f9ed 	bl	8001f2c <I2C_WaitOnFlagUntilTimeout>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e091      	b.n	8001c80 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	691a      	ldr	r2, [r3, #16]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7e:	1c5a      	adds	r2, r3, #1
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	3b01      	subs	r3, #1
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	691a      	ldr	r2, [r3, #16]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	1c5a      	adds	r2, r3, #1
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bd0:	e042      	b.n	8001c58 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f000 fb00 	bl	80021dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e04c      	b.n	8001c80 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	691a      	ldr	r2, [r3, #16]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	1c5a      	adds	r2, r3, #1
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c02:	3b01      	subs	r3, #1
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	3b01      	subs	r3, #1
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d118      	bne.n	8001c58 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	691a      	ldr	r2, [r3, #16]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c38:	1c5a      	adds	r2, r3, #1
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c42:	3b01      	subs	r3, #1
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	3b01      	subs	r3, #1
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f47f aec2 	bne.w	80019e6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2220      	movs	r2, #32
 8001c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	e000      	b.n	8001c80 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001c7e:	2302      	movs	r3, #2
  }
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3728      	adds	r7, #40	; 0x28
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	00010004 	.word	0x00010004

08001c8c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b088      	sub	sp, #32
 8001c90:	af02      	add	r7, sp, #8
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	607a      	str	r2, [r7, #4]
 8001c96:	603b      	str	r3, [r7, #0]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	2b08      	cmp	r3, #8
 8001ca6:	d006      	beq.n	8001cb6 <I2C_MasterRequestWrite+0x2a>
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d003      	beq.n	8001cb6 <I2C_MasterRequestWrite+0x2a>
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001cb4:	d108      	bne.n	8001cc8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	e00b      	b.n	8001ce0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ccc:	2b12      	cmp	r3, #18
 8001cce:	d107      	bne.n	8001ce0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cde:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f000 f91d 	bl	8001f2c <I2C_WaitOnFlagUntilTimeout>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d00d      	beq.n	8001d14 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d06:	d103      	bne.n	8001d10 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e035      	b.n	8001d80 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d1c:	d108      	bne.n	8001d30 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d1e:	897b      	ldrh	r3, [r7, #10]
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	461a      	mov	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d2c:	611a      	str	r2, [r3, #16]
 8001d2e:	e01b      	b.n	8001d68 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d30:	897b      	ldrh	r3, [r7, #10]
 8001d32:	11db      	asrs	r3, r3, #7
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	f003 0306 	and.w	r3, r3, #6
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	f063 030f 	orn	r3, r3, #15
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	490e      	ldr	r1, [pc, #56]	; (8001d88 <I2C_MasterRequestWrite+0xfc>)
 8001d4e:	68f8      	ldr	r0, [r7, #12]
 8001d50:	f000 f943 	bl	8001fda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e010      	b.n	8001d80 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d5e:	897b      	ldrh	r3, [r7, #10]
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	4907      	ldr	r1, [pc, #28]	; (8001d8c <I2C_MasterRequestWrite+0x100>)
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f000 f933 	bl	8001fda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e000      	b.n	8001d80 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	00010008 	.word	0x00010008
 8001d8c:	00010002 	.word	0x00010002

08001d90 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b088      	sub	sp, #32
 8001d94:	af02      	add	r7, sp, #8
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	607a      	str	r2, [r7, #4]
 8001d9a:	603b      	str	r3, [r7, #0]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001db4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	2b08      	cmp	r3, #8
 8001dba:	d006      	beq.n	8001dca <I2C_MasterRequestRead+0x3a>
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d003      	beq.n	8001dca <I2C_MasterRequestRead+0x3a>
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001dc8:	d108      	bne.n	8001ddc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	e00b      	b.n	8001df4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de0:	2b11      	cmp	r3, #17
 8001de2:	d107      	bne.n	8001df4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001df2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e00:	68f8      	ldr	r0, [r7, #12]
 8001e02:	f000 f893 	bl	8001f2c <I2C_WaitOnFlagUntilTimeout>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00d      	beq.n	8001e28 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e1a:	d103      	bne.n	8001e24 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e079      	b.n	8001f1c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e30:	d108      	bne.n	8001e44 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001e32:	897b      	ldrh	r3, [r7, #10]
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	611a      	str	r2, [r3, #16]
 8001e42:	e05f      	b.n	8001f04 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e44:	897b      	ldrh	r3, [r7, #10]
 8001e46:	11db      	asrs	r3, r3, #7
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	f003 0306 	and.w	r3, r3, #6
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	f063 030f 	orn	r3, r3, #15
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	4930      	ldr	r1, [pc, #192]	; (8001f24 <I2C_MasterRequestRead+0x194>)
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f000 f8b9 	bl	8001fda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e054      	b.n	8001f1c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e72:	897b      	ldrh	r3, [r7, #10]
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	4929      	ldr	r1, [pc, #164]	; (8001f28 <I2C_MasterRequestRead+0x198>)
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f000 f8a9 	bl	8001fda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e044      	b.n	8001f1c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e92:	2300      	movs	r3, #0
 8001e94:	613b      	str	r3, [r7, #16]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	613b      	str	r3, [r7, #16]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	613b      	str	r3, [r7, #16]
 8001ea6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001eb6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f000 f831 	bl	8001f2c <I2C_WaitOnFlagUntilTimeout>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00d      	beq.n	8001eec <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ede:	d103      	bne.n	8001ee8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ee6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e017      	b.n	8001f1c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001eec:	897b      	ldrh	r3, [r7, #10]
 8001eee:	11db      	asrs	r3, r3, #7
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	f003 0306 	and.w	r3, r3, #6
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	f063 030e 	orn	r3, r3, #14
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	4907      	ldr	r1, [pc, #28]	; (8001f28 <I2C_MasterRequestRead+0x198>)
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f000 f865 	bl	8001fda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	00010008 	.word	0x00010008
 8001f28:	00010002 	.word	0x00010002

08001f2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	603b      	str	r3, [r7, #0]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f3c:	e025      	b.n	8001f8a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f44:	d021      	beq.n	8001f8a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f46:	f7fe ff75 	bl	8000e34 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d302      	bcc.n	8001f5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d116      	bne.n	8001f8a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2220      	movs	r2, #32
 8001f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f043 0220 	orr.w	r2, r3, #32
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e023      	b.n	8001fd2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	0c1b      	lsrs	r3, r3, #16
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d10d      	bne.n	8001fb0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	43da      	mvns	r2, r3
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	bf0c      	ite	eq
 8001fa6:	2301      	moveq	r3, #1
 8001fa8:	2300      	movne	r3, #0
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	461a      	mov	r2, r3
 8001fae:	e00c      	b.n	8001fca <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	43da      	mvns	r2, r3
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	bf0c      	ite	eq
 8001fc2:	2301      	moveq	r3, #1
 8001fc4:	2300      	movne	r3, #0
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	461a      	mov	r2, r3
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d0b6      	beq.n	8001f3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b084      	sub	sp, #16
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	60f8      	str	r0, [r7, #12]
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	607a      	str	r2, [r7, #4]
 8001fe6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fe8:	e051      	b.n	800208e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ff8:	d123      	bne.n	8002042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002008:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002012:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2220      	movs	r2, #32
 800201e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	f043 0204 	orr.w	r2, r3, #4
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e046      	b.n	80020d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002048:	d021      	beq.n	800208e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800204a:	f7fe fef3 	bl	8000e34 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	429a      	cmp	r2, r3
 8002058:	d302      	bcc.n	8002060 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d116      	bne.n	800208e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2220      	movs	r2, #32
 800206a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f043 0220 	orr.w	r2, r3, #32
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e020      	b.n	80020d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	0c1b      	lsrs	r3, r3, #16
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b01      	cmp	r3, #1
 8002096:	d10c      	bne.n	80020b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	43da      	mvns	r2, r3
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	4013      	ands	r3, r2
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	bf14      	ite	ne
 80020aa:	2301      	movne	r3, #1
 80020ac:	2300      	moveq	r3, #0
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	e00b      	b.n	80020ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	43da      	mvns	r2, r3
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	4013      	ands	r3, r2
 80020be:	b29b      	uxth	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	bf14      	ite	ne
 80020c4:	2301      	movne	r3, #1
 80020c6:	2300      	moveq	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d18d      	bne.n	8001fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020e4:	e02d      	b.n	8002142 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 f8ce 	bl	8002288 <I2C_IsAcknowledgeFailed>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e02d      	b.n	8002152 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020fc:	d021      	beq.n	8002142 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020fe:	f7fe fe99 	bl	8000e34 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	68ba      	ldr	r2, [r7, #8]
 800210a:	429a      	cmp	r2, r3
 800210c:	d302      	bcc.n	8002114 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d116      	bne.n	8002142 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2220      	movs	r2, #32
 800211e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	f043 0220 	orr.w	r2, r3, #32
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e007      	b.n	8002152 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	695b      	ldr	r3, [r3, #20]
 8002148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800214c:	2b80      	cmp	r3, #128	; 0x80
 800214e:	d1ca      	bne.n	80020e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b084      	sub	sp, #16
 800215e:	af00      	add	r7, sp, #0
 8002160:	60f8      	str	r0, [r7, #12]
 8002162:	60b9      	str	r1, [r7, #8]
 8002164:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002166:	e02d      	b.n	80021c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f000 f88d 	bl	8002288 <I2C_IsAcknowledgeFailed>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e02d      	b.n	80021d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217e:	d021      	beq.n	80021c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002180:	f7fe fe58 	bl	8000e34 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	429a      	cmp	r2, r3
 800218e:	d302      	bcc.n	8002196 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d116      	bne.n	80021c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2220      	movs	r2, #32
 80021a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b0:	f043 0220 	orr.w	r2, r3, #32
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e007      	b.n	80021d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	f003 0304 	and.w	r3, r3, #4
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d1ca      	bne.n	8002168 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021e8:	e042      	b.n	8002270 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	f003 0310 	and.w	r3, r3, #16
 80021f4:	2b10      	cmp	r3, #16
 80021f6:	d119      	bne.n	800222c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f06f 0210 	mvn.w	r2, #16
 8002200:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2220      	movs	r2, #32
 800220c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e029      	b.n	8002280 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800222c:	f7fe fe02 	bl	8000e34 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	429a      	cmp	r2, r3
 800223a:	d302      	bcc.n	8002242 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d116      	bne.n	8002270 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2220      	movs	r2, #32
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225c:	f043 0220 	orr.w	r2, r3, #32
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e007      	b.n	8002280 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227a:	2b40      	cmp	r3, #64	; 0x40
 800227c:	d1b5      	bne.n	80021ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800229a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800229e:	d11b      	bne.n	80022d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2220      	movs	r2, #32
 80022b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c4:	f043 0204 	orr.w	r2, r3, #4
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e000      	b.n	80022da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
	...

080022e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e0cc      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022fc:	4b68      	ldr	r3, [pc, #416]	; (80024a0 <HAL_RCC_ClockConfig+0x1b8>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 030f 	and.w	r3, r3, #15
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	429a      	cmp	r2, r3
 8002308:	d90c      	bls.n	8002324 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230a:	4b65      	ldr	r3, [pc, #404]	; (80024a0 <HAL_RCC_ClockConfig+0x1b8>)
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002312:	4b63      	ldr	r3, [pc, #396]	; (80024a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	d001      	beq.n	8002324 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e0b8      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d020      	beq.n	8002372 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	d005      	beq.n	8002348 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800233c:	4b59      	ldr	r3, [pc, #356]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	4a58      	ldr	r2, [pc, #352]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002346:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0308 	and.w	r3, r3, #8
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002354:	4b53      	ldr	r3, [pc, #332]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	4a52      	ldr	r2, [pc, #328]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800235e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002360:	4b50      	ldr	r3, [pc, #320]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	494d      	ldr	r1, [pc, #308]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	4313      	orrs	r3, r2
 8002370:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d044      	beq.n	8002408 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d107      	bne.n	8002396 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002386:	4b47      	ldr	r3, [pc, #284]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d119      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e07f      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d003      	beq.n	80023a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d107      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023a6:	4b3f      	ldr	r3, [pc, #252]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d109      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e06f      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b6:	4b3b      	ldr	r3, [pc, #236]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e067      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023c6:	4b37      	ldr	r3, [pc, #220]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f023 0203 	bic.w	r2, r3, #3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	4934      	ldr	r1, [pc, #208]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023d8:	f7fe fd2c 	bl	8000e34 <HAL_GetTick>
 80023dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023de:	e00a      	b.n	80023f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e0:	f7fe fd28 	bl	8000e34 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e04f      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f6:	4b2b      	ldr	r3, [pc, #172]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 020c 	and.w	r2, r3, #12
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	429a      	cmp	r2, r3
 8002406:	d1eb      	bne.n	80023e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002408:	4b25      	ldr	r3, [pc, #148]	; (80024a0 <HAL_RCC_ClockConfig+0x1b8>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 030f 	and.w	r3, r3, #15
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	d20c      	bcs.n	8002430 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002416:	4b22      	ldr	r3, [pc, #136]	; (80024a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800241e:	4b20      	ldr	r3, [pc, #128]	; (80024a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	429a      	cmp	r2, r3
 800242a:	d001      	beq.n	8002430 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e032      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d008      	beq.n	800244e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800243c:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4916      	ldr	r1, [pc, #88]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	4313      	orrs	r3, r2
 800244c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	2b00      	cmp	r3, #0
 8002458:	d009      	beq.n	800246e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800245a:	4b12      	ldr	r3, [pc, #72]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	490e      	ldr	r1, [pc, #56]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 800246a:	4313      	orrs	r3, r2
 800246c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800246e:	f000 f855 	bl	800251c <HAL_RCC_GetSysClockFreq>
 8002472:	4602      	mov	r2, r0
 8002474:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	091b      	lsrs	r3, r3, #4
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	490a      	ldr	r1, [pc, #40]	; (80024a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002480:	5ccb      	ldrb	r3, [r1, r3]
 8002482:	fa22 f303 	lsr.w	r3, r2, r3
 8002486:	4a09      	ldr	r2, [pc, #36]	; (80024ac <HAL_RCC_ClockConfig+0x1c4>)
 8002488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800248a:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <HAL_RCC_ClockConfig+0x1c8>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe fc8c 	bl	8000dac <HAL_InitTick>

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40023c00 	.word	0x40023c00
 80024a4:	40023800 	.word	0x40023800
 80024a8:	08004634 	.word	0x08004634
 80024ac:	20000018 	.word	0x20000018
 80024b0:	2000001c 	.word	0x2000001c

080024b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024b8:	4b03      	ldr	r3, [pc, #12]	; (80024c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80024ba:	681b      	ldr	r3, [r3, #0]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	20000018 	.word	0x20000018

080024cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024d0:	f7ff fff0 	bl	80024b4 <HAL_RCC_GetHCLKFreq>
 80024d4:	4602      	mov	r2, r0
 80024d6:	4b05      	ldr	r3, [pc, #20]	; (80024ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	0a9b      	lsrs	r3, r3, #10
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	4903      	ldr	r1, [pc, #12]	; (80024f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024e2:	5ccb      	ldrb	r3, [r1, r3]
 80024e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40023800 	.word	0x40023800
 80024f0:	08004644 	.word	0x08004644

080024f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024f8:	f7ff ffdc 	bl	80024b4 <HAL_RCC_GetHCLKFreq>
 80024fc:	4602      	mov	r2, r0
 80024fe:	4b05      	ldr	r3, [pc, #20]	; (8002514 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	0b5b      	lsrs	r3, r3, #13
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	4903      	ldr	r1, [pc, #12]	; (8002518 <HAL_RCC_GetPCLK2Freq+0x24>)
 800250a:	5ccb      	ldrb	r3, [r1, r3]
 800250c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002510:	4618      	mov	r0, r3
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40023800 	.word	0x40023800
 8002518:	08004644 	.word	0x08004644

0800251c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800251c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002520:	b0ae      	sub	sp, #184	; 0xb8
 8002522:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002524:	2300      	movs	r3, #0
 8002526:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800252a:	2300      	movs	r3, #0
 800252c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002530:	2300      	movs	r3, #0
 8002532:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002536:	2300      	movs	r3, #0
 8002538:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002542:	4bcb      	ldr	r3, [pc, #812]	; (8002870 <HAL_RCC_GetSysClockFreq+0x354>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 030c 	and.w	r3, r3, #12
 800254a:	2b0c      	cmp	r3, #12
 800254c:	f200 8206 	bhi.w	800295c <HAL_RCC_GetSysClockFreq+0x440>
 8002550:	a201      	add	r2, pc, #4	; (adr r2, 8002558 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002556:	bf00      	nop
 8002558:	0800258d 	.word	0x0800258d
 800255c:	0800295d 	.word	0x0800295d
 8002560:	0800295d 	.word	0x0800295d
 8002564:	0800295d 	.word	0x0800295d
 8002568:	08002595 	.word	0x08002595
 800256c:	0800295d 	.word	0x0800295d
 8002570:	0800295d 	.word	0x0800295d
 8002574:	0800295d 	.word	0x0800295d
 8002578:	0800259d 	.word	0x0800259d
 800257c:	0800295d 	.word	0x0800295d
 8002580:	0800295d 	.word	0x0800295d
 8002584:	0800295d 	.word	0x0800295d
 8002588:	0800278d 	.word	0x0800278d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800258c:	4bb9      	ldr	r3, [pc, #740]	; (8002874 <HAL_RCC_GetSysClockFreq+0x358>)
 800258e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002592:	e1e7      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002594:	4bb8      	ldr	r3, [pc, #736]	; (8002878 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002596:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800259a:	e1e3      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800259c:	4bb4      	ldr	r3, [pc, #720]	; (8002870 <HAL_RCC_GetSysClockFreq+0x354>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025a8:	4bb1      	ldr	r3, [pc, #708]	; (8002870 <HAL_RCC_GetSysClockFreq+0x354>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d071      	beq.n	8002698 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025b4:	4bae      	ldr	r3, [pc, #696]	; (8002870 <HAL_RCC_GetSysClockFreq+0x354>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	099b      	lsrs	r3, r3, #6
 80025ba:	2200      	movs	r2, #0
 80025bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80025c0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80025c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80025d0:	2300      	movs	r3, #0
 80025d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80025d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80025da:	4622      	mov	r2, r4
 80025dc:	462b      	mov	r3, r5
 80025de:	f04f 0000 	mov.w	r0, #0
 80025e2:	f04f 0100 	mov.w	r1, #0
 80025e6:	0159      	lsls	r1, r3, #5
 80025e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025ec:	0150      	lsls	r0, r2, #5
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	4621      	mov	r1, r4
 80025f4:	1a51      	subs	r1, r2, r1
 80025f6:	6439      	str	r1, [r7, #64]	; 0x40
 80025f8:	4629      	mov	r1, r5
 80025fa:	eb63 0301 	sbc.w	r3, r3, r1
 80025fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002600:	f04f 0200 	mov.w	r2, #0
 8002604:	f04f 0300 	mov.w	r3, #0
 8002608:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800260c:	4649      	mov	r1, r9
 800260e:	018b      	lsls	r3, r1, #6
 8002610:	4641      	mov	r1, r8
 8002612:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002616:	4641      	mov	r1, r8
 8002618:	018a      	lsls	r2, r1, #6
 800261a:	4641      	mov	r1, r8
 800261c:	1a51      	subs	r1, r2, r1
 800261e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002620:	4649      	mov	r1, r9
 8002622:	eb63 0301 	sbc.w	r3, r3, r1
 8002626:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002628:	f04f 0200 	mov.w	r2, #0
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002634:	4649      	mov	r1, r9
 8002636:	00cb      	lsls	r3, r1, #3
 8002638:	4641      	mov	r1, r8
 800263a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800263e:	4641      	mov	r1, r8
 8002640:	00ca      	lsls	r2, r1, #3
 8002642:	4610      	mov	r0, r2
 8002644:	4619      	mov	r1, r3
 8002646:	4603      	mov	r3, r0
 8002648:	4622      	mov	r2, r4
 800264a:	189b      	adds	r3, r3, r2
 800264c:	633b      	str	r3, [r7, #48]	; 0x30
 800264e:	462b      	mov	r3, r5
 8002650:	460a      	mov	r2, r1
 8002652:	eb42 0303 	adc.w	r3, r2, r3
 8002656:	637b      	str	r3, [r7, #52]	; 0x34
 8002658:	f04f 0200 	mov.w	r2, #0
 800265c:	f04f 0300 	mov.w	r3, #0
 8002660:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002664:	4629      	mov	r1, r5
 8002666:	024b      	lsls	r3, r1, #9
 8002668:	4621      	mov	r1, r4
 800266a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800266e:	4621      	mov	r1, r4
 8002670:	024a      	lsls	r2, r1, #9
 8002672:	4610      	mov	r0, r2
 8002674:	4619      	mov	r1, r3
 8002676:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800267a:	2200      	movs	r2, #0
 800267c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002680:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002684:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002688:	f7fd fe12 	bl	80002b0 <__aeabi_uldivmod>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4613      	mov	r3, r2
 8002692:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002696:	e067      	b.n	8002768 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002698:	4b75      	ldr	r3, [pc, #468]	; (8002870 <HAL_RCC_GetSysClockFreq+0x354>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	099b      	lsrs	r3, r3, #6
 800269e:	2200      	movs	r2, #0
 80026a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80026a4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80026a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80026b2:	2300      	movs	r3, #0
 80026b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80026b6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80026ba:	4622      	mov	r2, r4
 80026bc:	462b      	mov	r3, r5
 80026be:	f04f 0000 	mov.w	r0, #0
 80026c2:	f04f 0100 	mov.w	r1, #0
 80026c6:	0159      	lsls	r1, r3, #5
 80026c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026cc:	0150      	lsls	r0, r2, #5
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
 80026d2:	4621      	mov	r1, r4
 80026d4:	1a51      	subs	r1, r2, r1
 80026d6:	62b9      	str	r1, [r7, #40]	; 0x28
 80026d8:	4629      	mov	r1, r5
 80026da:	eb63 0301 	sbc.w	r3, r3, r1
 80026de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	f04f 0300 	mov.w	r3, #0
 80026e8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80026ec:	4649      	mov	r1, r9
 80026ee:	018b      	lsls	r3, r1, #6
 80026f0:	4641      	mov	r1, r8
 80026f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026f6:	4641      	mov	r1, r8
 80026f8:	018a      	lsls	r2, r1, #6
 80026fa:	4641      	mov	r1, r8
 80026fc:	ebb2 0a01 	subs.w	sl, r2, r1
 8002700:	4649      	mov	r1, r9
 8002702:	eb63 0b01 	sbc.w	fp, r3, r1
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	f04f 0300 	mov.w	r3, #0
 800270e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002712:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002716:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800271a:	4692      	mov	sl, r2
 800271c:	469b      	mov	fp, r3
 800271e:	4623      	mov	r3, r4
 8002720:	eb1a 0303 	adds.w	r3, sl, r3
 8002724:	623b      	str	r3, [r7, #32]
 8002726:	462b      	mov	r3, r5
 8002728:	eb4b 0303 	adc.w	r3, fp, r3
 800272c:	627b      	str	r3, [r7, #36]	; 0x24
 800272e:	f04f 0200 	mov.w	r2, #0
 8002732:	f04f 0300 	mov.w	r3, #0
 8002736:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800273a:	4629      	mov	r1, r5
 800273c:	028b      	lsls	r3, r1, #10
 800273e:	4621      	mov	r1, r4
 8002740:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002744:	4621      	mov	r1, r4
 8002746:	028a      	lsls	r2, r1, #10
 8002748:	4610      	mov	r0, r2
 800274a:	4619      	mov	r1, r3
 800274c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002750:	2200      	movs	r2, #0
 8002752:	673b      	str	r3, [r7, #112]	; 0x70
 8002754:	677a      	str	r2, [r7, #116]	; 0x74
 8002756:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800275a:	f7fd fda9 	bl	80002b0 <__aeabi_uldivmod>
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	4613      	mov	r3, r2
 8002764:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002768:	4b41      	ldr	r3, [pc, #260]	; (8002870 <HAL_RCC_GetSysClockFreq+0x354>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	0c1b      	lsrs	r3, r3, #16
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	3301      	adds	r3, #1
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800277a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800277e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002782:	fbb2 f3f3 	udiv	r3, r2, r3
 8002786:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800278a:	e0eb      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800278c:	4b38      	ldr	r3, [pc, #224]	; (8002870 <HAL_RCC_GetSysClockFreq+0x354>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002794:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002798:	4b35      	ldr	r3, [pc, #212]	; (8002870 <HAL_RCC_GetSysClockFreq+0x354>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d06b      	beq.n	800287c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027a4:	4b32      	ldr	r3, [pc, #200]	; (8002870 <HAL_RCC_GetSysClockFreq+0x354>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	099b      	lsrs	r3, r3, #6
 80027aa:	2200      	movs	r2, #0
 80027ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80027ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80027b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027b6:	663b      	str	r3, [r7, #96]	; 0x60
 80027b8:	2300      	movs	r3, #0
 80027ba:	667b      	str	r3, [r7, #100]	; 0x64
 80027bc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80027c0:	4622      	mov	r2, r4
 80027c2:	462b      	mov	r3, r5
 80027c4:	f04f 0000 	mov.w	r0, #0
 80027c8:	f04f 0100 	mov.w	r1, #0
 80027cc:	0159      	lsls	r1, r3, #5
 80027ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027d2:	0150      	lsls	r0, r2, #5
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	4621      	mov	r1, r4
 80027da:	1a51      	subs	r1, r2, r1
 80027dc:	61b9      	str	r1, [r7, #24]
 80027de:	4629      	mov	r1, r5
 80027e0:	eb63 0301 	sbc.w	r3, r3, r1
 80027e4:	61fb      	str	r3, [r7, #28]
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	f04f 0300 	mov.w	r3, #0
 80027ee:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80027f2:	4659      	mov	r1, fp
 80027f4:	018b      	lsls	r3, r1, #6
 80027f6:	4651      	mov	r1, sl
 80027f8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027fc:	4651      	mov	r1, sl
 80027fe:	018a      	lsls	r2, r1, #6
 8002800:	4651      	mov	r1, sl
 8002802:	ebb2 0801 	subs.w	r8, r2, r1
 8002806:	4659      	mov	r1, fp
 8002808:	eb63 0901 	sbc.w	r9, r3, r1
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	f04f 0300 	mov.w	r3, #0
 8002814:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002818:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800281c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002820:	4690      	mov	r8, r2
 8002822:	4699      	mov	r9, r3
 8002824:	4623      	mov	r3, r4
 8002826:	eb18 0303 	adds.w	r3, r8, r3
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	462b      	mov	r3, r5
 800282e:	eb49 0303 	adc.w	r3, r9, r3
 8002832:	617b      	str	r3, [r7, #20]
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002840:	4629      	mov	r1, r5
 8002842:	024b      	lsls	r3, r1, #9
 8002844:	4621      	mov	r1, r4
 8002846:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800284a:	4621      	mov	r1, r4
 800284c:	024a      	lsls	r2, r1, #9
 800284e:	4610      	mov	r0, r2
 8002850:	4619      	mov	r1, r3
 8002852:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002856:	2200      	movs	r2, #0
 8002858:	65bb      	str	r3, [r7, #88]	; 0x58
 800285a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800285c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002860:	f7fd fd26 	bl	80002b0 <__aeabi_uldivmod>
 8002864:	4602      	mov	r2, r0
 8002866:	460b      	mov	r3, r1
 8002868:	4613      	mov	r3, r2
 800286a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800286e:	e065      	b.n	800293c <HAL_RCC_GetSysClockFreq+0x420>
 8002870:	40023800 	.word	0x40023800
 8002874:	00f42400 	.word	0x00f42400
 8002878:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800287c:	4b3d      	ldr	r3, [pc, #244]	; (8002974 <HAL_RCC_GetSysClockFreq+0x458>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	099b      	lsrs	r3, r3, #6
 8002882:	2200      	movs	r2, #0
 8002884:	4618      	mov	r0, r3
 8002886:	4611      	mov	r1, r2
 8002888:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800288c:	653b      	str	r3, [r7, #80]	; 0x50
 800288e:	2300      	movs	r3, #0
 8002890:	657b      	str	r3, [r7, #84]	; 0x54
 8002892:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002896:	4642      	mov	r2, r8
 8002898:	464b      	mov	r3, r9
 800289a:	f04f 0000 	mov.w	r0, #0
 800289e:	f04f 0100 	mov.w	r1, #0
 80028a2:	0159      	lsls	r1, r3, #5
 80028a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028a8:	0150      	lsls	r0, r2, #5
 80028aa:	4602      	mov	r2, r0
 80028ac:	460b      	mov	r3, r1
 80028ae:	4641      	mov	r1, r8
 80028b0:	1a51      	subs	r1, r2, r1
 80028b2:	60b9      	str	r1, [r7, #8]
 80028b4:	4649      	mov	r1, r9
 80028b6:	eb63 0301 	sbc.w	r3, r3, r1
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	f04f 0200 	mov.w	r2, #0
 80028c0:	f04f 0300 	mov.w	r3, #0
 80028c4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80028c8:	4659      	mov	r1, fp
 80028ca:	018b      	lsls	r3, r1, #6
 80028cc:	4651      	mov	r1, sl
 80028ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028d2:	4651      	mov	r1, sl
 80028d4:	018a      	lsls	r2, r1, #6
 80028d6:	4651      	mov	r1, sl
 80028d8:	1a54      	subs	r4, r2, r1
 80028da:	4659      	mov	r1, fp
 80028dc:	eb63 0501 	sbc.w	r5, r3, r1
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	f04f 0300 	mov.w	r3, #0
 80028e8:	00eb      	lsls	r3, r5, #3
 80028ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028ee:	00e2      	lsls	r2, r4, #3
 80028f0:	4614      	mov	r4, r2
 80028f2:	461d      	mov	r5, r3
 80028f4:	4643      	mov	r3, r8
 80028f6:	18e3      	adds	r3, r4, r3
 80028f8:	603b      	str	r3, [r7, #0]
 80028fa:	464b      	mov	r3, r9
 80028fc:	eb45 0303 	adc.w	r3, r5, r3
 8002900:	607b      	str	r3, [r7, #4]
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	f04f 0300 	mov.w	r3, #0
 800290a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800290e:	4629      	mov	r1, r5
 8002910:	028b      	lsls	r3, r1, #10
 8002912:	4621      	mov	r1, r4
 8002914:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002918:	4621      	mov	r1, r4
 800291a:	028a      	lsls	r2, r1, #10
 800291c:	4610      	mov	r0, r2
 800291e:	4619      	mov	r1, r3
 8002920:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002924:	2200      	movs	r2, #0
 8002926:	64bb      	str	r3, [r7, #72]	; 0x48
 8002928:	64fa      	str	r2, [r7, #76]	; 0x4c
 800292a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800292e:	f7fd fcbf 	bl	80002b0 <__aeabi_uldivmod>
 8002932:	4602      	mov	r2, r0
 8002934:	460b      	mov	r3, r1
 8002936:	4613      	mov	r3, r2
 8002938:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800293c:	4b0d      	ldr	r3, [pc, #52]	; (8002974 <HAL_RCC_GetSysClockFreq+0x458>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	0f1b      	lsrs	r3, r3, #28
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800294a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800294e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002952:	fbb2 f3f3 	udiv	r3, r2, r3
 8002956:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800295a:	e003      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800295c:	4b06      	ldr	r3, [pc, #24]	; (8002978 <HAL_RCC_GetSysClockFreq+0x45c>)
 800295e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002962:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002964:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002968:	4618      	mov	r0, r3
 800296a:	37b8      	adds	r7, #184	; 0xb8
 800296c:	46bd      	mov	sp, r7
 800296e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002972:	bf00      	nop
 8002974:	40023800 	.word	0x40023800
 8002978:	00f42400 	.word	0x00f42400

0800297c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e28d      	b.n	8002eaa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 8083 	beq.w	8002aa2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800299c:	4b94      	ldr	r3, [pc, #592]	; (8002bf0 <HAL_RCC_OscConfig+0x274>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 030c 	and.w	r3, r3, #12
 80029a4:	2b04      	cmp	r3, #4
 80029a6:	d019      	beq.n	80029dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029a8:	4b91      	ldr	r3, [pc, #580]	; (8002bf0 <HAL_RCC_OscConfig+0x274>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d106      	bne.n	80029c2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029b4:	4b8e      	ldr	r3, [pc, #568]	; (8002bf0 <HAL_RCC_OscConfig+0x274>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029c0:	d00c      	beq.n	80029dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029c2:	4b8b      	ldr	r3, [pc, #556]	; (8002bf0 <HAL_RCC_OscConfig+0x274>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029ca:	2b0c      	cmp	r3, #12
 80029cc:	d112      	bne.n	80029f4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ce:	4b88      	ldr	r3, [pc, #544]	; (8002bf0 <HAL_RCC_OscConfig+0x274>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029da:	d10b      	bne.n	80029f4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029dc:	4b84      	ldr	r3, [pc, #528]	; (8002bf0 <HAL_RCC_OscConfig+0x274>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d05b      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x124>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d157      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e25a      	b.n	8002eaa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029fc:	d106      	bne.n	8002a0c <HAL_RCC_OscConfig+0x90>
 80029fe:	4b7c      	ldr	r3, [pc, #496]	; (8002bf0 <HAL_RCC_OscConfig+0x274>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a7b      	ldr	r2, [pc, #492]	; (8002bf0 <HAL_RCC_OscConfig+0x274>)
 8002a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	e01d      	b.n	8002a48 <HAL_RCC_OscConfig+0xcc>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a14:	d10c      	bne.n	8002a30 <HAL_RCC_OscConfig+0xb4>
 8002a16:	4b76      	ldr	r3, [pc, #472]	; (8002bf0 <HAL_RCC_OscConfig+0x274>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a75      	ldr	r2, [pc, #468]	; (8002bf0 <HAL_RCC_OscConfig+0x274>)
 8002a1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	4b73      	ldr	r3, [pc, #460]	; (8002bf0 <HAL_RCC_OscConfig+0x274>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a72      	ldr	r2, [pc, #456]	; (8002bf0 <HAL_RCC_OscConfig+0x274>)
 8002a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	e00b      	b.n	8002a48 <HAL_RCC_OscConfig+0xcc>
 8002a30:	4b6f      	ldr	r3, [pc, #444]	; (8002bf0 <HAL_RCC_OscConfig+0x274>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a6e      	ldr	r2, [pc, #440]	; (8002bf0 <HAL_RCC_OscConfig+0x274>)
 8002a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a3a:	6013      	str	r3, [r2, #0]
 8002a3c:	4b6c      	ldr	r3, [pc, #432]	; (8002bf0 <HAL_RCC_OscConfig+0x274>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a6b      	ldr	r2, [pc, #428]	; (8002bf0 <HAL_RCC_OscConfig+0x274>)
 8002a42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d013      	beq.n	8002a78 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a50:	f7fe f9f0 	bl	8000e34 <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a58:	f7fe f9ec 	bl	8000e34 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b64      	cmp	r3, #100	; 0x64
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e21f      	b.n	8002eaa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6a:	4b61      	ldr	r3, [pc, #388]	; (8002bf0 <HAL_RCC_OscConfig+0x274>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0f0      	beq.n	8002a58 <HAL_RCC_OscConfig+0xdc>
 8002a76:	e014      	b.n	8002aa2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a78:	f7fe f9dc 	bl	8000e34 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a80:	f7fe f9d8 	bl	8000e34 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b64      	cmp	r3, #100	; 0x64
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e20b      	b.n	8002eaa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a92:	4b57      	ldr	r3, [pc, #348]	; (8002bf0 <HAL_RCC_OscConfig+0x274>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1f0      	bne.n	8002a80 <HAL_RCC_OscConfig+0x104>
 8002a9e:	e000      	b.n	8002aa2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d06f      	beq.n	8002b8e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002aae:	4b50      	ldr	r3, [pc, #320]	; (8002bf0 <HAL_RCC_OscConfig+0x274>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d017      	beq.n	8002aea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002aba:	4b4d      	ldr	r3, [pc, #308]	; (8002bf0 <HAL_RCC_OscConfig+0x274>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ac2:	2b08      	cmp	r3, #8
 8002ac4:	d105      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ac6:	4b4a      	ldr	r3, [pc, #296]	; (8002bf0 <HAL_RCC_OscConfig+0x274>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00b      	beq.n	8002aea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ad2:	4b47      	ldr	r3, [pc, #284]	; (8002bf0 <HAL_RCC_OscConfig+0x274>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ada:	2b0c      	cmp	r3, #12
 8002adc:	d11c      	bne.n	8002b18 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ade:	4b44      	ldr	r3, [pc, #272]	; (8002bf0 <HAL_RCC_OscConfig+0x274>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d116      	bne.n	8002b18 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aea:	4b41      	ldr	r3, [pc, #260]	; (8002bf0 <HAL_RCC_OscConfig+0x274>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d005      	beq.n	8002b02 <HAL_RCC_OscConfig+0x186>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d001      	beq.n	8002b02 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e1d3      	b.n	8002eaa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b02:	4b3b      	ldr	r3, [pc, #236]	; (8002bf0 <HAL_RCC_OscConfig+0x274>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	4937      	ldr	r1, [pc, #220]	; (8002bf0 <HAL_RCC_OscConfig+0x274>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b16:	e03a      	b.n	8002b8e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d020      	beq.n	8002b62 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b20:	4b34      	ldr	r3, [pc, #208]	; (8002bf4 <HAL_RCC_OscConfig+0x278>)
 8002b22:	2201      	movs	r2, #1
 8002b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b26:	f7fe f985 	bl	8000e34 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b2e:	f7fe f981 	bl	8000e34 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e1b4      	b.n	8002eaa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b40:	4b2b      	ldr	r3, [pc, #172]	; (8002bf0 <HAL_RCC_OscConfig+0x274>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0f0      	beq.n	8002b2e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b4c:	4b28      	ldr	r3, [pc, #160]	; (8002bf0 <HAL_RCC_OscConfig+0x274>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	4925      	ldr	r1, [pc, #148]	; (8002bf0 <HAL_RCC_OscConfig+0x274>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	600b      	str	r3, [r1, #0]
 8002b60:	e015      	b.n	8002b8e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b62:	4b24      	ldr	r3, [pc, #144]	; (8002bf4 <HAL_RCC_OscConfig+0x278>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b68:	f7fe f964 	bl	8000e34 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b70:	f7fe f960 	bl	8000e34 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e193      	b.n	8002eaa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b82:	4b1b      	ldr	r3, [pc, #108]	; (8002bf0 <HAL_RCC_OscConfig+0x274>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1f0      	bne.n	8002b70 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d036      	beq.n	8002c08 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d016      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ba2:	4b15      	ldr	r3, [pc, #84]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba8:	f7fe f944 	bl	8000e34 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bb0:	f7fe f940 	bl	8000e34 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e173      	b.n	8002eaa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bc2:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <HAL_RCC_OscConfig+0x274>)
 8002bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0f0      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x234>
 8002bce:	e01b      	b.n	8002c08 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bd0:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <HAL_RCC_OscConfig+0x27c>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd6:	f7fe f92d 	bl	8000e34 <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bdc:	e00e      	b.n	8002bfc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bde:	f7fe f929 	bl	8000e34 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d907      	bls.n	8002bfc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e15c      	b.n	8002eaa <HAL_RCC_OscConfig+0x52e>
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	42470000 	.word	0x42470000
 8002bf8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bfc:	4b8a      	ldr	r3, [pc, #552]	; (8002e28 <HAL_RCC_OscConfig+0x4ac>)
 8002bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1ea      	bne.n	8002bde <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 8097 	beq.w	8002d44 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c16:	2300      	movs	r3, #0
 8002c18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c1a:	4b83      	ldr	r3, [pc, #524]	; (8002e28 <HAL_RCC_OscConfig+0x4ac>)
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10f      	bne.n	8002c46 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c26:	2300      	movs	r3, #0
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	4b7f      	ldr	r3, [pc, #508]	; (8002e28 <HAL_RCC_OscConfig+0x4ac>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	4a7e      	ldr	r2, [pc, #504]	; (8002e28 <HAL_RCC_OscConfig+0x4ac>)
 8002c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c34:	6413      	str	r3, [r2, #64]	; 0x40
 8002c36:	4b7c      	ldr	r3, [pc, #496]	; (8002e28 <HAL_RCC_OscConfig+0x4ac>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3e:	60bb      	str	r3, [r7, #8]
 8002c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c42:	2301      	movs	r3, #1
 8002c44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c46:	4b79      	ldr	r3, [pc, #484]	; (8002e2c <HAL_RCC_OscConfig+0x4b0>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d118      	bne.n	8002c84 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c52:	4b76      	ldr	r3, [pc, #472]	; (8002e2c <HAL_RCC_OscConfig+0x4b0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a75      	ldr	r2, [pc, #468]	; (8002e2c <HAL_RCC_OscConfig+0x4b0>)
 8002c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c5e:	f7fe f8e9 	bl	8000e34 <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c64:	e008      	b.n	8002c78 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c66:	f7fe f8e5 	bl	8000e34 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e118      	b.n	8002eaa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c78:	4b6c      	ldr	r3, [pc, #432]	; (8002e2c <HAL_RCC_OscConfig+0x4b0>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0f0      	beq.n	8002c66 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d106      	bne.n	8002c9a <HAL_RCC_OscConfig+0x31e>
 8002c8c:	4b66      	ldr	r3, [pc, #408]	; (8002e28 <HAL_RCC_OscConfig+0x4ac>)
 8002c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c90:	4a65      	ldr	r2, [pc, #404]	; (8002e28 <HAL_RCC_OscConfig+0x4ac>)
 8002c92:	f043 0301 	orr.w	r3, r3, #1
 8002c96:	6713      	str	r3, [r2, #112]	; 0x70
 8002c98:	e01c      	b.n	8002cd4 <HAL_RCC_OscConfig+0x358>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	2b05      	cmp	r3, #5
 8002ca0:	d10c      	bne.n	8002cbc <HAL_RCC_OscConfig+0x340>
 8002ca2:	4b61      	ldr	r3, [pc, #388]	; (8002e28 <HAL_RCC_OscConfig+0x4ac>)
 8002ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca6:	4a60      	ldr	r2, [pc, #384]	; (8002e28 <HAL_RCC_OscConfig+0x4ac>)
 8002ca8:	f043 0304 	orr.w	r3, r3, #4
 8002cac:	6713      	str	r3, [r2, #112]	; 0x70
 8002cae:	4b5e      	ldr	r3, [pc, #376]	; (8002e28 <HAL_RCC_OscConfig+0x4ac>)
 8002cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb2:	4a5d      	ldr	r2, [pc, #372]	; (8002e28 <HAL_RCC_OscConfig+0x4ac>)
 8002cb4:	f043 0301 	orr.w	r3, r3, #1
 8002cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8002cba:	e00b      	b.n	8002cd4 <HAL_RCC_OscConfig+0x358>
 8002cbc:	4b5a      	ldr	r3, [pc, #360]	; (8002e28 <HAL_RCC_OscConfig+0x4ac>)
 8002cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc0:	4a59      	ldr	r2, [pc, #356]	; (8002e28 <HAL_RCC_OscConfig+0x4ac>)
 8002cc2:	f023 0301 	bic.w	r3, r3, #1
 8002cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc8:	4b57      	ldr	r3, [pc, #348]	; (8002e28 <HAL_RCC_OscConfig+0x4ac>)
 8002cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ccc:	4a56      	ldr	r2, [pc, #344]	; (8002e28 <HAL_RCC_OscConfig+0x4ac>)
 8002cce:	f023 0304 	bic.w	r3, r3, #4
 8002cd2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d015      	beq.n	8002d08 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cdc:	f7fe f8aa 	bl	8000e34 <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce2:	e00a      	b.n	8002cfa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ce4:	f7fe f8a6 	bl	8000e34 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e0d7      	b.n	8002eaa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cfa:	4b4b      	ldr	r3, [pc, #300]	; (8002e28 <HAL_RCC_OscConfig+0x4ac>)
 8002cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d0ee      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x368>
 8002d06:	e014      	b.n	8002d32 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d08:	f7fe f894 	bl	8000e34 <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d0e:	e00a      	b.n	8002d26 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d10:	f7fe f890 	bl	8000e34 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e0c1      	b.n	8002eaa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d26:	4b40      	ldr	r3, [pc, #256]	; (8002e28 <HAL_RCC_OscConfig+0x4ac>)
 8002d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1ee      	bne.n	8002d10 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d32:	7dfb      	ldrb	r3, [r7, #23]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d105      	bne.n	8002d44 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d38:	4b3b      	ldr	r3, [pc, #236]	; (8002e28 <HAL_RCC_OscConfig+0x4ac>)
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3c:	4a3a      	ldr	r2, [pc, #232]	; (8002e28 <HAL_RCC_OscConfig+0x4ac>)
 8002d3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 80ad 	beq.w	8002ea8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d4e:	4b36      	ldr	r3, [pc, #216]	; (8002e28 <HAL_RCC_OscConfig+0x4ac>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 030c 	and.w	r3, r3, #12
 8002d56:	2b08      	cmp	r3, #8
 8002d58:	d060      	beq.n	8002e1c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d145      	bne.n	8002dee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d62:	4b33      	ldr	r3, [pc, #204]	; (8002e30 <HAL_RCC_OscConfig+0x4b4>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d68:	f7fe f864 	bl	8000e34 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d70:	f7fe f860 	bl	8000e34 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e093      	b.n	8002eaa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d82:	4b29      	ldr	r3, [pc, #164]	; (8002e28 <HAL_RCC_OscConfig+0x4ac>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f0      	bne.n	8002d70 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69da      	ldr	r2, [r3, #28]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	019b      	lsls	r3, r3, #6
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da4:	085b      	lsrs	r3, r3, #1
 8002da6:	3b01      	subs	r3, #1
 8002da8:	041b      	lsls	r3, r3, #16
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db0:	061b      	lsls	r3, r3, #24
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	071b      	lsls	r3, r3, #28
 8002dba:	491b      	ldr	r1, [pc, #108]	; (8002e28 <HAL_RCC_OscConfig+0x4ac>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dc0:	4b1b      	ldr	r3, [pc, #108]	; (8002e30 <HAL_RCC_OscConfig+0x4b4>)
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc6:	f7fe f835 	bl	8000e34 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dce:	f7fe f831 	bl	8000e34 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e064      	b.n	8002eaa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de0:	4b11      	ldr	r3, [pc, #68]	; (8002e28 <HAL_RCC_OscConfig+0x4ac>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0f0      	beq.n	8002dce <HAL_RCC_OscConfig+0x452>
 8002dec:	e05c      	b.n	8002ea8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dee:	4b10      	ldr	r3, [pc, #64]	; (8002e30 <HAL_RCC_OscConfig+0x4b4>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df4:	f7fe f81e 	bl	8000e34 <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dfc:	f7fe f81a 	bl	8000e34 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e04d      	b.n	8002eaa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0e:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <HAL_RCC_OscConfig+0x4ac>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1f0      	bne.n	8002dfc <HAL_RCC_OscConfig+0x480>
 8002e1a:	e045      	b.n	8002ea8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d107      	bne.n	8002e34 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e040      	b.n	8002eaa <HAL_RCC_OscConfig+0x52e>
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	40007000 	.word	0x40007000
 8002e30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e34:	4b1f      	ldr	r3, [pc, #124]	; (8002eb4 <HAL_RCC_OscConfig+0x538>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d030      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d129      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d122      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e64:	4013      	ands	r3, r2
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d119      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7a:	085b      	lsrs	r3, r3, #1
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d10f      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d107      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d001      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e000      	b.n	8002eaa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40023800 	.word	0x40023800

08002eb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e03f      	b.n	8002f4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d106      	bne.n	8002ee4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7fd fed0 	bl	8000c84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2224      	movs	r2, #36	; 0x24
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002efa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 f929 	bl	8003154 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	691a      	ldr	r2, [r3, #16]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	695a      	ldr	r2, [r3, #20]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68da      	ldr	r2, [r3, #12]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b08a      	sub	sp, #40	; 0x28
 8002f56:	af02      	add	r7, sp, #8
 8002f58:	60f8      	str	r0, [r7, #12]
 8002f5a:	60b9      	str	r1, [r7, #8]
 8002f5c:	603b      	str	r3, [r7, #0]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b20      	cmp	r3, #32
 8002f70:	d17c      	bne.n	800306c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d002      	beq.n	8002f7e <HAL_UART_Transmit+0x2c>
 8002f78:	88fb      	ldrh	r3, [r7, #6]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e075      	b.n	800306e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d101      	bne.n	8002f90 <HAL_UART_Transmit+0x3e>
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	e06e      	b.n	800306e <HAL_UART_Transmit+0x11c>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2221      	movs	r2, #33	; 0x21
 8002fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fa6:	f7fd ff45 	bl	8000e34 <HAL_GetTick>
 8002faa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	88fa      	ldrh	r2, [r7, #6]
 8002fb0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	88fa      	ldrh	r2, [r7, #6]
 8002fb6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fc0:	d108      	bne.n	8002fd4 <HAL_UART_Transmit+0x82>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d104      	bne.n	8002fd4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	61bb      	str	r3, [r7, #24]
 8002fd2:	e003      	b.n	8002fdc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002fe4:	e02a      	b.n	800303c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	2200      	movs	r2, #0
 8002fee:	2180      	movs	r1, #128	; 0x80
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 f840 	bl	8003076 <UART_WaitOnFlagUntilTimeout>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e036      	b.n	800306e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10b      	bne.n	800301e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	881b      	ldrh	r3, [r3, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003014:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	3302      	adds	r3, #2
 800301a:	61bb      	str	r3, [r7, #24]
 800301c:	e007      	b.n	800302e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	781a      	ldrb	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	3301      	adds	r3, #1
 800302c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003032:	b29b      	uxth	r3, r3
 8003034:	3b01      	subs	r3, #1
 8003036:	b29a      	uxth	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003040:	b29b      	uxth	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1cf      	bne.n	8002fe6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2200      	movs	r2, #0
 800304e:	2140      	movs	r1, #64	; 0x40
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 f810 	bl	8003076 <UART_WaitOnFlagUntilTimeout>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e006      	b.n	800306e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	e000      	b.n	800306e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800306c:	2302      	movs	r3, #2
  }
}
 800306e:	4618      	mov	r0, r3
 8003070:	3720      	adds	r7, #32
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b090      	sub	sp, #64	; 0x40
 800307a:	af00      	add	r7, sp, #0
 800307c:	60f8      	str	r0, [r7, #12]
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	603b      	str	r3, [r7, #0]
 8003082:	4613      	mov	r3, r2
 8003084:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003086:	e050      	b.n	800312a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800308a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308e:	d04c      	beq.n	800312a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003092:	2b00      	cmp	r3, #0
 8003094:	d007      	beq.n	80030a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003096:	f7fd fecd 	bl	8000e34 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d241      	bcs.n	800312a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	330c      	adds	r3, #12
 80030ac:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b0:	e853 3f00 	ldrex	r3, [r3]
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	330c      	adds	r3, #12
 80030c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030c6:	637a      	str	r2, [r7, #52]	; 0x34
 80030c8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030ce:	e841 2300 	strex	r3, r2, [r1]
 80030d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80030d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1e5      	bne.n	80030a6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	3314      	adds	r3, #20
 80030e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	e853 3f00 	ldrex	r3, [r3]
 80030e8:	613b      	str	r3, [r7, #16]
   return(result);
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	f023 0301 	bic.w	r3, r3, #1
 80030f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	3314      	adds	r3, #20
 80030f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030fa:	623a      	str	r2, [r7, #32]
 80030fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030fe:	69f9      	ldr	r1, [r7, #28]
 8003100:	6a3a      	ldr	r2, [r7, #32]
 8003102:	e841 2300 	strex	r3, r2, [r1]
 8003106:	61bb      	str	r3, [r7, #24]
   return(result);
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1e5      	bne.n	80030da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2220      	movs	r2, #32
 8003112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2220      	movs	r2, #32
 800311a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e00f      	b.n	800314a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	4013      	ands	r3, r2
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	429a      	cmp	r2, r3
 8003138:	bf0c      	ite	eq
 800313a:	2301      	moveq	r3, #1
 800313c:	2300      	movne	r3, #0
 800313e:	b2db      	uxtb	r3, r3
 8003140:	461a      	mov	r2, r3
 8003142:	79fb      	ldrb	r3, [r7, #7]
 8003144:	429a      	cmp	r2, r3
 8003146:	d09f      	beq.n	8003088 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3740      	adds	r7, #64	; 0x40
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
	...

08003154 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003158:	b0c0      	sub	sp, #256	; 0x100
 800315a:	af00      	add	r7, sp, #0
 800315c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800316c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003170:	68d9      	ldr	r1, [r3, #12]
 8003172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	ea40 0301 	orr.w	r3, r0, r1
 800317c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800317e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	431a      	orrs	r2, r3
 800318c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	431a      	orrs	r2, r3
 8003194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	4313      	orrs	r3, r2
 800319c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80031ac:	f021 010c 	bic.w	r1, r1, #12
 80031b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80031ba:	430b      	orrs	r3, r1
 80031bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80031ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ce:	6999      	ldr	r1, [r3, #24]
 80031d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	ea40 0301 	orr.w	r3, r0, r1
 80031da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	4b8f      	ldr	r3, [pc, #572]	; (8003420 <UART_SetConfig+0x2cc>)
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d005      	beq.n	80031f4 <UART_SetConfig+0xa0>
 80031e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	4b8d      	ldr	r3, [pc, #564]	; (8003424 <UART_SetConfig+0x2d0>)
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d104      	bne.n	80031fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031f4:	f7ff f97e 	bl	80024f4 <HAL_RCC_GetPCLK2Freq>
 80031f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80031fc:	e003      	b.n	8003206 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031fe:	f7ff f965 	bl	80024cc <HAL_RCC_GetPCLK1Freq>
 8003202:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003210:	f040 810c 	bne.w	800342c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003214:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003218:	2200      	movs	r2, #0
 800321a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800321e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003222:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003226:	4622      	mov	r2, r4
 8003228:	462b      	mov	r3, r5
 800322a:	1891      	adds	r1, r2, r2
 800322c:	65b9      	str	r1, [r7, #88]	; 0x58
 800322e:	415b      	adcs	r3, r3
 8003230:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003232:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003236:	4621      	mov	r1, r4
 8003238:	eb12 0801 	adds.w	r8, r2, r1
 800323c:	4629      	mov	r1, r5
 800323e:	eb43 0901 	adc.w	r9, r3, r1
 8003242:	f04f 0200 	mov.w	r2, #0
 8003246:	f04f 0300 	mov.w	r3, #0
 800324a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800324e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003252:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003256:	4690      	mov	r8, r2
 8003258:	4699      	mov	r9, r3
 800325a:	4623      	mov	r3, r4
 800325c:	eb18 0303 	adds.w	r3, r8, r3
 8003260:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003264:	462b      	mov	r3, r5
 8003266:	eb49 0303 	adc.w	r3, r9, r3
 800326a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800326e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800327a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800327e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003282:	460b      	mov	r3, r1
 8003284:	18db      	adds	r3, r3, r3
 8003286:	653b      	str	r3, [r7, #80]	; 0x50
 8003288:	4613      	mov	r3, r2
 800328a:	eb42 0303 	adc.w	r3, r2, r3
 800328e:	657b      	str	r3, [r7, #84]	; 0x54
 8003290:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003294:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003298:	f7fd f80a 	bl	80002b0 <__aeabi_uldivmod>
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	4b61      	ldr	r3, [pc, #388]	; (8003428 <UART_SetConfig+0x2d4>)
 80032a2:	fba3 2302 	umull	r2, r3, r3, r2
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	011c      	lsls	r4, r3, #4
 80032aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032ae:	2200      	movs	r2, #0
 80032b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80032b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80032b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80032bc:	4642      	mov	r2, r8
 80032be:	464b      	mov	r3, r9
 80032c0:	1891      	adds	r1, r2, r2
 80032c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80032c4:	415b      	adcs	r3, r3
 80032c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80032cc:	4641      	mov	r1, r8
 80032ce:	eb12 0a01 	adds.w	sl, r2, r1
 80032d2:	4649      	mov	r1, r9
 80032d4:	eb43 0b01 	adc.w	fp, r3, r1
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	f04f 0300 	mov.w	r3, #0
 80032e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032ec:	4692      	mov	sl, r2
 80032ee:	469b      	mov	fp, r3
 80032f0:	4643      	mov	r3, r8
 80032f2:	eb1a 0303 	adds.w	r3, sl, r3
 80032f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032fa:	464b      	mov	r3, r9
 80032fc:	eb4b 0303 	adc.w	r3, fp, r3
 8003300:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003310:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003314:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003318:	460b      	mov	r3, r1
 800331a:	18db      	adds	r3, r3, r3
 800331c:	643b      	str	r3, [r7, #64]	; 0x40
 800331e:	4613      	mov	r3, r2
 8003320:	eb42 0303 	adc.w	r3, r2, r3
 8003324:	647b      	str	r3, [r7, #68]	; 0x44
 8003326:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800332a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800332e:	f7fc ffbf 	bl	80002b0 <__aeabi_uldivmod>
 8003332:	4602      	mov	r2, r0
 8003334:	460b      	mov	r3, r1
 8003336:	4611      	mov	r1, r2
 8003338:	4b3b      	ldr	r3, [pc, #236]	; (8003428 <UART_SetConfig+0x2d4>)
 800333a:	fba3 2301 	umull	r2, r3, r3, r1
 800333e:	095b      	lsrs	r3, r3, #5
 8003340:	2264      	movs	r2, #100	; 0x64
 8003342:	fb02 f303 	mul.w	r3, r2, r3
 8003346:	1acb      	subs	r3, r1, r3
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800334e:	4b36      	ldr	r3, [pc, #216]	; (8003428 <UART_SetConfig+0x2d4>)
 8003350:	fba3 2302 	umull	r2, r3, r3, r2
 8003354:	095b      	lsrs	r3, r3, #5
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800335c:	441c      	add	r4, r3
 800335e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003362:	2200      	movs	r2, #0
 8003364:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003368:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800336c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003370:	4642      	mov	r2, r8
 8003372:	464b      	mov	r3, r9
 8003374:	1891      	adds	r1, r2, r2
 8003376:	63b9      	str	r1, [r7, #56]	; 0x38
 8003378:	415b      	adcs	r3, r3
 800337a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800337c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003380:	4641      	mov	r1, r8
 8003382:	1851      	adds	r1, r2, r1
 8003384:	6339      	str	r1, [r7, #48]	; 0x30
 8003386:	4649      	mov	r1, r9
 8003388:	414b      	adcs	r3, r1
 800338a:	637b      	str	r3, [r7, #52]	; 0x34
 800338c:	f04f 0200 	mov.w	r2, #0
 8003390:	f04f 0300 	mov.w	r3, #0
 8003394:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003398:	4659      	mov	r1, fp
 800339a:	00cb      	lsls	r3, r1, #3
 800339c:	4651      	mov	r1, sl
 800339e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033a2:	4651      	mov	r1, sl
 80033a4:	00ca      	lsls	r2, r1, #3
 80033a6:	4610      	mov	r0, r2
 80033a8:	4619      	mov	r1, r3
 80033aa:	4603      	mov	r3, r0
 80033ac:	4642      	mov	r2, r8
 80033ae:	189b      	adds	r3, r3, r2
 80033b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033b4:	464b      	mov	r3, r9
 80033b6:	460a      	mov	r2, r1
 80033b8:	eb42 0303 	adc.w	r3, r2, r3
 80033bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80033cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80033d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80033d4:	460b      	mov	r3, r1
 80033d6:	18db      	adds	r3, r3, r3
 80033d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80033da:	4613      	mov	r3, r2
 80033dc:	eb42 0303 	adc.w	r3, r2, r3
 80033e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80033ea:	f7fc ff61 	bl	80002b0 <__aeabi_uldivmod>
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	4b0d      	ldr	r3, [pc, #52]	; (8003428 <UART_SetConfig+0x2d4>)
 80033f4:	fba3 1302 	umull	r1, r3, r3, r2
 80033f8:	095b      	lsrs	r3, r3, #5
 80033fa:	2164      	movs	r1, #100	; 0x64
 80033fc:	fb01 f303 	mul.w	r3, r1, r3
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	3332      	adds	r3, #50	; 0x32
 8003406:	4a08      	ldr	r2, [pc, #32]	; (8003428 <UART_SetConfig+0x2d4>)
 8003408:	fba2 2303 	umull	r2, r3, r2, r3
 800340c:	095b      	lsrs	r3, r3, #5
 800340e:	f003 0207 	and.w	r2, r3, #7
 8003412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4422      	add	r2, r4
 800341a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800341c:	e106      	b.n	800362c <UART_SetConfig+0x4d8>
 800341e:	bf00      	nop
 8003420:	40011000 	.word	0x40011000
 8003424:	40011400 	.word	0x40011400
 8003428:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800342c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003430:	2200      	movs	r2, #0
 8003432:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003436:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800343a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800343e:	4642      	mov	r2, r8
 8003440:	464b      	mov	r3, r9
 8003442:	1891      	adds	r1, r2, r2
 8003444:	6239      	str	r1, [r7, #32]
 8003446:	415b      	adcs	r3, r3
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
 800344a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800344e:	4641      	mov	r1, r8
 8003450:	1854      	adds	r4, r2, r1
 8003452:	4649      	mov	r1, r9
 8003454:	eb43 0501 	adc.w	r5, r3, r1
 8003458:	f04f 0200 	mov.w	r2, #0
 800345c:	f04f 0300 	mov.w	r3, #0
 8003460:	00eb      	lsls	r3, r5, #3
 8003462:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003466:	00e2      	lsls	r2, r4, #3
 8003468:	4614      	mov	r4, r2
 800346a:	461d      	mov	r5, r3
 800346c:	4643      	mov	r3, r8
 800346e:	18e3      	adds	r3, r4, r3
 8003470:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003474:	464b      	mov	r3, r9
 8003476:	eb45 0303 	adc.w	r3, r5, r3
 800347a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800347e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800348a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	f04f 0300 	mov.w	r3, #0
 8003496:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800349a:	4629      	mov	r1, r5
 800349c:	008b      	lsls	r3, r1, #2
 800349e:	4621      	mov	r1, r4
 80034a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034a4:	4621      	mov	r1, r4
 80034a6:	008a      	lsls	r2, r1, #2
 80034a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80034ac:	f7fc ff00 	bl	80002b0 <__aeabi_uldivmod>
 80034b0:	4602      	mov	r2, r0
 80034b2:	460b      	mov	r3, r1
 80034b4:	4b60      	ldr	r3, [pc, #384]	; (8003638 <UART_SetConfig+0x4e4>)
 80034b6:	fba3 2302 	umull	r2, r3, r3, r2
 80034ba:	095b      	lsrs	r3, r3, #5
 80034bc:	011c      	lsls	r4, r3, #4
 80034be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034c2:	2200      	movs	r2, #0
 80034c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80034c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80034cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80034d0:	4642      	mov	r2, r8
 80034d2:	464b      	mov	r3, r9
 80034d4:	1891      	adds	r1, r2, r2
 80034d6:	61b9      	str	r1, [r7, #24]
 80034d8:	415b      	adcs	r3, r3
 80034da:	61fb      	str	r3, [r7, #28]
 80034dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034e0:	4641      	mov	r1, r8
 80034e2:	1851      	adds	r1, r2, r1
 80034e4:	6139      	str	r1, [r7, #16]
 80034e6:	4649      	mov	r1, r9
 80034e8:	414b      	adcs	r3, r1
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	f04f 0200 	mov.w	r2, #0
 80034f0:	f04f 0300 	mov.w	r3, #0
 80034f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034f8:	4659      	mov	r1, fp
 80034fa:	00cb      	lsls	r3, r1, #3
 80034fc:	4651      	mov	r1, sl
 80034fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003502:	4651      	mov	r1, sl
 8003504:	00ca      	lsls	r2, r1, #3
 8003506:	4610      	mov	r0, r2
 8003508:	4619      	mov	r1, r3
 800350a:	4603      	mov	r3, r0
 800350c:	4642      	mov	r2, r8
 800350e:	189b      	adds	r3, r3, r2
 8003510:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003514:	464b      	mov	r3, r9
 8003516:	460a      	mov	r2, r1
 8003518:	eb42 0303 	adc.w	r3, r2, r3
 800351c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	67bb      	str	r3, [r7, #120]	; 0x78
 800352a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800352c:	f04f 0200 	mov.w	r2, #0
 8003530:	f04f 0300 	mov.w	r3, #0
 8003534:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003538:	4649      	mov	r1, r9
 800353a:	008b      	lsls	r3, r1, #2
 800353c:	4641      	mov	r1, r8
 800353e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003542:	4641      	mov	r1, r8
 8003544:	008a      	lsls	r2, r1, #2
 8003546:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800354a:	f7fc feb1 	bl	80002b0 <__aeabi_uldivmod>
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	4611      	mov	r1, r2
 8003554:	4b38      	ldr	r3, [pc, #224]	; (8003638 <UART_SetConfig+0x4e4>)
 8003556:	fba3 2301 	umull	r2, r3, r3, r1
 800355a:	095b      	lsrs	r3, r3, #5
 800355c:	2264      	movs	r2, #100	; 0x64
 800355e:	fb02 f303 	mul.w	r3, r2, r3
 8003562:	1acb      	subs	r3, r1, r3
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	3332      	adds	r3, #50	; 0x32
 8003568:	4a33      	ldr	r2, [pc, #204]	; (8003638 <UART_SetConfig+0x4e4>)
 800356a:	fba2 2303 	umull	r2, r3, r2, r3
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003574:	441c      	add	r4, r3
 8003576:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800357a:	2200      	movs	r2, #0
 800357c:	673b      	str	r3, [r7, #112]	; 0x70
 800357e:	677a      	str	r2, [r7, #116]	; 0x74
 8003580:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003584:	4642      	mov	r2, r8
 8003586:	464b      	mov	r3, r9
 8003588:	1891      	adds	r1, r2, r2
 800358a:	60b9      	str	r1, [r7, #8]
 800358c:	415b      	adcs	r3, r3
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003594:	4641      	mov	r1, r8
 8003596:	1851      	adds	r1, r2, r1
 8003598:	6039      	str	r1, [r7, #0]
 800359a:	4649      	mov	r1, r9
 800359c:	414b      	adcs	r3, r1
 800359e:	607b      	str	r3, [r7, #4]
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035ac:	4659      	mov	r1, fp
 80035ae:	00cb      	lsls	r3, r1, #3
 80035b0:	4651      	mov	r1, sl
 80035b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035b6:	4651      	mov	r1, sl
 80035b8:	00ca      	lsls	r2, r1, #3
 80035ba:	4610      	mov	r0, r2
 80035bc:	4619      	mov	r1, r3
 80035be:	4603      	mov	r3, r0
 80035c0:	4642      	mov	r2, r8
 80035c2:	189b      	adds	r3, r3, r2
 80035c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80035c6:	464b      	mov	r3, r9
 80035c8:	460a      	mov	r2, r1
 80035ca:	eb42 0303 	adc.w	r3, r2, r3
 80035ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	663b      	str	r3, [r7, #96]	; 0x60
 80035da:	667a      	str	r2, [r7, #100]	; 0x64
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	f04f 0300 	mov.w	r3, #0
 80035e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80035e8:	4649      	mov	r1, r9
 80035ea:	008b      	lsls	r3, r1, #2
 80035ec:	4641      	mov	r1, r8
 80035ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035f2:	4641      	mov	r1, r8
 80035f4:	008a      	lsls	r2, r1, #2
 80035f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80035fa:	f7fc fe59 	bl	80002b0 <__aeabi_uldivmod>
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	4b0d      	ldr	r3, [pc, #52]	; (8003638 <UART_SetConfig+0x4e4>)
 8003604:	fba3 1302 	umull	r1, r3, r3, r2
 8003608:	095b      	lsrs	r3, r3, #5
 800360a:	2164      	movs	r1, #100	; 0x64
 800360c:	fb01 f303 	mul.w	r3, r1, r3
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	3332      	adds	r3, #50	; 0x32
 8003616:	4a08      	ldr	r2, [pc, #32]	; (8003638 <UART_SetConfig+0x4e4>)
 8003618:	fba2 2303 	umull	r2, r3, r2, r3
 800361c:	095b      	lsrs	r3, r3, #5
 800361e:	f003 020f 	and.w	r2, r3, #15
 8003622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4422      	add	r2, r4
 800362a:	609a      	str	r2, [r3, #8]
}
 800362c:	bf00      	nop
 800362e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003632:	46bd      	mov	sp, r7
 8003634:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003638:	51eb851f 	.word	0x51eb851f

0800363c <std>:
 800363c:	2300      	movs	r3, #0
 800363e:	b510      	push	{r4, lr}
 8003640:	4604      	mov	r4, r0
 8003642:	e9c0 3300 	strd	r3, r3, [r0]
 8003646:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800364a:	6083      	str	r3, [r0, #8]
 800364c:	8181      	strh	r1, [r0, #12]
 800364e:	6643      	str	r3, [r0, #100]	; 0x64
 8003650:	81c2      	strh	r2, [r0, #14]
 8003652:	6183      	str	r3, [r0, #24]
 8003654:	4619      	mov	r1, r3
 8003656:	2208      	movs	r2, #8
 8003658:	305c      	adds	r0, #92	; 0x5c
 800365a:	f000 f9e5 	bl	8003a28 <memset>
 800365e:	4b05      	ldr	r3, [pc, #20]	; (8003674 <std+0x38>)
 8003660:	6263      	str	r3, [r4, #36]	; 0x24
 8003662:	4b05      	ldr	r3, [pc, #20]	; (8003678 <std+0x3c>)
 8003664:	62a3      	str	r3, [r4, #40]	; 0x28
 8003666:	4b05      	ldr	r3, [pc, #20]	; (800367c <std+0x40>)
 8003668:	62e3      	str	r3, [r4, #44]	; 0x2c
 800366a:	4b05      	ldr	r3, [pc, #20]	; (8003680 <std+0x44>)
 800366c:	6224      	str	r4, [r4, #32]
 800366e:	6323      	str	r3, [r4, #48]	; 0x30
 8003670:	bd10      	pop	{r4, pc}
 8003672:	bf00      	nop
 8003674:	08003879 	.word	0x08003879
 8003678:	0800389b 	.word	0x0800389b
 800367c:	080038d3 	.word	0x080038d3
 8003680:	080038f7 	.word	0x080038f7

08003684 <stdio_exit_handler>:
 8003684:	4a02      	ldr	r2, [pc, #8]	; (8003690 <stdio_exit_handler+0xc>)
 8003686:	4903      	ldr	r1, [pc, #12]	; (8003694 <stdio_exit_handler+0x10>)
 8003688:	4803      	ldr	r0, [pc, #12]	; (8003698 <stdio_exit_handler+0x14>)
 800368a:	f000 b869 	b.w	8003760 <_fwalk_sglue>
 800368e:	bf00      	nop
 8003690:	20000024 	.word	0x20000024
 8003694:	080043c1 	.word	0x080043c1
 8003698:	20000030 	.word	0x20000030

0800369c <cleanup_stdio>:
 800369c:	6841      	ldr	r1, [r0, #4]
 800369e:	4b0c      	ldr	r3, [pc, #48]	; (80036d0 <cleanup_stdio+0x34>)
 80036a0:	4299      	cmp	r1, r3
 80036a2:	b510      	push	{r4, lr}
 80036a4:	4604      	mov	r4, r0
 80036a6:	d001      	beq.n	80036ac <cleanup_stdio+0x10>
 80036a8:	f000 fe8a 	bl	80043c0 <_fflush_r>
 80036ac:	68a1      	ldr	r1, [r4, #8]
 80036ae:	4b09      	ldr	r3, [pc, #36]	; (80036d4 <cleanup_stdio+0x38>)
 80036b0:	4299      	cmp	r1, r3
 80036b2:	d002      	beq.n	80036ba <cleanup_stdio+0x1e>
 80036b4:	4620      	mov	r0, r4
 80036b6:	f000 fe83 	bl	80043c0 <_fflush_r>
 80036ba:	68e1      	ldr	r1, [r4, #12]
 80036bc:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <cleanup_stdio+0x3c>)
 80036be:	4299      	cmp	r1, r3
 80036c0:	d004      	beq.n	80036cc <cleanup_stdio+0x30>
 80036c2:	4620      	mov	r0, r4
 80036c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036c8:	f000 be7a 	b.w	80043c0 <_fflush_r>
 80036cc:	bd10      	pop	{r4, pc}
 80036ce:	bf00      	nop
 80036d0:	20000158 	.word	0x20000158
 80036d4:	200001c0 	.word	0x200001c0
 80036d8:	20000228 	.word	0x20000228

080036dc <global_stdio_init.part.0>:
 80036dc:	b510      	push	{r4, lr}
 80036de:	4b0b      	ldr	r3, [pc, #44]	; (800370c <global_stdio_init.part.0+0x30>)
 80036e0:	4c0b      	ldr	r4, [pc, #44]	; (8003710 <global_stdio_init.part.0+0x34>)
 80036e2:	4a0c      	ldr	r2, [pc, #48]	; (8003714 <global_stdio_init.part.0+0x38>)
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	4620      	mov	r0, r4
 80036e8:	2200      	movs	r2, #0
 80036ea:	2104      	movs	r1, #4
 80036ec:	f7ff ffa6 	bl	800363c <std>
 80036f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80036f4:	2201      	movs	r2, #1
 80036f6:	2109      	movs	r1, #9
 80036f8:	f7ff ffa0 	bl	800363c <std>
 80036fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003700:	2202      	movs	r2, #2
 8003702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003706:	2112      	movs	r1, #18
 8003708:	f7ff bf98 	b.w	800363c <std>
 800370c:	20000290 	.word	0x20000290
 8003710:	20000158 	.word	0x20000158
 8003714:	08003685 	.word	0x08003685

08003718 <__sfp_lock_acquire>:
 8003718:	4801      	ldr	r0, [pc, #4]	; (8003720 <__sfp_lock_acquire+0x8>)
 800371a:	f000 b9fd 	b.w	8003b18 <__retarget_lock_acquire_recursive>
 800371e:	bf00      	nop
 8003720:	20000299 	.word	0x20000299

08003724 <__sfp_lock_release>:
 8003724:	4801      	ldr	r0, [pc, #4]	; (800372c <__sfp_lock_release+0x8>)
 8003726:	f000 b9f8 	b.w	8003b1a <__retarget_lock_release_recursive>
 800372a:	bf00      	nop
 800372c:	20000299 	.word	0x20000299

08003730 <__sinit>:
 8003730:	b510      	push	{r4, lr}
 8003732:	4604      	mov	r4, r0
 8003734:	f7ff fff0 	bl	8003718 <__sfp_lock_acquire>
 8003738:	6a23      	ldr	r3, [r4, #32]
 800373a:	b11b      	cbz	r3, 8003744 <__sinit+0x14>
 800373c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003740:	f7ff bff0 	b.w	8003724 <__sfp_lock_release>
 8003744:	4b04      	ldr	r3, [pc, #16]	; (8003758 <__sinit+0x28>)
 8003746:	6223      	str	r3, [r4, #32]
 8003748:	4b04      	ldr	r3, [pc, #16]	; (800375c <__sinit+0x2c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1f5      	bne.n	800373c <__sinit+0xc>
 8003750:	f7ff ffc4 	bl	80036dc <global_stdio_init.part.0>
 8003754:	e7f2      	b.n	800373c <__sinit+0xc>
 8003756:	bf00      	nop
 8003758:	0800369d 	.word	0x0800369d
 800375c:	20000290 	.word	0x20000290

08003760 <_fwalk_sglue>:
 8003760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003764:	4607      	mov	r7, r0
 8003766:	4688      	mov	r8, r1
 8003768:	4614      	mov	r4, r2
 800376a:	2600      	movs	r6, #0
 800376c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003770:	f1b9 0901 	subs.w	r9, r9, #1
 8003774:	d505      	bpl.n	8003782 <_fwalk_sglue+0x22>
 8003776:	6824      	ldr	r4, [r4, #0]
 8003778:	2c00      	cmp	r4, #0
 800377a:	d1f7      	bne.n	800376c <_fwalk_sglue+0xc>
 800377c:	4630      	mov	r0, r6
 800377e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003782:	89ab      	ldrh	r3, [r5, #12]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d907      	bls.n	8003798 <_fwalk_sglue+0x38>
 8003788:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800378c:	3301      	adds	r3, #1
 800378e:	d003      	beq.n	8003798 <_fwalk_sglue+0x38>
 8003790:	4629      	mov	r1, r5
 8003792:	4638      	mov	r0, r7
 8003794:	47c0      	blx	r8
 8003796:	4306      	orrs	r6, r0
 8003798:	3568      	adds	r5, #104	; 0x68
 800379a:	e7e9      	b.n	8003770 <_fwalk_sglue+0x10>

0800379c <iprintf>:
 800379c:	b40f      	push	{r0, r1, r2, r3}
 800379e:	b507      	push	{r0, r1, r2, lr}
 80037a0:	4906      	ldr	r1, [pc, #24]	; (80037bc <iprintf+0x20>)
 80037a2:	ab04      	add	r3, sp, #16
 80037a4:	6808      	ldr	r0, [r1, #0]
 80037a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80037aa:	6881      	ldr	r1, [r0, #8]
 80037ac:	9301      	str	r3, [sp, #4]
 80037ae:	f000 fad7 	bl	8003d60 <_vfiprintf_r>
 80037b2:	b003      	add	sp, #12
 80037b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80037b8:	b004      	add	sp, #16
 80037ba:	4770      	bx	lr
 80037bc:	2000007c 	.word	0x2000007c

080037c0 <_puts_r>:
 80037c0:	6a03      	ldr	r3, [r0, #32]
 80037c2:	b570      	push	{r4, r5, r6, lr}
 80037c4:	6884      	ldr	r4, [r0, #8]
 80037c6:	4605      	mov	r5, r0
 80037c8:	460e      	mov	r6, r1
 80037ca:	b90b      	cbnz	r3, 80037d0 <_puts_r+0x10>
 80037cc:	f7ff ffb0 	bl	8003730 <__sinit>
 80037d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80037d2:	07db      	lsls	r3, r3, #31
 80037d4:	d405      	bmi.n	80037e2 <_puts_r+0x22>
 80037d6:	89a3      	ldrh	r3, [r4, #12]
 80037d8:	0598      	lsls	r0, r3, #22
 80037da:	d402      	bmi.n	80037e2 <_puts_r+0x22>
 80037dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037de:	f000 f99b 	bl	8003b18 <__retarget_lock_acquire_recursive>
 80037e2:	89a3      	ldrh	r3, [r4, #12]
 80037e4:	0719      	lsls	r1, r3, #28
 80037e6:	d513      	bpl.n	8003810 <_puts_r+0x50>
 80037e8:	6923      	ldr	r3, [r4, #16]
 80037ea:	b18b      	cbz	r3, 8003810 <_puts_r+0x50>
 80037ec:	3e01      	subs	r6, #1
 80037ee:	68a3      	ldr	r3, [r4, #8]
 80037f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80037f4:	3b01      	subs	r3, #1
 80037f6:	60a3      	str	r3, [r4, #8]
 80037f8:	b9e9      	cbnz	r1, 8003836 <_puts_r+0x76>
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	da2e      	bge.n	800385c <_puts_r+0x9c>
 80037fe:	4622      	mov	r2, r4
 8003800:	210a      	movs	r1, #10
 8003802:	4628      	mov	r0, r5
 8003804:	f000 f87b 	bl	80038fe <__swbuf_r>
 8003808:	3001      	adds	r0, #1
 800380a:	d007      	beq.n	800381c <_puts_r+0x5c>
 800380c:	250a      	movs	r5, #10
 800380e:	e007      	b.n	8003820 <_puts_r+0x60>
 8003810:	4621      	mov	r1, r4
 8003812:	4628      	mov	r0, r5
 8003814:	f000 f8b0 	bl	8003978 <__swsetup_r>
 8003818:	2800      	cmp	r0, #0
 800381a:	d0e7      	beq.n	80037ec <_puts_r+0x2c>
 800381c:	f04f 35ff 	mov.w	r5, #4294967295
 8003820:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003822:	07da      	lsls	r2, r3, #31
 8003824:	d405      	bmi.n	8003832 <_puts_r+0x72>
 8003826:	89a3      	ldrh	r3, [r4, #12]
 8003828:	059b      	lsls	r3, r3, #22
 800382a:	d402      	bmi.n	8003832 <_puts_r+0x72>
 800382c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800382e:	f000 f974 	bl	8003b1a <__retarget_lock_release_recursive>
 8003832:	4628      	mov	r0, r5
 8003834:	bd70      	pop	{r4, r5, r6, pc}
 8003836:	2b00      	cmp	r3, #0
 8003838:	da04      	bge.n	8003844 <_puts_r+0x84>
 800383a:	69a2      	ldr	r2, [r4, #24]
 800383c:	429a      	cmp	r2, r3
 800383e:	dc06      	bgt.n	800384e <_puts_r+0x8e>
 8003840:	290a      	cmp	r1, #10
 8003842:	d004      	beq.n	800384e <_puts_r+0x8e>
 8003844:	6823      	ldr	r3, [r4, #0]
 8003846:	1c5a      	adds	r2, r3, #1
 8003848:	6022      	str	r2, [r4, #0]
 800384a:	7019      	strb	r1, [r3, #0]
 800384c:	e7cf      	b.n	80037ee <_puts_r+0x2e>
 800384e:	4622      	mov	r2, r4
 8003850:	4628      	mov	r0, r5
 8003852:	f000 f854 	bl	80038fe <__swbuf_r>
 8003856:	3001      	adds	r0, #1
 8003858:	d1c9      	bne.n	80037ee <_puts_r+0x2e>
 800385a:	e7df      	b.n	800381c <_puts_r+0x5c>
 800385c:	6823      	ldr	r3, [r4, #0]
 800385e:	250a      	movs	r5, #10
 8003860:	1c5a      	adds	r2, r3, #1
 8003862:	6022      	str	r2, [r4, #0]
 8003864:	701d      	strb	r5, [r3, #0]
 8003866:	e7db      	b.n	8003820 <_puts_r+0x60>

08003868 <puts>:
 8003868:	4b02      	ldr	r3, [pc, #8]	; (8003874 <puts+0xc>)
 800386a:	4601      	mov	r1, r0
 800386c:	6818      	ldr	r0, [r3, #0]
 800386e:	f7ff bfa7 	b.w	80037c0 <_puts_r>
 8003872:	bf00      	nop
 8003874:	2000007c 	.word	0x2000007c

08003878 <__sread>:
 8003878:	b510      	push	{r4, lr}
 800387a:	460c      	mov	r4, r1
 800387c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003880:	f000 f8fc 	bl	8003a7c <_read_r>
 8003884:	2800      	cmp	r0, #0
 8003886:	bfab      	itete	ge
 8003888:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800388a:	89a3      	ldrhlt	r3, [r4, #12]
 800388c:	181b      	addge	r3, r3, r0
 800388e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003892:	bfac      	ite	ge
 8003894:	6563      	strge	r3, [r4, #84]	; 0x54
 8003896:	81a3      	strhlt	r3, [r4, #12]
 8003898:	bd10      	pop	{r4, pc}

0800389a <__swrite>:
 800389a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800389e:	461f      	mov	r7, r3
 80038a0:	898b      	ldrh	r3, [r1, #12]
 80038a2:	05db      	lsls	r3, r3, #23
 80038a4:	4605      	mov	r5, r0
 80038a6:	460c      	mov	r4, r1
 80038a8:	4616      	mov	r6, r2
 80038aa:	d505      	bpl.n	80038b8 <__swrite+0x1e>
 80038ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038b0:	2302      	movs	r3, #2
 80038b2:	2200      	movs	r2, #0
 80038b4:	f000 f8d0 	bl	8003a58 <_lseek_r>
 80038b8:	89a3      	ldrh	r3, [r4, #12]
 80038ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038c2:	81a3      	strh	r3, [r4, #12]
 80038c4:	4632      	mov	r2, r6
 80038c6:	463b      	mov	r3, r7
 80038c8:	4628      	mov	r0, r5
 80038ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038ce:	f000 b8e7 	b.w	8003aa0 <_write_r>

080038d2 <__sseek>:
 80038d2:	b510      	push	{r4, lr}
 80038d4:	460c      	mov	r4, r1
 80038d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038da:	f000 f8bd 	bl	8003a58 <_lseek_r>
 80038de:	1c43      	adds	r3, r0, #1
 80038e0:	89a3      	ldrh	r3, [r4, #12]
 80038e2:	bf15      	itete	ne
 80038e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80038e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80038ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80038ee:	81a3      	strheq	r3, [r4, #12]
 80038f0:	bf18      	it	ne
 80038f2:	81a3      	strhne	r3, [r4, #12]
 80038f4:	bd10      	pop	{r4, pc}

080038f6 <__sclose>:
 80038f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038fa:	f000 b89d 	b.w	8003a38 <_close_r>

080038fe <__swbuf_r>:
 80038fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003900:	460e      	mov	r6, r1
 8003902:	4614      	mov	r4, r2
 8003904:	4605      	mov	r5, r0
 8003906:	b118      	cbz	r0, 8003910 <__swbuf_r+0x12>
 8003908:	6a03      	ldr	r3, [r0, #32]
 800390a:	b90b      	cbnz	r3, 8003910 <__swbuf_r+0x12>
 800390c:	f7ff ff10 	bl	8003730 <__sinit>
 8003910:	69a3      	ldr	r3, [r4, #24]
 8003912:	60a3      	str	r3, [r4, #8]
 8003914:	89a3      	ldrh	r3, [r4, #12]
 8003916:	071a      	lsls	r2, r3, #28
 8003918:	d525      	bpl.n	8003966 <__swbuf_r+0x68>
 800391a:	6923      	ldr	r3, [r4, #16]
 800391c:	b31b      	cbz	r3, 8003966 <__swbuf_r+0x68>
 800391e:	6823      	ldr	r3, [r4, #0]
 8003920:	6922      	ldr	r2, [r4, #16]
 8003922:	1a98      	subs	r0, r3, r2
 8003924:	6963      	ldr	r3, [r4, #20]
 8003926:	b2f6      	uxtb	r6, r6
 8003928:	4283      	cmp	r3, r0
 800392a:	4637      	mov	r7, r6
 800392c:	dc04      	bgt.n	8003938 <__swbuf_r+0x3a>
 800392e:	4621      	mov	r1, r4
 8003930:	4628      	mov	r0, r5
 8003932:	f000 fd45 	bl	80043c0 <_fflush_r>
 8003936:	b9e0      	cbnz	r0, 8003972 <__swbuf_r+0x74>
 8003938:	68a3      	ldr	r3, [r4, #8]
 800393a:	3b01      	subs	r3, #1
 800393c:	60a3      	str	r3, [r4, #8]
 800393e:	6823      	ldr	r3, [r4, #0]
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	6022      	str	r2, [r4, #0]
 8003944:	701e      	strb	r6, [r3, #0]
 8003946:	6962      	ldr	r2, [r4, #20]
 8003948:	1c43      	adds	r3, r0, #1
 800394a:	429a      	cmp	r2, r3
 800394c:	d004      	beq.n	8003958 <__swbuf_r+0x5a>
 800394e:	89a3      	ldrh	r3, [r4, #12]
 8003950:	07db      	lsls	r3, r3, #31
 8003952:	d506      	bpl.n	8003962 <__swbuf_r+0x64>
 8003954:	2e0a      	cmp	r6, #10
 8003956:	d104      	bne.n	8003962 <__swbuf_r+0x64>
 8003958:	4621      	mov	r1, r4
 800395a:	4628      	mov	r0, r5
 800395c:	f000 fd30 	bl	80043c0 <_fflush_r>
 8003960:	b938      	cbnz	r0, 8003972 <__swbuf_r+0x74>
 8003962:	4638      	mov	r0, r7
 8003964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003966:	4621      	mov	r1, r4
 8003968:	4628      	mov	r0, r5
 800396a:	f000 f805 	bl	8003978 <__swsetup_r>
 800396e:	2800      	cmp	r0, #0
 8003970:	d0d5      	beq.n	800391e <__swbuf_r+0x20>
 8003972:	f04f 37ff 	mov.w	r7, #4294967295
 8003976:	e7f4      	b.n	8003962 <__swbuf_r+0x64>

08003978 <__swsetup_r>:
 8003978:	b538      	push	{r3, r4, r5, lr}
 800397a:	4b2a      	ldr	r3, [pc, #168]	; (8003a24 <__swsetup_r+0xac>)
 800397c:	4605      	mov	r5, r0
 800397e:	6818      	ldr	r0, [r3, #0]
 8003980:	460c      	mov	r4, r1
 8003982:	b118      	cbz	r0, 800398c <__swsetup_r+0x14>
 8003984:	6a03      	ldr	r3, [r0, #32]
 8003986:	b90b      	cbnz	r3, 800398c <__swsetup_r+0x14>
 8003988:	f7ff fed2 	bl	8003730 <__sinit>
 800398c:	89a3      	ldrh	r3, [r4, #12]
 800398e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003992:	0718      	lsls	r0, r3, #28
 8003994:	d422      	bmi.n	80039dc <__swsetup_r+0x64>
 8003996:	06d9      	lsls	r1, r3, #27
 8003998:	d407      	bmi.n	80039aa <__swsetup_r+0x32>
 800399a:	2309      	movs	r3, #9
 800399c:	602b      	str	r3, [r5, #0]
 800399e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80039a2:	81a3      	strh	r3, [r4, #12]
 80039a4:	f04f 30ff 	mov.w	r0, #4294967295
 80039a8:	e034      	b.n	8003a14 <__swsetup_r+0x9c>
 80039aa:	0758      	lsls	r0, r3, #29
 80039ac:	d512      	bpl.n	80039d4 <__swsetup_r+0x5c>
 80039ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039b0:	b141      	cbz	r1, 80039c4 <__swsetup_r+0x4c>
 80039b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80039b6:	4299      	cmp	r1, r3
 80039b8:	d002      	beq.n	80039c0 <__swsetup_r+0x48>
 80039ba:	4628      	mov	r0, r5
 80039bc:	f000 f8ae 	bl	8003b1c <_free_r>
 80039c0:	2300      	movs	r3, #0
 80039c2:	6363      	str	r3, [r4, #52]	; 0x34
 80039c4:	89a3      	ldrh	r3, [r4, #12]
 80039c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80039ca:	81a3      	strh	r3, [r4, #12]
 80039cc:	2300      	movs	r3, #0
 80039ce:	6063      	str	r3, [r4, #4]
 80039d0:	6923      	ldr	r3, [r4, #16]
 80039d2:	6023      	str	r3, [r4, #0]
 80039d4:	89a3      	ldrh	r3, [r4, #12]
 80039d6:	f043 0308 	orr.w	r3, r3, #8
 80039da:	81a3      	strh	r3, [r4, #12]
 80039dc:	6923      	ldr	r3, [r4, #16]
 80039de:	b94b      	cbnz	r3, 80039f4 <__swsetup_r+0x7c>
 80039e0:	89a3      	ldrh	r3, [r4, #12]
 80039e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80039e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039ea:	d003      	beq.n	80039f4 <__swsetup_r+0x7c>
 80039ec:	4621      	mov	r1, r4
 80039ee:	4628      	mov	r0, r5
 80039f0:	f000 fd34 	bl	800445c <__smakebuf_r>
 80039f4:	89a0      	ldrh	r0, [r4, #12]
 80039f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80039fa:	f010 0301 	ands.w	r3, r0, #1
 80039fe:	d00a      	beq.n	8003a16 <__swsetup_r+0x9e>
 8003a00:	2300      	movs	r3, #0
 8003a02:	60a3      	str	r3, [r4, #8]
 8003a04:	6963      	ldr	r3, [r4, #20]
 8003a06:	425b      	negs	r3, r3
 8003a08:	61a3      	str	r3, [r4, #24]
 8003a0a:	6923      	ldr	r3, [r4, #16]
 8003a0c:	b943      	cbnz	r3, 8003a20 <__swsetup_r+0xa8>
 8003a0e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003a12:	d1c4      	bne.n	800399e <__swsetup_r+0x26>
 8003a14:	bd38      	pop	{r3, r4, r5, pc}
 8003a16:	0781      	lsls	r1, r0, #30
 8003a18:	bf58      	it	pl
 8003a1a:	6963      	ldrpl	r3, [r4, #20]
 8003a1c:	60a3      	str	r3, [r4, #8]
 8003a1e:	e7f4      	b.n	8003a0a <__swsetup_r+0x92>
 8003a20:	2000      	movs	r0, #0
 8003a22:	e7f7      	b.n	8003a14 <__swsetup_r+0x9c>
 8003a24:	2000007c 	.word	0x2000007c

08003a28 <memset>:
 8003a28:	4402      	add	r2, r0
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d100      	bne.n	8003a32 <memset+0xa>
 8003a30:	4770      	bx	lr
 8003a32:	f803 1b01 	strb.w	r1, [r3], #1
 8003a36:	e7f9      	b.n	8003a2c <memset+0x4>

08003a38 <_close_r>:
 8003a38:	b538      	push	{r3, r4, r5, lr}
 8003a3a:	4d06      	ldr	r5, [pc, #24]	; (8003a54 <_close_r+0x1c>)
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	4604      	mov	r4, r0
 8003a40:	4608      	mov	r0, r1
 8003a42:	602b      	str	r3, [r5, #0]
 8003a44:	f7fd f877 	bl	8000b36 <_close>
 8003a48:	1c43      	adds	r3, r0, #1
 8003a4a:	d102      	bne.n	8003a52 <_close_r+0x1a>
 8003a4c:	682b      	ldr	r3, [r5, #0]
 8003a4e:	b103      	cbz	r3, 8003a52 <_close_r+0x1a>
 8003a50:	6023      	str	r3, [r4, #0]
 8003a52:	bd38      	pop	{r3, r4, r5, pc}
 8003a54:	20000294 	.word	0x20000294

08003a58 <_lseek_r>:
 8003a58:	b538      	push	{r3, r4, r5, lr}
 8003a5a:	4d07      	ldr	r5, [pc, #28]	; (8003a78 <_lseek_r+0x20>)
 8003a5c:	4604      	mov	r4, r0
 8003a5e:	4608      	mov	r0, r1
 8003a60:	4611      	mov	r1, r2
 8003a62:	2200      	movs	r2, #0
 8003a64:	602a      	str	r2, [r5, #0]
 8003a66:	461a      	mov	r2, r3
 8003a68:	f7fd f88c 	bl	8000b84 <_lseek>
 8003a6c:	1c43      	adds	r3, r0, #1
 8003a6e:	d102      	bne.n	8003a76 <_lseek_r+0x1e>
 8003a70:	682b      	ldr	r3, [r5, #0]
 8003a72:	b103      	cbz	r3, 8003a76 <_lseek_r+0x1e>
 8003a74:	6023      	str	r3, [r4, #0]
 8003a76:	bd38      	pop	{r3, r4, r5, pc}
 8003a78:	20000294 	.word	0x20000294

08003a7c <_read_r>:
 8003a7c:	b538      	push	{r3, r4, r5, lr}
 8003a7e:	4d07      	ldr	r5, [pc, #28]	; (8003a9c <_read_r+0x20>)
 8003a80:	4604      	mov	r4, r0
 8003a82:	4608      	mov	r0, r1
 8003a84:	4611      	mov	r1, r2
 8003a86:	2200      	movs	r2, #0
 8003a88:	602a      	str	r2, [r5, #0]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	f7fd f81a 	bl	8000ac4 <_read>
 8003a90:	1c43      	adds	r3, r0, #1
 8003a92:	d102      	bne.n	8003a9a <_read_r+0x1e>
 8003a94:	682b      	ldr	r3, [r5, #0]
 8003a96:	b103      	cbz	r3, 8003a9a <_read_r+0x1e>
 8003a98:	6023      	str	r3, [r4, #0]
 8003a9a:	bd38      	pop	{r3, r4, r5, pc}
 8003a9c:	20000294 	.word	0x20000294

08003aa0 <_write_r>:
 8003aa0:	b538      	push	{r3, r4, r5, lr}
 8003aa2:	4d07      	ldr	r5, [pc, #28]	; (8003ac0 <_write_r+0x20>)
 8003aa4:	4604      	mov	r4, r0
 8003aa6:	4608      	mov	r0, r1
 8003aa8:	4611      	mov	r1, r2
 8003aaa:	2200      	movs	r2, #0
 8003aac:	602a      	str	r2, [r5, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	f7fd f825 	bl	8000afe <_write>
 8003ab4:	1c43      	adds	r3, r0, #1
 8003ab6:	d102      	bne.n	8003abe <_write_r+0x1e>
 8003ab8:	682b      	ldr	r3, [r5, #0]
 8003aba:	b103      	cbz	r3, 8003abe <_write_r+0x1e>
 8003abc:	6023      	str	r3, [r4, #0]
 8003abe:	bd38      	pop	{r3, r4, r5, pc}
 8003ac0:	20000294 	.word	0x20000294

08003ac4 <__errno>:
 8003ac4:	4b01      	ldr	r3, [pc, #4]	; (8003acc <__errno+0x8>)
 8003ac6:	6818      	ldr	r0, [r3, #0]
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	2000007c 	.word	0x2000007c

08003ad0 <__libc_init_array>:
 8003ad0:	b570      	push	{r4, r5, r6, lr}
 8003ad2:	4d0d      	ldr	r5, [pc, #52]	; (8003b08 <__libc_init_array+0x38>)
 8003ad4:	4c0d      	ldr	r4, [pc, #52]	; (8003b0c <__libc_init_array+0x3c>)
 8003ad6:	1b64      	subs	r4, r4, r5
 8003ad8:	10a4      	asrs	r4, r4, #2
 8003ada:	2600      	movs	r6, #0
 8003adc:	42a6      	cmp	r6, r4
 8003ade:	d109      	bne.n	8003af4 <__libc_init_array+0x24>
 8003ae0:	4d0b      	ldr	r5, [pc, #44]	; (8003b10 <__libc_init_array+0x40>)
 8003ae2:	4c0c      	ldr	r4, [pc, #48]	; (8003b14 <__libc_init_array+0x44>)
 8003ae4:	f000 fd28 	bl	8004538 <_init>
 8003ae8:	1b64      	subs	r4, r4, r5
 8003aea:	10a4      	asrs	r4, r4, #2
 8003aec:	2600      	movs	r6, #0
 8003aee:	42a6      	cmp	r6, r4
 8003af0:	d105      	bne.n	8003afe <__libc_init_array+0x2e>
 8003af2:	bd70      	pop	{r4, r5, r6, pc}
 8003af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003af8:	4798      	blx	r3
 8003afa:	3601      	adds	r6, #1
 8003afc:	e7ee      	b.n	8003adc <__libc_init_array+0xc>
 8003afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b02:	4798      	blx	r3
 8003b04:	3601      	adds	r6, #1
 8003b06:	e7f2      	b.n	8003aee <__libc_init_array+0x1e>
 8003b08:	08004688 	.word	0x08004688
 8003b0c:	08004688 	.word	0x08004688
 8003b10:	08004688 	.word	0x08004688
 8003b14:	0800468c 	.word	0x0800468c

08003b18 <__retarget_lock_acquire_recursive>:
 8003b18:	4770      	bx	lr

08003b1a <__retarget_lock_release_recursive>:
 8003b1a:	4770      	bx	lr

08003b1c <_free_r>:
 8003b1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b1e:	2900      	cmp	r1, #0
 8003b20:	d044      	beq.n	8003bac <_free_r+0x90>
 8003b22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b26:	9001      	str	r0, [sp, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f1a1 0404 	sub.w	r4, r1, #4
 8003b2e:	bfb8      	it	lt
 8003b30:	18e4      	addlt	r4, r4, r3
 8003b32:	f000 f8df 	bl	8003cf4 <__malloc_lock>
 8003b36:	4a1e      	ldr	r2, [pc, #120]	; (8003bb0 <_free_r+0x94>)
 8003b38:	9801      	ldr	r0, [sp, #4]
 8003b3a:	6813      	ldr	r3, [r2, #0]
 8003b3c:	b933      	cbnz	r3, 8003b4c <_free_r+0x30>
 8003b3e:	6063      	str	r3, [r4, #4]
 8003b40:	6014      	str	r4, [r2, #0]
 8003b42:	b003      	add	sp, #12
 8003b44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b48:	f000 b8da 	b.w	8003d00 <__malloc_unlock>
 8003b4c:	42a3      	cmp	r3, r4
 8003b4e:	d908      	bls.n	8003b62 <_free_r+0x46>
 8003b50:	6825      	ldr	r5, [r4, #0]
 8003b52:	1961      	adds	r1, r4, r5
 8003b54:	428b      	cmp	r3, r1
 8003b56:	bf01      	itttt	eq
 8003b58:	6819      	ldreq	r1, [r3, #0]
 8003b5a:	685b      	ldreq	r3, [r3, #4]
 8003b5c:	1949      	addeq	r1, r1, r5
 8003b5e:	6021      	streq	r1, [r4, #0]
 8003b60:	e7ed      	b.n	8003b3e <_free_r+0x22>
 8003b62:	461a      	mov	r2, r3
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	b10b      	cbz	r3, 8003b6c <_free_r+0x50>
 8003b68:	42a3      	cmp	r3, r4
 8003b6a:	d9fa      	bls.n	8003b62 <_free_r+0x46>
 8003b6c:	6811      	ldr	r1, [r2, #0]
 8003b6e:	1855      	adds	r5, r2, r1
 8003b70:	42a5      	cmp	r5, r4
 8003b72:	d10b      	bne.n	8003b8c <_free_r+0x70>
 8003b74:	6824      	ldr	r4, [r4, #0]
 8003b76:	4421      	add	r1, r4
 8003b78:	1854      	adds	r4, r2, r1
 8003b7a:	42a3      	cmp	r3, r4
 8003b7c:	6011      	str	r1, [r2, #0]
 8003b7e:	d1e0      	bne.n	8003b42 <_free_r+0x26>
 8003b80:	681c      	ldr	r4, [r3, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	6053      	str	r3, [r2, #4]
 8003b86:	440c      	add	r4, r1
 8003b88:	6014      	str	r4, [r2, #0]
 8003b8a:	e7da      	b.n	8003b42 <_free_r+0x26>
 8003b8c:	d902      	bls.n	8003b94 <_free_r+0x78>
 8003b8e:	230c      	movs	r3, #12
 8003b90:	6003      	str	r3, [r0, #0]
 8003b92:	e7d6      	b.n	8003b42 <_free_r+0x26>
 8003b94:	6825      	ldr	r5, [r4, #0]
 8003b96:	1961      	adds	r1, r4, r5
 8003b98:	428b      	cmp	r3, r1
 8003b9a:	bf04      	itt	eq
 8003b9c:	6819      	ldreq	r1, [r3, #0]
 8003b9e:	685b      	ldreq	r3, [r3, #4]
 8003ba0:	6063      	str	r3, [r4, #4]
 8003ba2:	bf04      	itt	eq
 8003ba4:	1949      	addeq	r1, r1, r5
 8003ba6:	6021      	streq	r1, [r4, #0]
 8003ba8:	6054      	str	r4, [r2, #4]
 8003baa:	e7ca      	b.n	8003b42 <_free_r+0x26>
 8003bac:	b003      	add	sp, #12
 8003bae:	bd30      	pop	{r4, r5, pc}
 8003bb0:	2000029c 	.word	0x2000029c

08003bb4 <sbrk_aligned>:
 8003bb4:	b570      	push	{r4, r5, r6, lr}
 8003bb6:	4e0e      	ldr	r6, [pc, #56]	; (8003bf0 <sbrk_aligned+0x3c>)
 8003bb8:	460c      	mov	r4, r1
 8003bba:	6831      	ldr	r1, [r6, #0]
 8003bbc:	4605      	mov	r5, r0
 8003bbe:	b911      	cbnz	r1, 8003bc6 <sbrk_aligned+0x12>
 8003bc0:	f000 fcaa 	bl	8004518 <_sbrk_r>
 8003bc4:	6030      	str	r0, [r6, #0]
 8003bc6:	4621      	mov	r1, r4
 8003bc8:	4628      	mov	r0, r5
 8003bca:	f000 fca5 	bl	8004518 <_sbrk_r>
 8003bce:	1c43      	adds	r3, r0, #1
 8003bd0:	d00a      	beq.n	8003be8 <sbrk_aligned+0x34>
 8003bd2:	1cc4      	adds	r4, r0, #3
 8003bd4:	f024 0403 	bic.w	r4, r4, #3
 8003bd8:	42a0      	cmp	r0, r4
 8003bda:	d007      	beq.n	8003bec <sbrk_aligned+0x38>
 8003bdc:	1a21      	subs	r1, r4, r0
 8003bde:	4628      	mov	r0, r5
 8003be0:	f000 fc9a 	bl	8004518 <_sbrk_r>
 8003be4:	3001      	adds	r0, #1
 8003be6:	d101      	bne.n	8003bec <sbrk_aligned+0x38>
 8003be8:	f04f 34ff 	mov.w	r4, #4294967295
 8003bec:	4620      	mov	r0, r4
 8003bee:	bd70      	pop	{r4, r5, r6, pc}
 8003bf0:	200002a0 	.word	0x200002a0

08003bf4 <_malloc_r>:
 8003bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bf8:	1ccd      	adds	r5, r1, #3
 8003bfa:	f025 0503 	bic.w	r5, r5, #3
 8003bfe:	3508      	adds	r5, #8
 8003c00:	2d0c      	cmp	r5, #12
 8003c02:	bf38      	it	cc
 8003c04:	250c      	movcc	r5, #12
 8003c06:	2d00      	cmp	r5, #0
 8003c08:	4607      	mov	r7, r0
 8003c0a:	db01      	blt.n	8003c10 <_malloc_r+0x1c>
 8003c0c:	42a9      	cmp	r1, r5
 8003c0e:	d905      	bls.n	8003c1c <_malloc_r+0x28>
 8003c10:	230c      	movs	r3, #12
 8003c12:	603b      	str	r3, [r7, #0]
 8003c14:	2600      	movs	r6, #0
 8003c16:	4630      	mov	r0, r6
 8003c18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003cf0 <_malloc_r+0xfc>
 8003c20:	f000 f868 	bl	8003cf4 <__malloc_lock>
 8003c24:	f8d8 3000 	ldr.w	r3, [r8]
 8003c28:	461c      	mov	r4, r3
 8003c2a:	bb5c      	cbnz	r4, 8003c84 <_malloc_r+0x90>
 8003c2c:	4629      	mov	r1, r5
 8003c2e:	4638      	mov	r0, r7
 8003c30:	f7ff ffc0 	bl	8003bb4 <sbrk_aligned>
 8003c34:	1c43      	adds	r3, r0, #1
 8003c36:	4604      	mov	r4, r0
 8003c38:	d155      	bne.n	8003ce6 <_malloc_r+0xf2>
 8003c3a:	f8d8 4000 	ldr.w	r4, [r8]
 8003c3e:	4626      	mov	r6, r4
 8003c40:	2e00      	cmp	r6, #0
 8003c42:	d145      	bne.n	8003cd0 <_malloc_r+0xdc>
 8003c44:	2c00      	cmp	r4, #0
 8003c46:	d048      	beq.n	8003cda <_malloc_r+0xe6>
 8003c48:	6823      	ldr	r3, [r4, #0]
 8003c4a:	4631      	mov	r1, r6
 8003c4c:	4638      	mov	r0, r7
 8003c4e:	eb04 0903 	add.w	r9, r4, r3
 8003c52:	f000 fc61 	bl	8004518 <_sbrk_r>
 8003c56:	4581      	cmp	r9, r0
 8003c58:	d13f      	bne.n	8003cda <_malloc_r+0xe6>
 8003c5a:	6821      	ldr	r1, [r4, #0]
 8003c5c:	1a6d      	subs	r5, r5, r1
 8003c5e:	4629      	mov	r1, r5
 8003c60:	4638      	mov	r0, r7
 8003c62:	f7ff ffa7 	bl	8003bb4 <sbrk_aligned>
 8003c66:	3001      	adds	r0, #1
 8003c68:	d037      	beq.n	8003cda <_malloc_r+0xe6>
 8003c6a:	6823      	ldr	r3, [r4, #0]
 8003c6c:	442b      	add	r3, r5
 8003c6e:	6023      	str	r3, [r4, #0]
 8003c70:	f8d8 3000 	ldr.w	r3, [r8]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d038      	beq.n	8003cea <_malloc_r+0xf6>
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	42a2      	cmp	r2, r4
 8003c7c:	d12b      	bne.n	8003cd6 <_malloc_r+0xe2>
 8003c7e:	2200      	movs	r2, #0
 8003c80:	605a      	str	r2, [r3, #4]
 8003c82:	e00f      	b.n	8003ca4 <_malloc_r+0xb0>
 8003c84:	6822      	ldr	r2, [r4, #0]
 8003c86:	1b52      	subs	r2, r2, r5
 8003c88:	d41f      	bmi.n	8003cca <_malloc_r+0xd6>
 8003c8a:	2a0b      	cmp	r2, #11
 8003c8c:	d917      	bls.n	8003cbe <_malloc_r+0xca>
 8003c8e:	1961      	adds	r1, r4, r5
 8003c90:	42a3      	cmp	r3, r4
 8003c92:	6025      	str	r5, [r4, #0]
 8003c94:	bf18      	it	ne
 8003c96:	6059      	strne	r1, [r3, #4]
 8003c98:	6863      	ldr	r3, [r4, #4]
 8003c9a:	bf08      	it	eq
 8003c9c:	f8c8 1000 	streq.w	r1, [r8]
 8003ca0:	5162      	str	r2, [r4, r5]
 8003ca2:	604b      	str	r3, [r1, #4]
 8003ca4:	4638      	mov	r0, r7
 8003ca6:	f104 060b 	add.w	r6, r4, #11
 8003caa:	f000 f829 	bl	8003d00 <__malloc_unlock>
 8003cae:	f026 0607 	bic.w	r6, r6, #7
 8003cb2:	1d23      	adds	r3, r4, #4
 8003cb4:	1af2      	subs	r2, r6, r3
 8003cb6:	d0ae      	beq.n	8003c16 <_malloc_r+0x22>
 8003cb8:	1b9b      	subs	r3, r3, r6
 8003cba:	50a3      	str	r3, [r4, r2]
 8003cbc:	e7ab      	b.n	8003c16 <_malloc_r+0x22>
 8003cbe:	42a3      	cmp	r3, r4
 8003cc0:	6862      	ldr	r2, [r4, #4]
 8003cc2:	d1dd      	bne.n	8003c80 <_malloc_r+0x8c>
 8003cc4:	f8c8 2000 	str.w	r2, [r8]
 8003cc8:	e7ec      	b.n	8003ca4 <_malloc_r+0xb0>
 8003cca:	4623      	mov	r3, r4
 8003ccc:	6864      	ldr	r4, [r4, #4]
 8003cce:	e7ac      	b.n	8003c2a <_malloc_r+0x36>
 8003cd0:	4634      	mov	r4, r6
 8003cd2:	6876      	ldr	r6, [r6, #4]
 8003cd4:	e7b4      	b.n	8003c40 <_malloc_r+0x4c>
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	e7cc      	b.n	8003c74 <_malloc_r+0x80>
 8003cda:	230c      	movs	r3, #12
 8003cdc:	603b      	str	r3, [r7, #0]
 8003cde:	4638      	mov	r0, r7
 8003ce0:	f000 f80e 	bl	8003d00 <__malloc_unlock>
 8003ce4:	e797      	b.n	8003c16 <_malloc_r+0x22>
 8003ce6:	6025      	str	r5, [r4, #0]
 8003ce8:	e7dc      	b.n	8003ca4 <_malloc_r+0xb0>
 8003cea:	605b      	str	r3, [r3, #4]
 8003cec:	deff      	udf	#255	; 0xff
 8003cee:	bf00      	nop
 8003cf0:	2000029c 	.word	0x2000029c

08003cf4 <__malloc_lock>:
 8003cf4:	4801      	ldr	r0, [pc, #4]	; (8003cfc <__malloc_lock+0x8>)
 8003cf6:	f7ff bf0f 	b.w	8003b18 <__retarget_lock_acquire_recursive>
 8003cfa:	bf00      	nop
 8003cfc:	20000298 	.word	0x20000298

08003d00 <__malloc_unlock>:
 8003d00:	4801      	ldr	r0, [pc, #4]	; (8003d08 <__malloc_unlock+0x8>)
 8003d02:	f7ff bf0a 	b.w	8003b1a <__retarget_lock_release_recursive>
 8003d06:	bf00      	nop
 8003d08:	20000298 	.word	0x20000298

08003d0c <__sfputc_r>:
 8003d0c:	6893      	ldr	r3, [r2, #8]
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	b410      	push	{r4}
 8003d14:	6093      	str	r3, [r2, #8]
 8003d16:	da08      	bge.n	8003d2a <__sfputc_r+0x1e>
 8003d18:	6994      	ldr	r4, [r2, #24]
 8003d1a:	42a3      	cmp	r3, r4
 8003d1c:	db01      	blt.n	8003d22 <__sfputc_r+0x16>
 8003d1e:	290a      	cmp	r1, #10
 8003d20:	d103      	bne.n	8003d2a <__sfputc_r+0x1e>
 8003d22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d26:	f7ff bdea 	b.w	80038fe <__swbuf_r>
 8003d2a:	6813      	ldr	r3, [r2, #0]
 8003d2c:	1c58      	adds	r0, r3, #1
 8003d2e:	6010      	str	r0, [r2, #0]
 8003d30:	7019      	strb	r1, [r3, #0]
 8003d32:	4608      	mov	r0, r1
 8003d34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <__sfputs_r>:
 8003d3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3c:	4606      	mov	r6, r0
 8003d3e:	460f      	mov	r7, r1
 8003d40:	4614      	mov	r4, r2
 8003d42:	18d5      	adds	r5, r2, r3
 8003d44:	42ac      	cmp	r4, r5
 8003d46:	d101      	bne.n	8003d4c <__sfputs_r+0x12>
 8003d48:	2000      	movs	r0, #0
 8003d4a:	e007      	b.n	8003d5c <__sfputs_r+0x22>
 8003d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d50:	463a      	mov	r2, r7
 8003d52:	4630      	mov	r0, r6
 8003d54:	f7ff ffda 	bl	8003d0c <__sfputc_r>
 8003d58:	1c43      	adds	r3, r0, #1
 8003d5a:	d1f3      	bne.n	8003d44 <__sfputs_r+0xa>
 8003d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003d60 <_vfiprintf_r>:
 8003d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d64:	460d      	mov	r5, r1
 8003d66:	b09d      	sub	sp, #116	; 0x74
 8003d68:	4614      	mov	r4, r2
 8003d6a:	4698      	mov	r8, r3
 8003d6c:	4606      	mov	r6, r0
 8003d6e:	b118      	cbz	r0, 8003d78 <_vfiprintf_r+0x18>
 8003d70:	6a03      	ldr	r3, [r0, #32]
 8003d72:	b90b      	cbnz	r3, 8003d78 <_vfiprintf_r+0x18>
 8003d74:	f7ff fcdc 	bl	8003730 <__sinit>
 8003d78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d7a:	07d9      	lsls	r1, r3, #31
 8003d7c:	d405      	bmi.n	8003d8a <_vfiprintf_r+0x2a>
 8003d7e:	89ab      	ldrh	r3, [r5, #12]
 8003d80:	059a      	lsls	r2, r3, #22
 8003d82:	d402      	bmi.n	8003d8a <_vfiprintf_r+0x2a>
 8003d84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d86:	f7ff fec7 	bl	8003b18 <__retarget_lock_acquire_recursive>
 8003d8a:	89ab      	ldrh	r3, [r5, #12]
 8003d8c:	071b      	lsls	r3, r3, #28
 8003d8e:	d501      	bpl.n	8003d94 <_vfiprintf_r+0x34>
 8003d90:	692b      	ldr	r3, [r5, #16]
 8003d92:	b99b      	cbnz	r3, 8003dbc <_vfiprintf_r+0x5c>
 8003d94:	4629      	mov	r1, r5
 8003d96:	4630      	mov	r0, r6
 8003d98:	f7ff fdee 	bl	8003978 <__swsetup_r>
 8003d9c:	b170      	cbz	r0, 8003dbc <_vfiprintf_r+0x5c>
 8003d9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003da0:	07dc      	lsls	r4, r3, #31
 8003da2:	d504      	bpl.n	8003dae <_vfiprintf_r+0x4e>
 8003da4:	f04f 30ff 	mov.w	r0, #4294967295
 8003da8:	b01d      	add	sp, #116	; 0x74
 8003daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dae:	89ab      	ldrh	r3, [r5, #12]
 8003db0:	0598      	lsls	r0, r3, #22
 8003db2:	d4f7      	bmi.n	8003da4 <_vfiprintf_r+0x44>
 8003db4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003db6:	f7ff feb0 	bl	8003b1a <__retarget_lock_release_recursive>
 8003dba:	e7f3      	b.n	8003da4 <_vfiprintf_r+0x44>
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8003dc0:	2320      	movs	r3, #32
 8003dc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003dc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003dca:	2330      	movs	r3, #48	; 0x30
 8003dcc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003f80 <_vfiprintf_r+0x220>
 8003dd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003dd4:	f04f 0901 	mov.w	r9, #1
 8003dd8:	4623      	mov	r3, r4
 8003dda:	469a      	mov	sl, r3
 8003ddc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003de0:	b10a      	cbz	r2, 8003de6 <_vfiprintf_r+0x86>
 8003de2:	2a25      	cmp	r2, #37	; 0x25
 8003de4:	d1f9      	bne.n	8003dda <_vfiprintf_r+0x7a>
 8003de6:	ebba 0b04 	subs.w	fp, sl, r4
 8003dea:	d00b      	beq.n	8003e04 <_vfiprintf_r+0xa4>
 8003dec:	465b      	mov	r3, fp
 8003dee:	4622      	mov	r2, r4
 8003df0:	4629      	mov	r1, r5
 8003df2:	4630      	mov	r0, r6
 8003df4:	f7ff ffa1 	bl	8003d3a <__sfputs_r>
 8003df8:	3001      	adds	r0, #1
 8003dfa:	f000 80a9 	beq.w	8003f50 <_vfiprintf_r+0x1f0>
 8003dfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e00:	445a      	add	r2, fp
 8003e02:	9209      	str	r2, [sp, #36]	; 0x24
 8003e04:	f89a 3000 	ldrb.w	r3, [sl]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 80a1 	beq.w	8003f50 <_vfiprintf_r+0x1f0>
 8003e0e:	2300      	movs	r3, #0
 8003e10:	f04f 32ff 	mov.w	r2, #4294967295
 8003e14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e18:	f10a 0a01 	add.w	sl, sl, #1
 8003e1c:	9304      	str	r3, [sp, #16]
 8003e1e:	9307      	str	r3, [sp, #28]
 8003e20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e24:	931a      	str	r3, [sp, #104]	; 0x68
 8003e26:	4654      	mov	r4, sl
 8003e28:	2205      	movs	r2, #5
 8003e2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e2e:	4854      	ldr	r0, [pc, #336]	; (8003f80 <_vfiprintf_r+0x220>)
 8003e30:	f7fc f9ee 	bl	8000210 <memchr>
 8003e34:	9a04      	ldr	r2, [sp, #16]
 8003e36:	b9d8      	cbnz	r0, 8003e70 <_vfiprintf_r+0x110>
 8003e38:	06d1      	lsls	r1, r2, #27
 8003e3a:	bf44      	itt	mi
 8003e3c:	2320      	movmi	r3, #32
 8003e3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e42:	0713      	lsls	r3, r2, #28
 8003e44:	bf44      	itt	mi
 8003e46:	232b      	movmi	r3, #43	; 0x2b
 8003e48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e4c:	f89a 3000 	ldrb.w	r3, [sl]
 8003e50:	2b2a      	cmp	r3, #42	; 0x2a
 8003e52:	d015      	beq.n	8003e80 <_vfiprintf_r+0x120>
 8003e54:	9a07      	ldr	r2, [sp, #28]
 8003e56:	4654      	mov	r4, sl
 8003e58:	2000      	movs	r0, #0
 8003e5a:	f04f 0c0a 	mov.w	ip, #10
 8003e5e:	4621      	mov	r1, r4
 8003e60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e64:	3b30      	subs	r3, #48	; 0x30
 8003e66:	2b09      	cmp	r3, #9
 8003e68:	d94d      	bls.n	8003f06 <_vfiprintf_r+0x1a6>
 8003e6a:	b1b0      	cbz	r0, 8003e9a <_vfiprintf_r+0x13a>
 8003e6c:	9207      	str	r2, [sp, #28]
 8003e6e:	e014      	b.n	8003e9a <_vfiprintf_r+0x13a>
 8003e70:	eba0 0308 	sub.w	r3, r0, r8
 8003e74:	fa09 f303 	lsl.w	r3, r9, r3
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	9304      	str	r3, [sp, #16]
 8003e7c:	46a2      	mov	sl, r4
 8003e7e:	e7d2      	b.n	8003e26 <_vfiprintf_r+0xc6>
 8003e80:	9b03      	ldr	r3, [sp, #12]
 8003e82:	1d19      	adds	r1, r3, #4
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	9103      	str	r1, [sp, #12]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	bfbb      	ittet	lt
 8003e8c:	425b      	neglt	r3, r3
 8003e8e:	f042 0202 	orrlt.w	r2, r2, #2
 8003e92:	9307      	strge	r3, [sp, #28]
 8003e94:	9307      	strlt	r3, [sp, #28]
 8003e96:	bfb8      	it	lt
 8003e98:	9204      	strlt	r2, [sp, #16]
 8003e9a:	7823      	ldrb	r3, [r4, #0]
 8003e9c:	2b2e      	cmp	r3, #46	; 0x2e
 8003e9e:	d10c      	bne.n	8003eba <_vfiprintf_r+0x15a>
 8003ea0:	7863      	ldrb	r3, [r4, #1]
 8003ea2:	2b2a      	cmp	r3, #42	; 0x2a
 8003ea4:	d134      	bne.n	8003f10 <_vfiprintf_r+0x1b0>
 8003ea6:	9b03      	ldr	r3, [sp, #12]
 8003ea8:	1d1a      	adds	r2, r3, #4
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	9203      	str	r2, [sp, #12]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	bfb8      	it	lt
 8003eb2:	f04f 33ff 	movlt.w	r3, #4294967295
 8003eb6:	3402      	adds	r4, #2
 8003eb8:	9305      	str	r3, [sp, #20]
 8003eba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003f90 <_vfiprintf_r+0x230>
 8003ebe:	7821      	ldrb	r1, [r4, #0]
 8003ec0:	2203      	movs	r2, #3
 8003ec2:	4650      	mov	r0, sl
 8003ec4:	f7fc f9a4 	bl	8000210 <memchr>
 8003ec8:	b138      	cbz	r0, 8003eda <_vfiprintf_r+0x17a>
 8003eca:	9b04      	ldr	r3, [sp, #16]
 8003ecc:	eba0 000a 	sub.w	r0, r0, sl
 8003ed0:	2240      	movs	r2, #64	; 0x40
 8003ed2:	4082      	lsls	r2, r0
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	3401      	adds	r4, #1
 8003ed8:	9304      	str	r3, [sp, #16]
 8003eda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ede:	4829      	ldr	r0, [pc, #164]	; (8003f84 <_vfiprintf_r+0x224>)
 8003ee0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ee4:	2206      	movs	r2, #6
 8003ee6:	f7fc f993 	bl	8000210 <memchr>
 8003eea:	2800      	cmp	r0, #0
 8003eec:	d03f      	beq.n	8003f6e <_vfiprintf_r+0x20e>
 8003eee:	4b26      	ldr	r3, [pc, #152]	; (8003f88 <_vfiprintf_r+0x228>)
 8003ef0:	bb1b      	cbnz	r3, 8003f3a <_vfiprintf_r+0x1da>
 8003ef2:	9b03      	ldr	r3, [sp, #12]
 8003ef4:	3307      	adds	r3, #7
 8003ef6:	f023 0307 	bic.w	r3, r3, #7
 8003efa:	3308      	adds	r3, #8
 8003efc:	9303      	str	r3, [sp, #12]
 8003efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f00:	443b      	add	r3, r7
 8003f02:	9309      	str	r3, [sp, #36]	; 0x24
 8003f04:	e768      	b.n	8003dd8 <_vfiprintf_r+0x78>
 8003f06:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f0a:	460c      	mov	r4, r1
 8003f0c:	2001      	movs	r0, #1
 8003f0e:	e7a6      	b.n	8003e5e <_vfiprintf_r+0xfe>
 8003f10:	2300      	movs	r3, #0
 8003f12:	3401      	adds	r4, #1
 8003f14:	9305      	str	r3, [sp, #20]
 8003f16:	4619      	mov	r1, r3
 8003f18:	f04f 0c0a 	mov.w	ip, #10
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f22:	3a30      	subs	r2, #48	; 0x30
 8003f24:	2a09      	cmp	r2, #9
 8003f26:	d903      	bls.n	8003f30 <_vfiprintf_r+0x1d0>
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0c6      	beq.n	8003eba <_vfiprintf_r+0x15a>
 8003f2c:	9105      	str	r1, [sp, #20]
 8003f2e:	e7c4      	b.n	8003eba <_vfiprintf_r+0x15a>
 8003f30:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f34:	4604      	mov	r4, r0
 8003f36:	2301      	movs	r3, #1
 8003f38:	e7f0      	b.n	8003f1c <_vfiprintf_r+0x1bc>
 8003f3a:	ab03      	add	r3, sp, #12
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	462a      	mov	r2, r5
 8003f40:	4b12      	ldr	r3, [pc, #72]	; (8003f8c <_vfiprintf_r+0x22c>)
 8003f42:	a904      	add	r1, sp, #16
 8003f44:	4630      	mov	r0, r6
 8003f46:	f3af 8000 	nop.w
 8003f4a:	4607      	mov	r7, r0
 8003f4c:	1c78      	adds	r0, r7, #1
 8003f4e:	d1d6      	bne.n	8003efe <_vfiprintf_r+0x19e>
 8003f50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f52:	07d9      	lsls	r1, r3, #31
 8003f54:	d405      	bmi.n	8003f62 <_vfiprintf_r+0x202>
 8003f56:	89ab      	ldrh	r3, [r5, #12]
 8003f58:	059a      	lsls	r2, r3, #22
 8003f5a:	d402      	bmi.n	8003f62 <_vfiprintf_r+0x202>
 8003f5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f5e:	f7ff fddc 	bl	8003b1a <__retarget_lock_release_recursive>
 8003f62:	89ab      	ldrh	r3, [r5, #12]
 8003f64:	065b      	lsls	r3, r3, #25
 8003f66:	f53f af1d 	bmi.w	8003da4 <_vfiprintf_r+0x44>
 8003f6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f6c:	e71c      	b.n	8003da8 <_vfiprintf_r+0x48>
 8003f6e:	ab03      	add	r3, sp, #12
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	462a      	mov	r2, r5
 8003f74:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <_vfiprintf_r+0x22c>)
 8003f76:	a904      	add	r1, sp, #16
 8003f78:	4630      	mov	r0, r6
 8003f7a:	f000 f879 	bl	8004070 <_printf_i>
 8003f7e:	e7e4      	b.n	8003f4a <_vfiprintf_r+0x1ea>
 8003f80:	0800464c 	.word	0x0800464c
 8003f84:	08004656 	.word	0x08004656
 8003f88:	00000000 	.word	0x00000000
 8003f8c:	08003d3b 	.word	0x08003d3b
 8003f90:	08004652 	.word	0x08004652

08003f94 <_printf_common>:
 8003f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f98:	4616      	mov	r6, r2
 8003f9a:	4699      	mov	r9, r3
 8003f9c:	688a      	ldr	r2, [r1, #8]
 8003f9e:	690b      	ldr	r3, [r1, #16]
 8003fa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	bfb8      	it	lt
 8003fa8:	4613      	movlt	r3, r2
 8003faa:	6033      	str	r3, [r6, #0]
 8003fac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003fb0:	4607      	mov	r7, r0
 8003fb2:	460c      	mov	r4, r1
 8003fb4:	b10a      	cbz	r2, 8003fba <_printf_common+0x26>
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	6033      	str	r3, [r6, #0]
 8003fba:	6823      	ldr	r3, [r4, #0]
 8003fbc:	0699      	lsls	r1, r3, #26
 8003fbe:	bf42      	ittt	mi
 8003fc0:	6833      	ldrmi	r3, [r6, #0]
 8003fc2:	3302      	addmi	r3, #2
 8003fc4:	6033      	strmi	r3, [r6, #0]
 8003fc6:	6825      	ldr	r5, [r4, #0]
 8003fc8:	f015 0506 	ands.w	r5, r5, #6
 8003fcc:	d106      	bne.n	8003fdc <_printf_common+0x48>
 8003fce:	f104 0a19 	add.w	sl, r4, #25
 8003fd2:	68e3      	ldr	r3, [r4, #12]
 8003fd4:	6832      	ldr	r2, [r6, #0]
 8003fd6:	1a9b      	subs	r3, r3, r2
 8003fd8:	42ab      	cmp	r3, r5
 8003fda:	dc26      	bgt.n	800402a <_printf_common+0x96>
 8003fdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003fe0:	1e13      	subs	r3, r2, #0
 8003fe2:	6822      	ldr	r2, [r4, #0]
 8003fe4:	bf18      	it	ne
 8003fe6:	2301      	movne	r3, #1
 8003fe8:	0692      	lsls	r2, r2, #26
 8003fea:	d42b      	bmi.n	8004044 <_printf_common+0xb0>
 8003fec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ff0:	4649      	mov	r1, r9
 8003ff2:	4638      	mov	r0, r7
 8003ff4:	47c0      	blx	r8
 8003ff6:	3001      	adds	r0, #1
 8003ff8:	d01e      	beq.n	8004038 <_printf_common+0xa4>
 8003ffa:	6823      	ldr	r3, [r4, #0]
 8003ffc:	6922      	ldr	r2, [r4, #16]
 8003ffe:	f003 0306 	and.w	r3, r3, #6
 8004002:	2b04      	cmp	r3, #4
 8004004:	bf02      	ittt	eq
 8004006:	68e5      	ldreq	r5, [r4, #12]
 8004008:	6833      	ldreq	r3, [r6, #0]
 800400a:	1aed      	subeq	r5, r5, r3
 800400c:	68a3      	ldr	r3, [r4, #8]
 800400e:	bf0c      	ite	eq
 8004010:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004014:	2500      	movne	r5, #0
 8004016:	4293      	cmp	r3, r2
 8004018:	bfc4      	itt	gt
 800401a:	1a9b      	subgt	r3, r3, r2
 800401c:	18ed      	addgt	r5, r5, r3
 800401e:	2600      	movs	r6, #0
 8004020:	341a      	adds	r4, #26
 8004022:	42b5      	cmp	r5, r6
 8004024:	d11a      	bne.n	800405c <_printf_common+0xc8>
 8004026:	2000      	movs	r0, #0
 8004028:	e008      	b.n	800403c <_printf_common+0xa8>
 800402a:	2301      	movs	r3, #1
 800402c:	4652      	mov	r2, sl
 800402e:	4649      	mov	r1, r9
 8004030:	4638      	mov	r0, r7
 8004032:	47c0      	blx	r8
 8004034:	3001      	adds	r0, #1
 8004036:	d103      	bne.n	8004040 <_printf_common+0xac>
 8004038:	f04f 30ff 	mov.w	r0, #4294967295
 800403c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004040:	3501      	adds	r5, #1
 8004042:	e7c6      	b.n	8003fd2 <_printf_common+0x3e>
 8004044:	18e1      	adds	r1, r4, r3
 8004046:	1c5a      	adds	r2, r3, #1
 8004048:	2030      	movs	r0, #48	; 0x30
 800404a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800404e:	4422      	add	r2, r4
 8004050:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004054:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004058:	3302      	adds	r3, #2
 800405a:	e7c7      	b.n	8003fec <_printf_common+0x58>
 800405c:	2301      	movs	r3, #1
 800405e:	4622      	mov	r2, r4
 8004060:	4649      	mov	r1, r9
 8004062:	4638      	mov	r0, r7
 8004064:	47c0      	blx	r8
 8004066:	3001      	adds	r0, #1
 8004068:	d0e6      	beq.n	8004038 <_printf_common+0xa4>
 800406a:	3601      	adds	r6, #1
 800406c:	e7d9      	b.n	8004022 <_printf_common+0x8e>
	...

08004070 <_printf_i>:
 8004070:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004074:	7e0f      	ldrb	r7, [r1, #24]
 8004076:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004078:	2f78      	cmp	r7, #120	; 0x78
 800407a:	4691      	mov	r9, r2
 800407c:	4680      	mov	r8, r0
 800407e:	460c      	mov	r4, r1
 8004080:	469a      	mov	sl, r3
 8004082:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004086:	d807      	bhi.n	8004098 <_printf_i+0x28>
 8004088:	2f62      	cmp	r7, #98	; 0x62
 800408a:	d80a      	bhi.n	80040a2 <_printf_i+0x32>
 800408c:	2f00      	cmp	r7, #0
 800408e:	f000 80d4 	beq.w	800423a <_printf_i+0x1ca>
 8004092:	2f58      	cmp	r7, #88	; 0x58
 8004094:	f000 80c0 	beq.w	8004218 <_printf_i+0x1a8>
 8004098:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800409c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040a0:	e03a      	b.n	8004118 <_printf_i+0xa8>
 80040a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80040a6:	2b15      	cmp	r3, #21
 80040a8:	d8f6      	bhi.n	8004098 <_printf_i+0x28>
 80040aa:	a101      	add	r1, pc, #4	; (adr r1, 80040b0 <_printf_i+0x40>)
 80040ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040b0:	08004109 	.word	0x08004109
 80040b4:	0800411d 	.word	0x0800411d
 80040b8:	08004099 	.word	0x08004099
 80040bc:	08004099 	.word	0x08004099
 80040c0:	08004099 	.word	0x08004099
 80040c4:	08004099 	.word	0x08004099
 80040c8:	0800411d 	.word	0x0800411d
 80040cc:	08004099 	.word	0x08004099
 80040d0:	08004099 	.word	0x08004099
 80040d4:	08004099 	.word	0x08004099
 80040d8:	08004099 	.word	0x08004099
 80040dc:	08004221 	.word	0x08004221
 80040e0:	08004149 	.word	0x08004149
 80040e4:	080041db 	.word	0x080041db
 80040e8:	08004099 	.word	0x08004099
 80040ec:	08004099 	.word	0x08004099
 80040f0:	08004243 	.word	0x08004243
 80040f4:	08004099 	.word	0x08004099
 80040f8:	08004149 	.word	0x08004149
 80040fc:	08004099 	.word	0x08004099
 8004100:	08004099 	.word	0x08004099
 8004104:	080041e3 	.word	0x080041e3
 8004108:	682b      	ldr	r3, [r5, #0]
 800410a:	1d1a      	adds	r2, r3, #4
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	602a      	str	r2, [r5, #0]
 8004110:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004114:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004118:	2301      	movs	r3, #1
 800411a:	e09f      	b.n	800425c <_printf_i+0x1ec>
 800411c:	6820      	ldr	r0, [r4, #0]
 800411e:	682b      	ldr	r3, [r5, #0]
 8004120:	0607      	lsls	r7, r0, #24
 8004122:	f103 0104 	add.w	r1, r3, #4
 8004126:	6029      	str	r1, [r5, #0]
 8004128:	d501      	bpl.n	800412e <_printf_i+0xbe>
 800412a:	681e      	ldr	r6, [r3, #0]
 800412c:	e003      	b.n	8004136 <_printf_i+0xc6>
 800412e:	0646      	lsls	r6, r0, #25
 8004130:	d5fb      	bpl.n	800412a <_printf_i+0xba>
 8004132:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004136:	2e00      	cmp	r6, #0
 8004138:	da03      	bge.n	8004142 <_printf_i+0xd2>
 800413a:	232d      	movs	r3, #45	; 0x2d
 800413c:	4276      	negs	r6, r6
 800413e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004142:	485a      	ldr	r0, [pc, #360]	; (80042ac <_printf_i+0x23c>)
 8004144:	230a      	movs	r3, #10
 8004146:	e012      	b.n	800416e <_printf_i+0xfe>
 8004148:	682b      	ldr	r3, [r5, #0]
 800414a:	6820      	ldr	r0, [r4, #0]
 800414c:	1d19      	adds	r1, r3, #4
 800414e:	6029      	str	r1, [r5, #0]
 8004150:	0605      	lsls	r5, r0, #24
 8004152:	d501      	bpl.n	8004158 <_printf_i+0xe8>
 8004154:	681e      	ldr	r6, [r3, #0]
 8004156:	e002      	b.n	800415e <_printf_i+0xee>
 8004158:	0641      	lsls	r1, r0, #25
 800415a:	d5fb      	bpl.n	8004154 <_printf_i+0xe4>
 800415c:	881e      	ldrh	r6, [r3, #0]
 800415e:	4853      	ldr	r0, [pc, #332]	; (80042ac <_printf_i+0x23c>)
 8004160:	2f6f      	cmp	r7, #111	; 0x6f
 8004162:	bf0c      	ite	eq
 8004164:	2308      	moveq	r3, #8
 8004166:	230a      	movne	r3, #10
 8004168:	2100      	movs	r1, #0
 800416a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800416e:	6865      	ldr	r5, [r4, #4]
 8004170:	60a5      	str	r5, [r4, #8]
 8004172:	2d00      	cmp	r5, #0
 8004174:	bfa2      	ittt	ge
 8004176:	6821      	ldrge	r1, [r4, #0]
 8004178:	f021 0104 	bicge.w	r1, r1, #4
 800417c:	6021      	strge	r1, [r4, #0]
 800417e:	b90e      	cbnz	r6, 8004184 <_printf_i+0x114>
 8004180:	2d00      	cmp	r5, #0
 8004182:	d04b      	beq.n	800421c <_printf_i+0x1ac>
 8004184:	4615      	mov	r5, r2
 8004186:	fbb6 f1f3 	udiv	r1, r6, r3
 800418a:	fb03 6711 	mls	r7, r3, r1, r6
 800418e:	5dc7      	ldrb	r7, [r0, r7]
 8004190:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004194:	4637      	mov	r7, r6
 8004196:	42bb      	cmp	r3, r7
 8004198:	460e      	mov	r6, r1
 800419a:	d9f4      	bls.n	8004186 <_printf_i+0x116>
 800419c:	2b08      	cmp	r3, #8
 800419e:	d10b      	bne.n	80041b8 <_printf_i+0x148>
 80041a0:	6823      	ldr	r3, [r4, #0]
 80041a2:	07de      	lsls	r6, r3, #31
 80041a4:	d508      	bpl.n	80041b8 <_printf_i+0x148>
 80041a6:	6923      	ldr	r3, [r4, #16]
 80041a8:	6861      	ldr	r1, [r4, #4]
 80041aa:	4299      	cmp	r1, r3
 80041ac:	bfde      	ittt	le
 80041ae:	2330      	movle	r3, #48	; 0x30
 80041b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80041b8:	1b52      	subs	r2, r2, r5
 80041ba:	6122      	str	r2, [r4, #16]
 80041bc:	f8cd a000 	str.w	sl, [sp]
 80041c0:	464b      	mov	r3, r9
 80041c2:	aa03      	add	r2, sp, #12
 80041c4:	4621      	mov	r1, r4
 80041c6:	4640      	mov	r0, r8
 80041c8:	f7ff fee4 	bl	8003f94 <_printf_common>
 80041cc:	3001      	adds	r0, #1
 80041ce:	d14a      	bne.n	8004266 <_printf_i+0x1f6>
 80041d0:	f04f 30ff 	mov.w	r0, #4294967295
 80041d4:	b004      	add	sp, #16
 80041d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	f043 0320 	orr.w	r3, r3, #32
 80041e0:	6023      	str	r3, [r4, #0]
 80041e2:	4833      	ldr	r0, [pc, #204]	; (80042b0 <_printf_i+0x240>)
 80041e4:	2778      	movs	r7, #120	; 0x78
 80041e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80041ea:	6823      	ldr	r3, [r4, #0]
 80041ec:	6829      	ldr	r1, [r5, #0]
 80041ee:	061f      	lsls	r7, r3, #24
 80041f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80041f4:	d402      	bmi.n	80041fc <_printf_i+0x18c>
 80041f6:	065f      	lsls	r7, r3, #25
 80041f8:	bf48      	it	mi
 80041fa:	b2b6      	uxthmi	r6, r6
 80041fc:	07df      	lsls	r7, r3, #31
 80041fe:	bf48      	it	mi
 8004200:	f043 0320 	orrmi.w	r3, r3, #32
 8004204:	6029      	str	r1, [r5, #0]
 8004206:	bf48      	it	mi
 8004208:	6023      	strmi	r3, [r4, #0]
 800420a:	b91e      	cbnz	r6, 8004214 <_printf_i+0x1a4>
 800420c:	6823      	ldr	r3, [r4, #0]
 800420e:	f023 0320 	bic.w	r3, r3, #32
 8004212:	6023      	str	r3, [r4, #0]
 8004214:	2310      	movs	r3, #16
 8004216:	e7a7      	b.n	8004168 <_printf_i+0xf8>
 8004218:	4824      	ldr	r0, [pc, #144]	; (80042ac <_printf_i+0x23c>)
 800421a:	e7e4      	b.n	80041e6 <_printf_i+0x176>
 800421c:	4615      	mov	r5, r2
 800421e:	e7bd      	b.n	800419c <_printf_i+0x12c>
 8004220:	682b      	ldr	r3, [r5, #0]
 8004222:	6826      	ldr	r6, [r4, #0]
 8004224:	6961      	ldr	r1, [r4, #20]
 8004226:	1d18      	adds	r0, r3, #4
 8004228:	6028      	str	r0, [r5, #0]
 800422a:	0635      	lsls	r5, r6, #24
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	d501      	bpl.n	8004234 <_printf_i+0x1c4>
 8004230:	6019      	str	r1, [r3, #0]
 8004232:	e002      	b.n	800423a <_printf_i+0x1ca>
 8004234:	0670      	lsls	r0, r6, #25
 8004236:	d5fb      	bpl.n	8004230 <_printf_i+0x1c0>
 8004238:	8019      	strh	r1, [r3, #0]
 800423a:	2300      	movs	r3, #0
 800423c:	6123      	str	r3, [r4, #16]
 800423e:	4615      	mov	r5, r2
 8004240:	e7bc      	b.n	80041bc <_printf_i+0x14c>
 8004242:	682b      	ldr	r3, [r5, #0]
 8004244:	1d1a      	adds	r2, r3, #4
 8004246:	602a      	str	r2, [r5, #0]
 8004248:	681d      	ldr	r5, [r3, #0]
 800424a:	6862      	ldr	r2, [r4, #4]
 800424c:	2100      	movs	r1, #0
 800424e:	4628      	mov	r0, r5
 8004250:	f7fb ffde 	bl	8000210 <memchr>
 8004254:	b108      	cbz	r0, 800425a <_printf_i+0x1ea>
 8004256:	1b40      	subs	r0, r0, r5
 8004258:	6060      	str	r0, [r4, #4]
 800425a:	6863      	ldr	r3, [r4, #4]
 800425c:	6123      	str	r3, [r4, #16]
 800425e:	2300      	movs	r3, #0
 8004260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004264:	e7aa      	b.n	80041bc <_printf_i+0x14c>
 8004266:	6923      	ldr	r3, [r4, #16]
 8004268:	462a      	mov	r2, r5
 800426a:	4649      	mov	r1, r9
 800426c:	4640      	mov	r0, r8
 800426e:	47d0      	blx	sl
 8004270:	3001      	adds	r0, #1
 8004272:	d0ad      	beq.n	80041d0 <_printf_i+0x160>
 8004274:	6823      	ldr	r3, [r4, #0]
 8004276:	079b      	lsls	r3, r3, #30
 8004278:	d413      	bmi.n	80042a2 <_printf_i+0x232>
 800427a:	68e0      	ldr	r0, [r4, #12]
 800427c:	9b03      	ldr	r3, [sp, #12]
 800427e:	4298      	cmp	r0, r3
 8004280:	bfb8      	it	lt
 8004282:	4618      	movlt	r0, r3
 8004284:	e7a6      	b.n	80041d4 <_printf_i+0x164>
 8004286:	2301      	movs	r3, #1
 8004288:	4632      	mov	r2, r6
 800428a:	4649      	mov	r1, r9
 800428c:	4640      	mov	r0, r8
 800428e:	47d0      	blx	sl
 8004290:	3001      	adds	r0, #1
 8004292:	d09d      	beq.n	80041d0 <_printf_i+0x160>
 8004294:	3501      	adds	r5, #1
 8004296:	68e3      	ldr	r3, [r4, #12]
 8004298:	9903      	ldr	r1, [sp, #12]
 800429a:	1a5b      	subs	r3, r3, r1
 800429c:	42ab      	cmp	r3, r5
 800429e:	dcf2      	bgt.n	8004286 <_printf_i+0x216>
 80042a0:	e7eb      	b.n	800427a <_printf_i+0x20a>
 80042a2:	2500      	movs	r5, #0
 80042a4:	f104 0619 	add.w	r6, r4, #25
 80042a8:	e7f5      	b.n	8004296 <_printf_i+0x226>
 80042aa:	bf00      	nop
 80042ac:	0800465d 	.word	0x0800465d
 80042b0:	0800466e 	.word	0x0800466e

080042b4 <__sflush_r>:
 80042b4:	898a      	ldrh	r2, [r1, #12]
 80042b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042ba:	4605      	mov	r5, r0
 80042bc:	0710      	lsls	r0, r2, #28
 80042be:	460c      	mov	r4, r1
 80042c0:	d458      	bmi.n	8004374 <__sflush_r+0xc0>
 80042c2:	684b      	ldr	r3, [r1, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	dc05      	bgt.n	80042d4 <__sflush_r+0x20>
 80042c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	dc02      	bgt.n	80042d4 <__sflush_r+0x20>
 80042ce:	2000      	movs	r0, #0
 80042d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042d6:	2e00      	cmp	r6, #0
 80042d8:	d0f9      	beq.n	80042ce <__sflush_r+0x1a>
 80042da:	2300      	movs	r3, #0
 80042dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80042e0:	682f      	ldr	r7, [r5, #0]
 80042e2:	6a21      	ldr	r1, [r4, #32]
 80042e4:	602b      	str	r3, [r5, #0]
 80042e6:	d032      	beq.n	800434e <__sflush_r+0x9a>
 80042e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80042ea:	89a3      	ldrh	r3, [r4, #12]
 80042ec:	075a      	lsls	r2, r3, #29
 80042ee:	d505      	bpl.n	80042fc <__sflush_r+0x48>
 80042f0:	6863      	ldr	r3, [r4, #4]
 80042f2:	1ac0      	subs	r0, r0, r3
 80042f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80042f6:	b10b      	cbz	r3, 80042fc <__sflush_r+0x48>
 80042f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042fa:	1ac0      	subs	r0, r0, r3
 80042fc:	2300      	movs	r3, #0
 80042fe:	4602      	mov	r2, r0
 8004300:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004302:	6a21      	ldr	r1, [r4, #32]
 8004304:	4628      	mov	r0, r5
 8004306:	47b0      	blx	r6
 8004308:	1c43      	adds	r3, r0, #1
 800430a:	89a3      	ldrh	r3, [r4, #12]
 800430c:	d106      	bne.n	800431c <__sflush_r+0x68>
 800430e:	6829      	ldr	r1, [r5, #0]
 8004310:	291d      	cmp	r1, #29
 8004312:	d82b      	bhi.n	800436c <__sflush_r+0xb8>
 8004314:	4a29      	ldr	r2, [pc, #164]	; (80043bc <__sflush_r+0x108>)
 8004316:	410a      	asrs	r2, r1
 8004318:	07d6      	lsls	r6, r2, #31
 800431a:	d427      	bmi.n	800436c <__sflush_r+0xb8>
 800431c:	2200      	movs	r2, #0
 800431e:	6062      	str	r2, [r4, #4]
 8004320:	04d9      	lsls	r1, r3, #19
 8004322:	6922      	ldr	r2, [r4, #16]
 8004324:	6022      	str	r2, [r4, #0]
 8004326:	d504      	bpl.n	8004332 <__sflush_r+0x7e>
 8004328:	1c42      	adds	r2, r0, #1
 800432a:	d101      	bne.n	8004330 <__sflush_r+0x7c>
 800432c:	682b      	ldr	r3, [r5, #0]
 800432e:	b903      	cbnz	r3, 8004332 <__sflush_r+0x7e>
 8004330:	6560      	str	r0, [r4, #84]	; 0x54
 8004332:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004334:	602f      	str	r7, [r5, #0]
 8004336:	2900      	cmp	r1, #0
 8004338:	d0c9      	beq.n	80042ce <__sflush_r+0x1a>
 800433a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800433e:	4299      	cmp	r1, r3
 8004340:	d002      	beq.n	8004348 <__sflush_r+0x94>
 8004342:	4628      	mov	r0, r5
 8004344:	f7ff fbea 	bl	8003b1c <_free_r>
 8004348:	2000      	movs	r0, #0
 800434a:	6360      	str	r0, [r4, #52]	; 0x34
 800434c:	e7c0      	b.n	80042d0 <__sflush_r+0x1c>
 800434e:	2301      	movs	r3, #1
 8004350:	4628      	mov	r0, r5
 8004352:	47b0      	blx	r6
 8004354:	1c41      	adds	r1, r0, #1
 8004356:	d1c8      	bne.n	80042ea <__sflush_r+0x36>
 8004358:	682b      	ldr	r3, [r5, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0c5      	beq.n	80042ea <__sflush_r+0x36>
 800435e:	2b1d      	cmp	r3, #29
 8004360:	d001      	beq.n	8004366 <__sflush_r+0xb2>
 8004362:	2b16      	cmp	r3, #22
 8004364:	d101      	bne.n	800436a <__sflush_r+0xb6>
 8004366:	602f      	str	r7, [r5, #0]
 8004368:	e7b1      	b.n	80042ce <__sflush_r+0x1a>
 800436a:	89a3      	ldrh	r3, [r4, #12]
 800436c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004370:	81a3      	strh	r3, [r4, #12]
 8004372:	e7ad      	b.n	80042d0 <__sflush_r+0x1c>
 8004374:	690f      	ldr	r7, [r1, #16]
 8004376:	2f00      	cmp	r7, #0
 8004378:	d0a9      	beq.n	80042ce <__sflush_r+0x1a>
 800437a:	0793      	lsls	r3, r2, #30
 800437c:	680e      	ldr	r6, [r1, #0]
 800437e:	bf08      	it	eq
 8004380:	694b      	ldreq	r3, [r1, #20]
 8004382:	600f      	str	r7, [r1, #0]
 8004384:	bf18      	it	ne
 8004386:	2300      	movne	r3, #0
 8004388:	eba6 0807 	sub.w	r8, r6, r7
 800438c:	608b      	str	r3, [r1, #8]
 800438e:	f1b8 0f00 	cmp.w	r8, #0
 8004392:	dd9c      	ble.n	80042ce <__sflush_r+0x1a>
 8004394:	6a21      	ldr	r1, [r4, #32]
 8004396:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004398:	4643      	mov	r3, r8
 800439a:	463a      	mov	r2, r7
 800439c:	4628      	mov	r0, r5
 800439e:	47b0      	blx	r6
 80043a0:	2800      	cmp	r0, #0
 80043a2:	dc06      	bgt.n	80043b2 <__sflush_r+0xfe>
 80043a4:	89a3      	ldrh	r3, [r4, #12]
 80043a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043aa:	81a3      	strh	r3, [r4, #12]
 80043ac:	f04f 30ff 	mov.w	r0, #4294967295
 80043b0:	e78e      	b.n	80042d0 <__sflush_r+0x1c>
 80043b2:	4407      	add	r7, r0
 80043b4:	eba8 0800 	sub.w	r8, r8, r0
 80043b8:	e7e9      	b.n	800438e <__sflush_r+0xda>
 80043ba:	bf00      	nop
 80043bc:	dfbffffe 	.word	0xdfbffffe

080043c0 <_fflush_r>:
 80043c0:	b538      	push	{r3, r4, r5, lr}
 80043c2:	690b      	ldr	r3, [r1, #16]
 80043c4:	4605      	mov	r5, r0
 80043c6:	460c      	mov	r4, r1
 80043c8:	b913      	cbnz	r3, 80043d0 <_fflush_r+0x10>
 80043ca:	2500      	movs	r5, #0
 80043cc:	4628      	mov	r0, r5
 80043ce:	bd38      	pop	{r3, r4, r5, pc}
 80043d0:	b118      	cbz	r0, 80043da <_fflush_r+0x1a>
 80043d2:	6a03      	ldr	r3, [r0, #32]
 80043d4:	b90b      	cbnz	r3, 80043da <_fflush_r+0x1a>
 80043d6:	f7ff f9ab 	bl	8003730 <__sinit>
 80043da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d0f3      	beq.n	80043ca <_fflush_r+0xa>
 80043e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80043e4:	07d0      	lsls	r0, r2, #31
 80043e6:	d404      	bmi.n	80043f2 <_fflush_r+0x32>
 80043e8:	0599      	lsls	r1, r3, #22
 80043ea:	d402      	bmi.n	80043f2 <_fflush_r+0x32>
 80043ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043ee:	f7ff fb93 	bl	8003b18 <__retarget_lock_acquire_recursive>
 80043f2:	4628      	mov	r0, r5
 80043f4:	4621      	mov	r1, r4
 80043f6:	f7ff ff5d 	bl	80042b4 <__sflush_r>
 80043fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043fc:	07da      	lsls	r2, r3, #31
 80043fe:	4605      	mov	r5, r0
 8004400:	d4e4      	bmi.n	80043cc <_fflush_r+0xc>
 8004402:	89a3      	ldrh	r3, [r4, #12]
 8004404:	059b      	lsls	r3, r3, #22
 8004406:	d4e1      	bmi.n	80043cc <_fflush_r+0xc>
 8004408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800440a:	f7ff fb86 	bl	8003b1a <__retarget_lock_release_recursive>
 800440e:	e7dd      	b.n	80043cc <_fflush_r+0xc>

08004410 <__swhatbuf_r>:
 8004410:	b570      	push	{r4, r5, r6, lr}
 8004412:	460c      	mov	r4, r1
 8004414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004418:	2900      	cmp	r1, #0
 800441a:	b096      	sub	sp, #88	; 0x58
 800441c:	4615      	mov	r5, r2
 800441e:	461e      	mov	r6, r3
 8004420:	da0d      	bge.n	800443e <__swhatbuf_r+0x2e>
 8004422:	89a3      	ldrh	r3, [r4, #12]
 8004424:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004428:	f04f 0100 	mov.w	r1, #0
 800442c:	bf0c      	ite	eq
 800442e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004432:	2340      	movne	r3, #64	; 0x40
 8004434:	2000      	movs	r0, #0
 8004436:	6031      	str	r1, [r6, #0]
 8004438:	602b      	str	r3, [r5, #0]
 800443a:	b016      	add	sp, #88	; 0x58
 800443c:	bd70      	pop	{r4, r5, r6, pc}
 800443e:	466a      	mov	r2, sp
 8004440:	f000 f848 	bl	80044d4 <_fstat_r>
 8004444:	2800      	cmp	r0, #0
 8004446:	dbec      	blt.n	8004422 <__swhatbuf_r+0x12>
 8004448:	9901      	ldr	r1, [sp, #4]
 800444a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800444e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004452:	4259      	negs	r1, r3
 8004454:	4159      	adcs	r1, r3
 8004456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800445a:	e7eb      	b.n	8004434 <__swhatbuf_r+0x24>

0800445c <__smakebuf_r>:
 800445c:	898b      	ldrh	r3, [r1, #12]
 800445e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004460:	079d      	lsls	r5, r3, #30
 8004462:	4606      	mov	r6, r0
 8004464:	460c      	mov	r4, r1
 8004466:	d507      	bpl.n	8004478 <__smakebuf_r+0x1c>
 8004468:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800446c:	6023      	str	r3, [r4, #0]
 800446e:	6123      	str	r3, [r4, #16]
 8004470:	2301      	movs	r3, #1
 8004472:	6163      	str	r3, [r4, #20]
 8004474:	b002      	add	sp, #8
 8004476:	bd70      	pop	{r4, r5, r6, pc}
 8004478:	ab01      	add	r3, sp, #4
 800447a:	466a      	mov	r2, sp
 800447c:	f7ff ffc8 	bl	8004410 <__swhatbuf_r>
 8004480:	9900      	ldr	r1, [sp, #0]
 8004482:	4605      	mov	r5, r0
 8004484:	4630      	mov	r0, r6
 8004486:	f7ff fbb5 	bl	8003bf4 <_malloc_r>
 800448a:	b948      	cbnz	r0, 80044a0 <__smakebuf_r+0x44>
 800448c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004490:	059a      	lsls	r2, r3, #22
 8004492:	d4ef      	bmi.n	8004474 <__smakebuf_r+0x18>
 8004494:	f023 0303 	bic.w	r3, r3, #3
 8004498:	f043 0302 	orr.w	r3, r3, #2
 800449c:	81a3      	strh	r3, [r4, #12]
 800449e:	e7e3      	b.n	8004468 <__smakebuf_r+0xc>
 80044a0:	89a3      	ldrh	r3, [r4, #12]
 80044a2:	6020      	str	r0, [r4, #0]
 80044a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044a8:	81a3      	strh	r3, [r4, #12]
 80044aa:	9b00      	ldr	r3, [sp, #0]
 80044ac:	6163      	str	r3, [r4, #20]
 80044ae:	9b01      	ldr	r3, [sp, #4]
 80044b0:	6120      	str	r0, [r4, #16]
 80044b2:	b15b      	cbz	r3, 80044cc <__smakebuf_r+0x70>
 80044b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044b8:	4630      	mov	r0, r6
 80044ba:	f000 f81d 	bl	80044f8 <_isatty_r>
 80044be:	b128      	cbz	r0, 80044cc <__smakebuf_r+0x70>
 80044c0:	89a3      	ldrh	r3, [r4, #12]
 80044c2:	f023 0303 	bic.w	r3, r3, #3
 80044c6:	f043 0301 	orr.w	r3, r3, #1
 80044ca:	81a3      	strh	r3, [r4, #12]
 80044cc:	89a3      	ldrh	r3, [r4, #12]
 80044ce:	431d      	orrs	r5, r3
 80044d0:	81a5      	strh	r5, [r4, #12]
 80044d2:	e7cf      	b.n	8004474 <__smakebuf_r+0x18>

080044d4 <_fstat_r>:
 80044d4:	b538      	push	{r3, r4, r5, lr}
 80044d6:	4d07      	ldr	r5, [pc, #28]	; (80044f4 <_fstat_r+0x20>)
 80044d8:	2300      	movs	r3, #0
 80044da:	4604      	mov	r4, r0
 80044dc:	4608      	mov	r0, r1
 80044de:	4611      	mov	r1, r2
 80044e0:	602b      	str	r3, [r5, #0]
 80044e2:	f7fc fb34 	bl	8000b4e <_fstat>
 80044e6:	1c43      	adds	r3, r0, #1
 80044e8:	d102      	bne.n	80044f0 <_fstat_r+0x1c>
 80044ea:	682b      	ldr	r3, [r5, #0]
 80044ec:	b103      	cbz	r3, 80044f0 <_fstat_r+0x1c>
 80044ee:	6023      	str	r3, [r4, #0]
 80044f0:	bd38      	pop	{r3, r4, r5, pc}
 80044f2:	bf00      	nop
 80044f4:	20000294 	.word	0x20000294

080044f8 <_isatty_r>:
 80044f8:	b538      	push	{r3, r4, r5, lr}
 80044fa:	4d06      	ldr	r5, [pc, #24]	; (8004514 <_isatty_r+0x1c>)
 80044fc:	2300      	movs	r3, #0
 80044fe:	4604      	mov	r4, r0
 8004500:	4608      	mov	r0, r1
 8004502:	602b      	str	r3, [r5, #0]
 8004504:	f7fc fb33 	bl	8000b6e <_isatty>
 8004508:	1c43      	adds	r3, r0, #1
 800450a:	d102      	bne.n	8004512 <_isatty_r+0x1a>
 800450c:	682b      	ldr	r3, [r5, #0]
 800450e:	b103      	cbz	r3, 8004512 <_isatty_r+0x1a>
 8004510:	6023      	str	r3, [r4, #0]
 8004512:	bd38      	pop	{r3, r4, r5, pc}
 8004514:	20000294 	.word	0x20000294

08004518 <_sbrk_r>:
 8004518:	b538      	push	{r3, r4, r5, lr}
 800451a:	4d06      	ldr	r5, [pc, #24]	; (8004534 <_sbrk_r+0x1c>)
 800451c:	2300      	movs	r3, #0
 800451e:	4604      	mov	r4, r0
 8004520:	4608      	mov	r0, r1
 8004522:	602b      	str	r3, [r5, #0]
 8004524:	f7fc fb3c 	bl	8000ba0 <_sbrk>
 8004528:	1c43      	adds	r3, r0, #1
 800452a:	d102      	bne.n	8004532 <_sbrk_r+0x1a>
 800452c:	682b      	ldr	r3, [r5, #0]
 800452e:	b103      	cbz	r3, 8004532 <_sbrk_r+0x1a>
 8004530:	6023      	str	r3, [r4, #0]
 8004532:	bd38      	pop	{r3, r4, r5, pc}
 8004534:	20000294 	.word	0x20000294

08004538 <_init>:
 8004538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453a:	bf00      	nop
 800453c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800453e:	bc08      	pop	{r3}
 8004540:	469e      	mov	lr, r3
 8004542:	4770      	bx	lr

08004544 <_fini>:
 8004544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004546:	bf00      	nop
 8004548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800454a:	bc08      	pop	{r3}
 800454c:	469e      	mov	lr, r3
 800454e:	4770      	bx	lr
