
TP_CAN1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006024  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  080061f4  080061f4  000161f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063d8  080063d8  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080063d8  080063d8  000163d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063e0  080063e0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063e0  080063e0  000163e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063e4  080063e4  000163e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080063e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  20000068  08006450  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08006450  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f6a5  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002950  00000000  00000000  0002f780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb8  00000000  00000000  000320d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009cf  00000000  00000000  00032d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000236e8  00000000  00000000  00033757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012743  00000000  00000000  00056e3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf39a  00000000  00000000  00069582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003be0  00000000  00000000  0013891c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0013c4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080061dc 	.word	0x080061dc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	080061dc 	.word	0x080061dc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_ldivmod>:
 80002b0:	b97b      	cbnz	r3, 80002d2 <__aeabi_ldivmod+0x22>
 80002b2:	b972      	cbnz	r2, 80002d2 <__aeabi_ldivmod+0x22>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bfbe      	ittt	lt
 80002b8:	2000      	movlt	r0, #0
 80002ba:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002be:	e006      	blt.n	80002ce <__aeabi_ldivmod+0x1e>
 80002c0:	bf08      	it	eq
 80002c2:	2800      	cmpeq	r0, #0
 80002c4:	bf1c      	itt	ne
 80002c6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002ca:	f04f 30ff 	movne.w	r0, #4294967295
 80002ce:	f000 b9bb 	b.w	8000648 <__aeabi_idiv0>
 80002d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002da:	2900      	cmp	r1, #0
 80002dc:	db09      	blt.n	80002f2 <__aeabi_ldivmod+0x42>
 80002de:	2b00      	cmp	r3, #0
 80002e0:	db1a      	blt.n	8000318 <__aeabi_ldivmod+0x68>
 80002e2:	f000 f84d 	bl	8000380 <__udivmoddi4>
 80002e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ee:	b004      	add	sp, #16
 80002f0:	4770      	bx	lr
 80002f2:	4240      	negs	r0, r0
 80002f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	db1b      	blt.n	8000334 <__aeabi_ldivmod+0x84>
 80002fc:	f000 f840 	bl	8000380 <__udivmoddi4>
 8000300:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000308:	b004      	add	sp, #16
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	4252      	negs	r2, r2
 8000312:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000316:	4770      	bx	lr
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	f000 f82f 	bl	8000380 <__udivmoddi4>
 8000322:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032a:	b004      	add	sp, #16
 800032c:	4240      	negs	r0, r0
 800032e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000332:	4770      	bx	lr
 8000334:	4252      	negs	r2, r2
 8000336:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033a:	f000 f821 	bl	8000380 <__udivmoddi4>
 800033e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000342:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000346:	b004      	add	sp, #16
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	4770      	bx	lr

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295
 8000360:	f04f 30ff 	movne.w	r0, #4294967295
 8000364:	f000 b970 	b.w	8000648 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9e08      	ldr	r6, [sp, #32]
 8000386:	460d      	mov	r5, r1
 8000388:	4604      	mov	r4, r0
 800038a:	460f      	mov	r7, r1
 800038c:	2b00      	cmp	r3, #0
 800038e:	d14a      	bne.n	8000426 <__udivmoddi4+0xa6>
 8000390:	428a      	cmp	r2, r1
 8000392:	4694      	mov	ip, r2
 8000394:	d965      	bls.n	8000462 <__udivmoddi4+0xe2>
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	b143      	cbz	r3, 80003ae <__udivmoddi4+0x2e>
 800039c:	fa02 fc03 	lsl.w	ip, r2, r3
 80003a0:	f1c3 0220 	rsb	r2, r3, #32
 80003a4:	409f      	lsls	r7, r3
 80003a6:	fa20 f202 	lsr.w	r2, r0, r2
 80003aa:	4317      	orrs	r7, r2
 80003ac:	409c      	lsls	r4, r3
 80003ae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003b2:	fa1f f58c 	uxth.w	r5, ip
 80003b6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ba:	0c22      	lsrs	r2, r4, #16
 80003bc:	fb0e 7711 	mls	r7, lr, r1, r7
 80003c0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003c4:	fb01 f005 	mul.w	r0, r1, r5
 80003c8:	4290      	cmp	r0, r2
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x62>
 80003cc:	eb1c 0202 	adds.w	r2, ip, r2
 80003d0:	f101 37ff 	add.w	r7, r1, #4294967295
 80003d4:	f080 811c 	bcs.w	8000610 <__udivmoddi4+0x290>
 80003d8:	4290      	cmp	r0, r2
 80003da:	f240 8119 	bls.w	8000610 <__udivmoddi4+0x290>
 80003de:	3902      	subs	r1, #2
 80003e0:	4462      	add	r2, ip
 80003e2:	1a12      	subs	r2, r2, r0
 80003e4:	b2a4      	uxth	r4, r4
 80003e6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ea:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f2:	fb00 f505 	mul.w	r5, r0, r5
 80003f6:	42a5      	cmp	r5, r4
 80003f8:	d90a      	bls.n	8000410 <__udivmoddi4+0x90>
 80003fa:	eb1c 0404 	adds.w	r4, ip, r4
 80003fe:	f100 32ff 	add.w	r2, r0, #4294967295
 8000402:	f080 8107 	bcs.w	8000614 <__udivmoddi4+0x294>
 8000406:	42a5      	cmp	r5, r4
 8000408:	f240 8104 	bls.w	8000614 <__udivmoddi4+0x294>
 800040c:	4464      	add	r4, ip
 800040e:	3802      	subs	r0, #2
 8000410:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000414:	1b64      	subs	r4, r4, r5
 8000416:	2100      	movs	r1, #0
 8000418:	b11e      	cbz	r6, 8000422 <__udivmoddi4+0xa2>
 800041a:	40dc      	lsrs	r4, r3
 800041c:	2300      	movs	r3, #0
 800041e:	e9c6 4300 	strd	r4, r3, [r6]
 8000422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000426:	428b      	cmp	r3, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0xbc>
 800042a:	2e00      	cmp	r6, #0
 800042c:	f000 80ed 	beq.w	800060a <__udivmoddi4+0x28a>
 8000430:	2100      	movs	r1, #0
 8000432:	e9c6 0500 	strd	r0, r5, [r6]
 8000436:	4608      	mov	r0, r1
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	fab3 f183 	clz	r1, r3
 8000440:	2900      	cmp	r1, #0
 8000442:	d149      	bne.n	80004d8 <__udivmoddi4+0x158>
 8000444:	42ab      	cmp	r3, r5
 8000446:	d302      	bcc.n	800044e <__udivmoddi4+0xce>
 8000448:	4282      	cmp	r2, r0
 800044a:	f200 80f8 	bhi.w	800063e <__udivmoddi4+0x2be>
 800044e:	1a84      	subs	r4, r0, r2
 8000450:	eb65 0203 	sbc.w	r2, r5, r3
 8000454:	2001      	movs	r0, #1
 8000456:	4617      	mov	r7, r2
 8000458:	2e00      	cmp	r6, #0
 800045a:	d0e2      	beq.n	8000422 <__udivmoddi4+0xa2>
 800045c:	e9c6 4700 	strd	r4, r7, [r6]
 8000460:	e7df      	b.n	8000422 <__udivmoddi4+0xa2>
 8000462:	b902      	cbnz	r2, 8000466 <__udivmoddi4+0xe6>
 8000464:	deff      	udf	#255	; 0xff
 8000466:	fab2 f382 	clz	r3, r2
 800046a:	2b00      	cmp	r3, #0
 800046c:	f040 8090 	bne.w	8000590 <__udivmoddi4+0x210>
 8000470:	1a8a      	subs	r2, r1, r2
 8000472:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000476:	fa1f fe8c 	uxth.w	lr, ip
 800047a:	2101      	movs	r1, #1
 800047c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000480:	fb07 2015 	mls	r0, r7, r5, r2
 8000484:	0c22      	lsrs	r2, r4, #16
 8000486:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800048a:	fb0e f005 	mul.w	r0, lr, r5
 800048e:	4290      	cmp	r0, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x124>
 8000492:	eb1c 0202 	adds.w	r2, ip, r2
 8000496:	f105 38ff 	add.w	r8, r5, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0x122>
 800049c:	4290      	cmp	r0, r2
 800049e:	f200 80cb 	bhi.w	8000638 <__udivmoddi4+0x2b8>
 80004a2:	4645      	mov	r5, r8
 80004a4:	1a12      	subs	r2, r2, r0
 80004a6:	b2a4      	uxth	r4, r4
 80004a8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ac:	fb07 2210 	mls	r2, r7, r0, r2
 80004b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004b4:	fb0e fe00 	mul.w	lr, lr, r0
 80004b8:	45a6      	cmp	lr, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x14e>
 80004bc:	eb1c 0404 	adds.w	r4, ip, r4
 80004c0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x14c>
 80004c6:	45a6      	cmp	lr, r4
 80004c8:	f200 80bb 	bhi.w	8000642 <__udivmoddi4+0x2c2>
 80004cc:	4610      	mov	r0, r2
 80004ce:	eba4 040e 	sub.w	r4, r4, lr
 80004d2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004d6:	e79f      	b.n	8000418 <__udivmoddi4+0x98>
 80004d8:	f1c1 0720 	rsb	r7, r1, #32
 80004dc:	408b      	lsls	r3, r1
 80004de:	fa22 fc07 	lsr.w	ip, r2, r7
 80004e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004e6:	fa05 f401 	lsl.w	r4, r5, r1
 80004ea:	fa20 f307 	lsr.w	r3, r0, r7
 80004ee:	40fd      	lsrs	r5, r7
 80004f0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004f4:	4323      	orrs	r3, r4
 80004f6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004fa:	fa1f fe8c 	uxth.w	lr, ip
 80004fe:	fb09 5518 	mls	r5, r9, r8, r5
 8000502:	0c1c      	lsrs	r4, r3, #16
 8000504:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000508:	fb08 f50e 	mul.w	r5, r8, lr
 800050c:	42a5      	cmp	r5, r4
 800050e:	fa02 f201 	lsl.w	r2, r2, r1
 8000512:	fa00 f001 	lsl.w	r0, r0, r1
 8000516:	d90b      	bls.n	8000530 <__udivmoddi4+0x1b0>
 8000518:	eb1c 0404 	adds.w	r4, ip, r4
 800051c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000520:	f080 8088 	bcs.w	8000634 <__udivmoddi4+0x2b4>
 8000524:	42a5      	cmp	r5, r4
 8000526:	f240 8085 	bls.w	8000634 <__udivmoddi4+0x2b4>
 800052a:	f1a8 0802 	sub.w	r8, r8, #2
 800052e:	4464      	add	r4, ip
 8000530:	1b64      	subs	r4, r4, r5
 8000532:	b29d      	uxth	r5, r3
 8000534:	fbb4 f3f9 	udiv	r3, r4, r9
 8000538:	fb09 4413 	mls	r4, r9, r3, r4
 800053c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000540:	fb03 fe0e 	mul.w	lr, r3, lr
 8000544:	45a6      	cmp	lr, r4
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x1da>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000550:	d26c      	bcs.n	800062c <__udivmoddi4+0x2ac>
 8000552:	45a6      	cmp	lr, r4
 8000554:	d96a      	bls.n	800062c <__udivmoddi4+0x2ac>
 8000556:	3b02      	subs	r3, #2
 8000558:	4464      	add	r4, ip
 800055a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800055e:	fba3 9502 	umull	r9, r5, r3, r2
 8000562:	eba4 040e 	sub.w	r4, r4, lr
 8000566:	42ac      	cmp	r4, r5
 8000568:	46c8      	mov	r8, r9
 800056a:	46ae      	mov	lr, r5
 800056c:	d356      	bcc.n	800061c <__udivmoddi4+0x29c>
 800056e:	d053      	beq.n	8000618 <__udivmoddi4+0x298>
 8000570:	b156      	cbz	r6, 8000588 <__udivmoddi4+0x208>
 8000572:	ebb0 0208 	subs.w	r2, r0, r8
 8000576:	eb64 040e 	sbc.w	r4, r4, lr
 800057a:	fa04 f707 	lsl.w	r7, r4, r7
 800057e:	40ca      	lsrs	r2, r1
 8000580:	40cc      	lsrs	r4, r1
 8000582:	4317      	orrs	r7, r2
 8000584:	e9c6 7400 	strd	r7, r4, [r6]
 8000588:	4618      	mov	r0, r3
 800058a:	2100      	movs	r1, #0
 800058c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000590:	f1c3 0120 	rsb	r1, r3, #32
 8000594:	fa02 fc03 	lsl.w	ip, r2, r3
 8000598:	fa20 f201 	lsr.w	r2, r0, r1
 800059c:	fa25 f101 	lsr.w	r1, r5, r1
 80005a0:	409d      	lsls	r5, r3
 80005a2:	432a      	orrs	r2, r5
 80005a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005a8:	fa1f fe8c 	uxth.w	lr, ip
 80005ac:	fbb1 f0f7 	udiv	r0, r1, r7
 80005b0:	fb07 1510 	mls	r5, r7, r0, r1
 80005b4:	0c11      	lsrs	r1, r2, #16
 80005b6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ba:	fb00 f50e 	mul.w	r5, r0, lr
 80005be:	428d      	cmp	r5, r1
 80005c0:	fa04 f403 	lsl.w	r4, r4, r3
 80005c4:	d908      	bls.n	80005d8 <__udivmoddi4+0x258>
 80005c6:	eb1c 0101 	adds.w	r1, ip, r1
 80005ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80005ce:	d22f      	bcs.n	8000630 <__udivmoddi4+0x2b0>
 80005d0:	428d      	cmp	r5, r1
 80005d2:	d92d      	bls.n	8000630 <__udivmoddi4+0x2b0>
 80005d4:	3802      	subs	r0, #2
 80005d6:	4461      	add	r1, ip
 80005d8:	1b49      	subs	r1, r1, r5
 80005da:	b292      	uxth	r2, r2
 80005dc:	fbb1 f5f7 	udiv	r5, r1, r7
 80005e0:	fb07 1115 	mls	r1, r7, r5, r1
 80005e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005e8:	fb05 f10e 	mul.w	r1, r5, lr
 80005ec:	4291      	cmp	r1, r2
 80005ee:	d908      	bls.n	8000602 <__udivmoddi4+0x282>
 80005f0:	eb1c 0202 	adds.w	r2, ip, r2
 80005f4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005f8:	d216      	bcs.n	8000628 <__udivmoddi4+0x2a8>
 80005fa:	4291      	cmp	r1, r2
 80005fc:	d914      	bls.n	8000628 <__udivmoddi4+0x2a8>
 80005fe:	3d02      	subs	r5, #2
 8000600:	4462      	add	r2, ip
 8000602:	1a52      	subs	r2, r2, r1
 8000604:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000608:	e738      	b.n	800047c <__udivmoddi4+0xfc>
 800060a:	4631      	mov	r1, r6
 800060c:	4630      	mov	r0, r6
 800060e:	e708      	b.n	8000422 <__udivmoddi4+0xa2>
 8000610:	4639      	mov	r1, r7
 8000612:	e6e6      	b.n	80003e2 <__udivmoddi4+0x62>
 8000614:	4610      	mov	r0, r2
 8000616:	e6fb      	b.n	8000410 <__udivmoddi4+0x90>
 8000618:	4548      	cmp	r0, r9
 800061a:	d2a9      	bcs.n	8000570 <__udivmoddi4+0x1f0>
 800061c:	ebb9 0802 	subs.w	r8, r9, r2
 8000620:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000624:	3b01      	subs	r3, #1
 8000626:	e7a3      	b.n	8000570 <__udivmoddi4+0x1f0>
 8000628:	4645      	mov	r5, r8
 800062a:	e7ea      	b.n	8000602 <__udivmoddi4+0x282>
 800062c:	462b      	mov	r3, r5
 800062e:	e794      	b.n	800055a <__udivmoddi4+0x1da>
 8000630:	4640      	mov	r0, r8
 8000632:	e7d1      	b.n	80005d8 <__udivmoddi4+0x258>
 8000634:	46d0      	mov	r8, sl
 8000636:	e77b      	b.n	8000530 <__udivmoddi4+0x1b0>
 8000638:	3d02      	subs	r5, #2
 800063a:	4462      	add	r2, ip
 800063c:	e732      	b.n	80004a4 <__udivmoddi4+0x124>
 800063e:	4608      	mov	r0, r1
 8000640:	e70a      	b.n	8000458 <__udivmoddi4+0xd8>
 8000642:	4464      	add	r4, ip
 8000644:	3802      	subs	r0, #2
 8000646:	e742      	b.n	80004ce <__udivmoddi4+0x14e>

08000648 <__aeabi_idiv0>:
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop

0800064c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000650:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <MX_CAN1_Init+0x64>)
 8000652:	4a18      	ldr	r2, [pc, #96]	; (80006b4 <MX_CAN1_Init+0x68>)
 8000654:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8000656:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <MX_CAN1_Init+0x64>)
 8000658:	220c      	movs	r2, #12
 800065a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800065c:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <MX_CAN1_Init+0x64>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000662:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <MX_CAN1_Init+0x64>)
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_CAN1_Init+0x64>)
 800066a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800066e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000670:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <MX_CAN1_Init+0x64>)
 8000672:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000676:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000678:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <MX_CAN1_Init+0x64>)
 800067a:	2200      	movs	r2, #0
 800067c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_CAN1_Init+0x64>)
 8000680:	2200      	movs	r2, #0
 8000682:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000684:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <MX_CAN1_Init+0x64>)
 8000686:	2200      	movs	r2, #0
 8000688:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800068a:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_CAN1_Init+0x64>)
 800068c:	2200      	movs	r2, #0
 800068e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000690:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <MX_CAN1_Init+0x64>)
 8000692:	2200      	movs	r2, #0
 8000694:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000696:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_CAN1_Init+0x64>)
 8000698:	2200      	movs	r2, #0
 800069a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800069c:	4804      	ldr	r0, [pc, #16]	; (80006b0 <MX_CAN1_Init+0x64>)
 800069e:	f001 fa9b 	bl	8001bd8 <HAL_CAN_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80006a8:	f000 ffd4 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000084 	.word	0x20000084
 80006b4:	40006400 	.word	0x40006400

080006b8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08a      	sub	sp, #40	; 0x28
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a19      	ldr	r2, [pc, #100]	; (800073c <HAL_CAN_MspInit+0x84>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d12c      	bne.n	8000734 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	613b      	str	r3, [r7, #16]
 80006de:	4b18      	ldr	r3, [pc, #96]	; (8000740 <HAL_CAN_MspInit+0x88>)
 80006e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e2:	4a17      	ldr	r2, [pc, #92]	; (8000740 <HAL_CAN_MspInit+0x88>)
 80006e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006e8:	6413      	str	r3, [r2, #64]	; 0x40
 80006ea:	4b15      	ldr	r3, [pc, #84]	; (8000740 <HAL_CAN_MspInit+0x88>)
 80006ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	4b11      	ldr	r3, [pc, #68]	; (8000740 <HAL_CAN_MspInit+0x88>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a10      	ldr	r2, [pc, #64]	; (8000740 <HAL_CAN_MspInit+0x88>)
 8000700:	f043 0302 	orr.w	r3, r3, #2
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <HAL_CAN_MspInit+0x88>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0302 	and.w	r3, r3, #2
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000712:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000718:	2302      	movs	r3, #2
 800071a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000720:	2303      	movs	r3, #3
 8000722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000724:	2309      	movs	r3, #9
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	4619      	mov	r1, r3
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <HAL_CAN_MspInit+0x8c>)
 8000730:	f001 fe10 	bl	8002354 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000734:	bf00      	nop
 8000736:	3728      	adds	r7, #40	; 0x28
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40006400 	.word	0x40006400
 8000740:	40023800 	.word	0x40023800
 8000744:	40020400 	.word	0x40020400

08000748 <BMP280_check>:
int16_t dig_P8;
int16_t dig_P9;

BMP280_S32_t t_fine;

int BMP280_check() {
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af02      	add	r7, sp, #8
	uint8_t buf[1];
	HAL_StatusTypeDef ret;
	buf[0] = BMP280_ID_REG;
 800074e:	23d0      	movs	r3, #208	; 0xd0
 8000750:	713b      	strb	r3, [r7, #4]

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 8000752:	23ee      	movs	r3, #238	; 0xee
 8000754:	b299      	uxth	r1, r3
 8000756:	1d3a      	adds	r2, r7, #4
 8000758:	f04f 33ff 	mov.w	r3, #4294967295
 800075c:	9300      	str	r3, [sp, #0]
 800075e:	2301      	movs	r3, #1
 8000760:	4819      	ldr	r0, [pc, #100]	; (80007c8 <BMP280_check+0x80>)
 8000762:	f002 f8e9 	bl	8002938 <HAL_I2C_Master_Transmit>
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
	if (ret != 0) {
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d002      	beq.n	8000776 <BMP280_check+0x2e>
		printf("Problem with check (I2C Transmit)\r\n");
 8000770:	4816      	ldr	r0, [pc, #88]	; (80007cc <BMP280_check+0x84>)
 8000772:	f004 ff65 	bl	8005640 <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, BMP280_ID_LEN,
 8000776:	23ee      	movs	r3, #238	; 0xee
 8000778:	b299      	uxth	r1, r3
 800077a:	2301      	movs	r3, #1
 800077c:	b29b      	uxth	r3, r3
 800077e:	1d3a      	adds	r2, r7, #4
 8000780:	f04f 30ff 	mov.w	r0, #4294967295
 8000784:	9000      	str	r0, [sp, #0]
 8000786:	4810      	ldr	r0, [pc, #64]	; (80007c8 <BMP280_check+0x80>)
 8000788:	f002 f9d4 	bl	8002b34 <HAL_I2C_Master_Receive>
 800078c:	4603      	mov	r3, r0
 800078e:	71fb      	strb	r3, [r7, #7]
			HAL_MAX_DELAY);
	if (ret != 0) {
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d002      	beq.n	800079c <BMP280_check+0x54>
		printf("Problem with check (I2C Receive) \r\n");
 8000796:	480e      	ldr	r0, [pc, #56]	; (80007d0 <BMP280_check+0x88>)
 8000798:	f004 ff52 	bl	8005640 <puts>
	}

	printf("Id: 0x%x...", buf[0]);
 800079c:	793b      	ldrb	r3, [r7, #4]
 800079e:	4619      	mov	r1, r3
 80007a0:	480c      	ldr	r0, [pc, #48]	; (80007d4 <BMP280_check+0x8c>)
 80007a2:	f004 fee7 	bl	8005574 <iprintf>
	if (buf[0] == BMP280_ID_VAL) {
 80007a6:	793b      	ldrb	r3, [r7, #4]
 80007a8:	2258      	movs	r2, #88	; 0x58
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d104      	bne.n	80007b8 <BMP280_check+0x70>
		printf("Ok\r\n");
 80007ae:	480a      	ldr	r0, [pc, #40]	; (80007d8 <BMP280_check+0x90>)
 80007b0:	f004 ff46 	bl	8005640 <puts>
		return 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	e003      	b.n	80007c0 <BMP280_check+0x78>
	} else {
		printf("not Ok!\r\n");
 80007b8:	4808      	ldr	r0, [pc, #32]	; (80007dc <BMP280_check+0x94>)
 80007ba:	f004 ff41 	bl	8005640 <puts>
		return 1;
 80007be:	2301      	movs	r3, #1
	}
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	200000c8 	.word	0x200000c8
 80007cc:	080061f4 	.word	0x080061f4
 80007d0:	08006218 	.word	0x08006218
 80007d4:	0800623c 	.word	0x0800623c
 80007d8:	08006248 	.word	0x08006248
 80007dc:	0800624c 	.word	0x0800624c

080007e0 <BMP280_init>:

int BMP280_init() {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret;
	uint8_t ctrl = (0b010 << 5) | (0b101 << 2) | (0b11);
 80007e6:	2357      	movs	r3, #87	; 0x57
 80007e8:	73fb      	strb	r3, [r7, #15]
	/* 				osr_t x2       osr_p x16       normal mode   */

    uint8_t *calibration_data = BMP280_Read_Reg(BMP280_TRIM_REG_MSB, BMP280_TRIM_LEN);
 80007ea:	2388      	movs	r3, #136	; 0x88
 80007ec:	2218      	movs	r2, #24
 80007ee:	4611      	mov	r1, r2
 80007f0:	4618      	mov	r0, r3
 80007f2:	f000 f91f 	bl	8000a34 <BMP280_Read_Reg>
 80007f6:	60b8      	str	r0, [r7, #8]

	dig_T1 = (uint16_t)(((uint16_t)calibration_data[1] << 8) | calibration_data[0]);
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	3301      	adds	r3, #1
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	021b      	lsls	r3, r3, #8
 8000800:	b21a      	sxth	r2, r3
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	b21b      	sxth	r3, r3
 8000808:	4313      	orrs	r3, r2
 800080a:	b21b      	sxth	r3, r3
 800080c:	b29a      	uxth	r2, r3
 800080e:	4b58      	ldr	r3, [pc, #352]	; (8000970 <BMP280_init+0x190>)
 8000810:	801a      	strh	r2, [r3, #0]
	dig_T2 = (int16_t)(((int16_t)calibration_data[3] << 8) | calibration_data[2]);
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	3303      	adds	r3, #3
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	021b      	lsls	r3, r3, #8
 800081a:	b21a      	sxth	r2, r3
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	3302      	adds	r3, #2
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	b21b      	sxth	r3, r3
 8000824:	4313      	orrs	r3, r2
 8000826:	b21a      	sxth	r2, r3
 8000828:	4b52      	ldr	r3, [pc, #328]	; (8000974 <BMP280_init+0x194>)
 800082a:	801a      	strh	r2, [r3, #0]
	dig_T3 = (int16_t)(((int16_t)calibration_data[5] << 8) | calibration_data[4]);
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	3305      	adds	r3, #5
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	021b      	lsls	r3, r3, #8
 8000834:	b21a      	sxth	r2, r3
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	3304      	adds	r3, #4
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	b21b      	sxth	r3, r3
 800083e:	4313      	orrs	r3, r2
 8000840:	b21a      	sxth	r2, r3
 8000842:	4b4d      	ldr	r3, [pc, #308]	; (8000978 <BMP280_init+0x198>)
 8000844:	801a      	strh	r2, [r3, #0]

    dig_P1 = (uint16_t)(((uint16_t)calibration_data[7] << 8) | calibration_data[6]);
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	3307      	adds	r3, #7
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	021b      	lsls	r3, r3, #8
 800084e:	b21a      	sxth	r2, r3
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	3306      	adds	r3, #6
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	b21b      	sxth	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	b21b      	sxth	r3, r3
 800085c:	b29a      	uxth	r2, r3
 800085e:	4b47      	ldr	r3, [pc, #284]	; (800097c <BMP280_init+0x19c>)
 8000860:	801a      	strh	r2, [r3, #0]
    dig_P2 = (int16_t)(((int16_t)calibration_data[9] << 8) | calibration_data[8]);
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	3309      	adds	r3, #9
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	021b      	lsls	r3, r3, #8
 800086a:	b21a      	sxth	r2, r3
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	3308      	adds	r3, #8
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	b21b      	sxth	r3, r3
 8000874:	4313      	orrs	r3, r2
 8000876:	b21a      	sxth	r2, r3
 8000878:	4b41      	ldr	r3, [pc, #260]	; (8000980 <BMP280_init+0x1a0>)
 800087a:	801a      	strh	r2, [r3, #0]
    dig_P3 = (int16_t)(((int16_t)calibration_data[11] << 8) | calibration_data[10]);
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	330b      	adds	r3, #11
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	021b      	lsls	r3, r3, #8
 8000884:	b21a      	sxth	r2, r3
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	330a      	adds	r3, #10
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	b21b      	sxth	r3, r3
 800088e:	4313      	orrs	r3, r2
 8000890:	b21a      	sxth	r2, r3
 8000892:	4b3c      	ldr	r3, [pc, #240]	; (8000984 <BMP280_init+0x1a4>)
 8000894:	801a      	strh	r2, [r3, #0]
    dig_P4 = (int16_t)(((int16_t)calibration_data[13] << 8) | calibration_data[12]);
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	330d      	adds	r3, #13
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	021b      	lsls	r3, r3, #8
 800089e:	b21a      	sxth	r2, r3
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	330c      	adds	r3, #12
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	b21b      	sxth	r3, r3
 80008a8:	4313      	orrs	r3, r2
 80008aa:	b21a      	sxth	r2, r3
 80008ac:	4b36      	ldr	r3, [pc, #216]	; (8000988 <BMP280_init+0x1a8>)
 80008ae:	801a      	strh	r2, [r3, #0]
    dig_P5 = (int16_t)(((int16_t)calibration_data[15] << 8) | calibration_data[14]);
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	330f      	adds	r3, #15
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	021b      	lsls	r3, r3, #8
 80008b8:	b21a      	sxth	r2, r3
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	330e      	adds	r3, #14
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	b21b      	sxth	r3, r3
 80008c2:	4313      	orrs	r3, r2
 80008c4:	b21a      	sxth	r2, r3
 80008c6:	4b31      	ldr	r3, [pc, #196]	; (800098c <BMP280_init+0x1ac>)
 80008c8:	801a      	strh	r2, [r3, #0]
    dig_P6 = (int16_t)(((int16_t)calibration_data[17] << 8) | calibration_data[16]);
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	3311      	adds	r3, #17
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	021b      	lsls	r3, r3, #8
 80008d2:	b21a      	sxth	r2, r3
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	3310      	adds	r3, #16
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	b21b      	sxth	r3, r3
 80008dc:	4313      	orrs	r3, r2
 80008de:	b21a      	sxth	r2, r3
 80008e0:	4b2b      	ldr	r3, [pc, #172]	; (8000990 <BMP280_init+0x1b0>)
 80008e2:	801a      	strh	r2, [r3, #0]
    dig_P7 = (int16_t)(((int16_t)calibration_data[19] << 8) | calibration_data[18]);
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	3313      	adds	r3, #19
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	021b      	lsls	r3, r3, #8
 80008ec:	b21a      	sxth	r2, r3
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	3312      	adds	r3, #18
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	b21b      	sxth	r3, r3
 80008f6:	4313      	orrs	r3, r2
 80008f8:	b21a      	sxth	r2, r3
 80008fa:	4b26      	ldr	r3, [pc, #152]	; (8000994 <BMP280_init+0x1b4>)
 80008fc:	801a      	strh	r2, [r3, #0]
    dig_P8 = (int16_t)(((int16_t)calibration_data[21] << 8) | calibration_data[20]);
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	3315      	adds	r3, #21
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	021b      	lsls	r3, r3, #8
 8000906:	b21a      	sxth	r2, r3
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	3314      	adds	r3, #20
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	b21b      	sxth	r3, r3
 8000910:	4313      	orrs	r3, r2
 8000912:	b21a      	sxth	r2, r3
 8000914:	4b20      	ldr	r3, [pc, #128]	; (8000998 <BMP280_init+0x1b8>)
 8000916:	801a      	strh	r2, [r3, #0]
    dig_P9 = (int16_t)(((int16_t)calibration_data[23] << 8) | calibration_data[22]);
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	3317      	adds	r3, #23
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	021b      	lsls	r3, r3, #8
 8000920:	b21a      	sxth	r2, r3
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	3316      	adds	r3, #22
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	b21b      	sxth	r3, r3
 800092a:	4313      	orrs	r3, r2
 800092c:	b21a      	sxth	r2, r3
 800092e:	4b1b      	ldr	r3, [pc, #108]	; (800099c <BMP280_init+0x1bc>)
 8000930:	801a      	strh	r2, [r3, #0]

	free(calibration_data);
 8000932:	68b8      	ldr	r0, [r7, #8]
 8000934:	f004 fcba 	bl	80052ac <free>

	printf("Configure...\r\n");
 8000938:	4819      	ldr	r0, [pc, #100]	; (80009a0 <BMP280_init+0x1c0>)
 800093a:	f004 fe81 	bl	8005640 <puts>
	ret = BMP280_Write_Reg(BMP280_CTRL_MEAS_REG, ctrl);
 800093e:	22f4      	movs	r2, #244	; 0xf4
 8000940:	7bfb      	ldrb	r3, [r7, #15]
 8000942:	4619      	mov	r1, r3
 8000944:	4610      	mov	r0, r2
 8000946:	f000 f831 	bl	80009ac <BMP280_Write_Reg>
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]
	if (ret == 0) {
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d104      	bne.n	800095e <BMP280_init+0x17e>
		printf("Config Ok\r\n");
 8000954:	4813      	ldr	r0, [pc, #76]	; (80009a4 <BMP280_init+0x1c4>)
 8000956:	f004 fe73 	bl	8005640 <puts>
	} else {
		printf("Config not Ok!\r\n");
		return 1;
	}
	//BMP280_get_trimming();
	return 0;
 800095a:	2300      	movs	r3, #0
 800095c:	e003      	b.n	8000966 <BMP280_init+0x186>
		printf("Config not Ok!\r\n");
 800095e:	4812      	ldr	r0, [pc, #72]	; (80009a8 <BMP280_init+0x1c8>)
 8000960:	f004 fe6e 	bl	8005640 <puts>
		return 1;
 8000964:	2301      	movs	r3, #1
}
 8000966:	4618      	mov	r0, r3
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200000ac 	.word	0x200000ac
 8000974:	200000ae 	.word	0x200000ae
 8000978:	200000b0 	.word	0x200000b0
 800097c:	200000b2 	.word	0x200000b2
 8000980:	200000b4 	.word	0x200000b4
 8000984:	200000b6 	.word	0x200000b6
 8000988:	200000b8 	.word	0x200000b8
 800098c:	200000ba 	.word	0x200000ba
 8000990:	200000bc 	.word	0x200000bc
 8000994:	200000be 	.word	0x200000be
 8000998:	200000c0 	.word	0x200000c0
 800099c:	200000c2 	.word	0x200000c2
 80009a0:	08006258 	.word	0x08006258
 80009a4:	08006268 	.word	0x08006268
 80009a8:	08006274 	.word	0x08006274

080009ac <BMP280_Write_Reg>:

int BMP280_Write_Reg(uint8_t reg, uint8_t value) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af02      	add	r7, sp, #8
 80009b2:	4603      	mov	r3, r0
 80009b4:	460a      	mov	r2, r1
 80009b6:	71fb      	strb	r3, [r7, #7]
 80009b8:	4613      	mov	r3, r2
 80009ba:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[3];
	HAL_StatusTypeDef ret;

	buf[0] = reg;
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	733b      	strb	r3, [r7, #12]
	buf[1] = value;
 80009c0:	79bb      	ldrb	r3, [r7, #6]
 80009c2:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 2, HAL_MAX_DELAY);
 80009c4:	23ee      	movs	r3, #238	; 0xee
 80009c6:	b299      	uxth	r1, r3
 80009c8:	f107 020c 	add.w	r2, r7, #12
 80009cc:	f04f 33ff 	mov.w	r3, #4294967295
 80009d0:	9300      	str	r3, [sp, #0]
 80009d2:	2302      	movs	r3, #2
 80009d4:	4814      	ldr	r0, [pc, #80]	; (8000a28 <BMP280_Write_Reg+0x7c>)
 80009d6:	f001 ffaf 	bl	8002938 <HAL_I2C_Master_Transmit>
 80009da:	4603      	mov	r3, r0
 80009dc:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 80009de:	7bfb      	ldrb	r3, [r7, #15]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d002      	beq.n	80009ea <BMP280_Write_Reg+0x3e>
		printf("Problem with I2C Transmit\r\n");
 80009e4:	4811      	ldr	r0, [pc, #68]	; (8000a2c <BMP280_Write_Reg+0x80>)
 80009e6:	f004 fe2b 	bl	8005640 <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 80009ea:	23ee      	movs	r3, #238	; 0xee
 80009ec:	b299      	uxth	r1, r3
 80009ee:	f107 020c 	add.w	r2, r7, #12
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	2301      	movs	r3, #1
 80009fa:	480b      	ldr	r0, [pc, #44]	; (8000a28 <BMP280_Write_Reg+0x7c>)
 80009fc:	f002 f89a 	bl	8002b34 <HAL_I2C_Master_Receive>
 8000a00:	4603      	mov	r3, r0
 8000a02:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d002      	beq.n	8000a10 <BMP280_Write_Reg+0x64>
		printf("Problem with I2C Receive\r\n");
 8000a0a:	4809      	ldr	r0, [pc, #36]	; (8000a30 <BMP280_Write_Reg+0x84>)
 8000a0c:	f004 fe18 	bl	8005640 <puts>
	}

	if (buf[0] == value) {
 8000a10:	7b3b      	ldrb	r3, [r7, #12]
 8000a12:	79ba      	ldrb	r2, [r7, #6]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d101      	bne.n	8000a1c <BMP280_Write_Reg+0x70>
		return 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	e000      	b.n	8000a1e <BMP280_Write_Reg+0x72>
	} else {
		return 1;
 8000a1c:	2301      	movs	r3, #1
	}
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	200000c8 	.word	0x200000c8
 8000a2c:	08006284 	.word	0x08006284
 8000a30:	080062a0 	.word	0x080062a0

08000a34 <BMP280_Read_Reg>:

uint8_t* BMP280_Read_Reg(uint8_t reg, uint8_t length) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af02      	add	r7, sp, #8
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	460a      	mov	r2, r1
 8000a3e:	71fb      	strb	r3, [r7, #7]
 8000a40:	4613      	mov	r3, r2
 8000a42:	71bb      	strb	r3, [r7, #6]
	uint8_t *buf;
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, &reg, 1, HAL_MAX_DELAY);
 8000a44:	23ee      	movs	r3, #238	; 0xee
 8000a46:	b299      	uxth	r1, r3
 8000a48:	1dfa      	adds	r2, r7, #7
 8000a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	2301      	movs	r3, #1
 8000a52:	4814      	ldr	r0, [pc, #80]	; (8000aa4 <BMP280_Read_Reg+0x70>)
 8000a54:	f001 ff70 	bl	8002938 <HAL_I2C_Master_Transmit>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d002      	beq.n	8000a68 <BMP280_Read_Reg+0x34>
		printf("Problem with I2C Transmit\r\n");
 8000a62:	4811      	ldr	r0, [pc, #68]	; (8000aa8 <BMP280_Read_Reg+0x74>)
 8000a64:	f004 fdec 	bl	8005640 <puts>
	}

	buf = (uint8_t*) malloc(length);
 8000a68:	79bb      	ldrb	r3, [r7, #6]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f004 fc16 	bl	800529c <malloc>
 8000a70:	4603      	mov	r3, r0
 8000a72:	60bb      	str	r3, [r7, #8]
	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, length,
 8000a74:	23ee      	movs	r3, #238	; 0xee
 8000a76:	b299      	uxth	r1, r3
 8000a78:	79bb      	ldrb	r3, [r7, #6]
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a80:	9200      	str	r2, [sp, #0]
 8000a82:	68ba      	ldr	r2, [r7, #8]
 8000a84:	4807      	ldr	r0, [pc, #28]	; (8000aa4 <BMP280_Read_Reg+0x70>)
 8000a86:	f002 f855 	bl	8002b34 <HAL_I2C_Master_Receive>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	73fb      	strb	r3, [r7, #15]
			HAL_MAX_DELAY);
	if (ret != 0) {
 8000a8e:	7bfb      	ldrb	r3, [r7, #15]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d002      	beq.n	8000a9a <BMP280_Read_Reg+0x66>
		printf("Problem with I2C Receive\r\n");
 8000a94:	4805      	ldr	r0, [pc, #20]	; (8000aac <BMP280_Read_Reg+0x78>)
 8000a96:	f004 fdd3 	bl	8005640 <puts>
	}

	return buf;
 8000a9a:	68bb      	ldr	r3, [r7, #8]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3710      	adds	r7, #16
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	200000c8 	.word	0x200000c8
 8000aa8:	08006284 	.word	0x08006284
 8000aac:	080062a0 	.word	0x080062a0

08000ab0 <BMP280_get_temperature>:

BMP280_S32_t BMP280_get_temperature() {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_T;

	buf = BMP280_Read_Reg(BMP280_TEMP_REG_MSB, BMP280_TEMP_LEN);
 8000ab6:	23fa      	movs	r3, #250	; 0xfa
 8000ab8:	2203      	movs	r2, #3
 8000aba:	4611      	mov	r1, r2
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff ffb9 	bl	8000a34 <BMP280_Read_Reg>
 8000ac2:	6078      	str	r0, [r7, #4]

	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	031a      	lsls	r2, r3, #12
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	3301      	adds	r3, #1
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	011b      	lsls	r3, r3, #4
 8000ad2:	4313      	orrs	r3, r2
			| ((BMP280_S32_t) (buf[2]) >> 4);
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	3202      	adds	r2, #2
 8000ad8:	7812      	ldrb	r2, [r2, #0]
 8000ada:	0912      	lsrs	r2, r2, #4
 8000adc:	b2d2      	uxtb	r2, r2
	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	603b      	str	r3, [r7, #0]

	free(buf);
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f004 fbe2 	bl	80052ac <free>

	printf("Temperature: ");
 8000ae8:	4807      	ldr	r0, [pc, #28]	; (8000b08 <BMP280_get_temperature+0x58>)
 8000aea:	f004 fd43 	bl	8005574 <iprintf>
	printf("0X%05lX", adc_T);
 8000aee:	6839      	ldr	r1, [r7, #0]
 8000af0:	4806      	ldr	r0, [pc, #24]	; (8000b0c <BMP280_get_temperature+0x5c>)
 8000af2:	f004 fd3f 	bl	8005574 <iprintf>
	printf("\r\n");
 8000af6:	4806      	ldr	r0, [pc, #24]	; (8000b10 <BMP280_get_temperature+0x60>)
 8000af8:	f004 fda2 	bl	8005640 <puts>

	return adc_T;
 8000afc:	683b      	ldr	r3, [r7, #0]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	080062bc 	.word	0x080062bc
 8000b0c:	080062cc 	.word	0x080062cc
 8000b10:	080062d4 	.word	0x080062d4

08000b14 <BMP280_get_pressure>:

int BMP280_get_pressure() {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_P;

	buf = BMP280_Read_Reg(BMP280_PRES_REG_MSB, BMP280_PRES_LEN);
 8000b1a:	23f7      	movs	r3, #247	; 0xf7
 8000b1c:	2203      	movs	r2, #3
 8000b1e:	4611      	mov	r1, r2
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff ff87 	bl	8000a34 <BMP280_Read_Reg>
 8000b26:	6078      	str	r0, [r7, #4]

	adc_P = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	031a      	lsls	r2, r3, #12
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	3301      	adds	r3, #1
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	011b      	lsls	r3, r3, #4
 8000b36:	4313      	orrs	r3, r2
			| ((BMP280_S32_t) (buf[2]) >> 4);
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	3202      	adds	r2, #2
 8000b3c:	7812      	ldrb	r2, [r2, #0]
 8000b3e:	0912      	lsrs	r2, r2, #4
 8000b40:	b2d2      	uxtb	r2, r2
	adc_P = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8000b42:	4313      	orrs	r3, r2
 8000b44:	603b      	str	r3, [r7, #0]

	free(buf);
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f004 fbb0 	bl	80052ac <free>

	printf("Pressure:    0x");
 8000b4c:	4807      	ldr	r0, [pc, #28]	; (8000b6c <BMP280_get_pressure+0x58>)
 8000b4e:	f004 fd11 	bl	8005574 <iprintf>
	printf("%05lX", adc_P);
 8000b52:	6839      	ldr	r1, [r7, #0]
 8000b54:	4806      	ldr	r0, [pc, #24]	; (8000b70 <BMP280_get_pressure+0x5c>)
 8000b56:	f004 fd0d 	bl	8005574 <iprintf>
	printf("\r\n");
 8000b5a:	4806      	ldr	r0, [pc, #24]	; (8000b74 <BMP280_get_pressure+0x60>)
 8000b5c:	f004 fd70 	bl	8005640 <puts>

	return 0;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	080062d8 	.word	0x080062d8
 8000b70:	080062e8 	.word	0x080062e8
 8000b74:	080062d4 	.word	0x080062d4

08000b78 <BMP280_compensate_temp>:

BMP280_S32_t BMP280_compensate_temp(BMP280_S32_t adc_T) {
 8000b78:	b480      	push	{r7}
 8000b7a:	b087      	sub	sp, #28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
    // Compensation de la température
    BMP280_S32_t var1, var2, T;
    var1 = ((((adc_T >> 3) - ((BMP280_S32_t)dig_T1 << 1))) * ((BMP280_S32_t)dig_T2)) >> 11;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	10da      	asrs	r2, r3, #3
 8000b84:	4b19      	ldr	r3, [pc, #100]	; (8000bec <BMP280_compensate_temp+0x74>)
 8000b86:	881b      	ldrh	r3, [r3, #0]
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	1ad3      	subs	r3, r2, r3
 8000b8c:	4a18      	ldr	r2, [pc, #96]	; (8000bf0 <BMP280_compensate_temp+0x78>)
 8000b8e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b92:	fb02 f303 	mul.w	r3, r2, r3
 8000b96:	12db      	asrs	r3, r3, #11
 8000b98:	617b      	str	r3, [r7, #20]
    var2 = (((((adc_T >> 4) - ((BMP280_S32_t)dig_T1)) * ((adc_T >> 4) - ((BMP280_S32_t)dig_T1))) >> 12) * ((BMP280_S32_t)dig_T3)) >> 14;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	111b      	asrs	r3, r3, #4
 8000b9e:	4a13      	ldr	r2, [pc, #76]	; (8000bec <BMP280_compensate_temp+0x74>)
 8000ba0:	8812      	ldrh	r2, [r2, #0]
 8000ba2:	1a9b      	subs	r3, r3, r2
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	1112      	asrs	r2, r2, #4
 8000ba8:	4910      	ldr	r1, [pc, #64]	; (8000bec <BMP280_compensate_temp+0x74>)
 8000baa:	8809      	ldrh	r1, [r1, #0]
 8000bac:	1a52      	subs	r2, r2, r1
 8000bae:	fb02 f303 	mul.w	r3, r2, r3
 8000bb2:	131b      	asrs	r3, r3, #12
 8000bb4:	4a0f      	ldr	r2, [pc, #60]	; (8000bf4 <BMP280_compensate_temp+0x7c>)
 8000bb6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000bba:	fb02 f303 	mul.w	r3, r2, r3
 8000bbe:	139b      	asrs	r3, r3, #14
 8000bc0:	613b      	str	r3, [r7, #16]
    t_fine = var1 + var2;
 8000bc2:	697a      	ldr	r2, [r7, #20]
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	4a0b      	ldr	r2, [pc, #44]	; (8000bf8 <BMP280_compensate_temp+0x80>)
 8000bca:	6013      	str	r3, [r2, #0]
    T = (t_fine * 5 + 128) >> 8;
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <BMP280_compensate_temp+0x80>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	4413      	add	r3, r2
 8000bd6:	3380      	adds	r3, #128	; 0x80
 8000bd8:	121b      	asrs	r3, r3, #8
 8000bda:	60fb      	str	r3, [r7, #12]
    return T;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	371c      	adds	r7, #28
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	200000ac 	.word	0x200000ac
 8000bf0:	200000ae 	.word	0x200000ae
 8000bf4:	200000b0 	.word	0x200000b0
 8000bf8:	200000c4 	.word	0x200000c4

08000bfc <BMP280_compensate_press>:

BMP280_S32_t BMP280_compensate_press(BMP280_S32_t adc_P) {
 8000bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000c00:	b0ca      	sub	sp, #296	; 0x128
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
// Compensation de la pression
    BMP280_S64_t var3, var4, p;
    var3 = ((BMP280_S64_t)t_fine) - 128000;
 8000c08:	4baf      	ldr	r3, [pc, #700]	; (8000ec8 <BMP280_compensate_press+0x2cc>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	17da      	asrs	r2, r3, #31
 8000c0e:	461c      	mov	r4, r3
 8000c10:	4615      	mov	r5, r2
 8000c12:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8000c16:	f145 3bff 	adc.w	fp, r5, #4294967295
 8000c1a:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
    var4 = var3 * var3 * (BMP280_S64_t)dig_P6;
 8000c1e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000c22:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000c26:	fb03 f102 	mul.w	r1, r3, r2
 8000c2a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000c2e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000c32:	fb02 f303 	mul.w	r3, r2, r3
 8000c36:	18ca      	adds	r2, r1, r3
 8000c38:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000c3c:	fba3 8903 	umull	r8, r9, r3, r3
 8000c40:	eb02 0309 	add.w	r3, r2, r9
 8000c44:	4699      	mov	r9, r3
 8000c46:	4ba1      	ldr	r3, [pc, #644]	; (8000ecc <BMP280_compensate_press+0x2d0>)
 8000c48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c4c:	b21b      	sxth	r3, r3
 8000c4e:	17da      	asrs	r2, r3, #31
 8000c50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000c54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8000c58:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	fb03 f209 	mul.w	r2, r3, r9
 8000c62:	460b      	mov	r3, r1
 8000c64:	fb08 f303 	mul.w	r3, r8, r3
 8000c68:	4413      	add	r3, r2
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	fba8 1202 	umull	r1, r2, r8, r2
 8000c70:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8000c74:	460a      	mov	r2, r1
 8000c76:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8000c7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000c7e:	4413      	add	r3, r2
 8000c80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000c84:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8000c88:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8000c8c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
    var4 = var4 + ((var3 * (BMP280_S64_t)dig_P5) << 17);
 8000c90:	4b8f      	ldr	r3, [pc, #572]	; (8000ed0 <BMP280_compensate_press+0x2d4>)
 8000c92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c96:	b21b      	sxth	r3, r3
 8000c98:	17da      	asrs	r2, r3, #31
 8000c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000c9e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8000ca2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000ca6:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8000caa:	462a      	mov	r2, r5
 8000cac:	fb02 f203 	mul.w	r2, r2, r3
 8000cb0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000cb4:	4621      	mov	r1, r4
 8000cb6:	fb01 f303 	mul.w	r3, r1, r3
 8000cba:	441a      	add	r2, r3
 8000cbc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000cc0:	4621      	mov	r1, r4
 8000cc2:	fba3 1301 	umull	r1, r3, r3, r1
 8000cc6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000cca:	460b      	mov	r3, r1
 8000ccc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000cd4:	18d3      	adds	r3, r2, r3
 8000cd6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	f04f 0100 	mov.w	r1, #0
 8000ce2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8000ce6:	462b      	mov	r3, r5
 8000ce8:	0459      	lsls	r1, r3, #17
 8000cea:	4623      	mov	r3, r4
 8000cec:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000cf0:	4623      	mov	r3, r4
 8000cf2:	0458      	lsls	r0, r3, #17
 8000cf4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000cf8:	1814      	adds	r4, r2, r0
 8000cfa:	643c      	str	r4, [r7, #64]	; 0x40
 8000cfc:	414b      	adcs	r3, r1
 8000cfe:	647b      	str	r3, [r7, #68]	; 0x44
 8000d00:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8000d04:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
    var4 = var4 + (((BMP280_S64_t)dig_P4) << 35);
 8000d08:	4b72      	ldr	r3, [pc, #456]	; (8000ed4 <BMP280_compensate_press+0x2d8>)
 8000d0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d0e:	b21b      	sxth	r3, r3
 8000d10:	17da      	asrs	r2, r3, #31
 8000d12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000d16:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8000d1a:	f04f 0000 	mov.w	r0, #0
 8000d1e:	f04f 0100 	mov.w	r1, #0
 8000d22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000d26:	00d9      	lsls	r1, r3, #3
 8000d28:	2000      	movs	r0, #0
 8000d2a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000d2e:	1814      	adds	r4, r2, r0
 8000d30:	63bc      	str	r4, [r7, #56]	; 0x38
 8000d32:	414b      	adcs	r3, r1
 8000d34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d36:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8000d3a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
    var3 = ((var3 * var3 * (BMP280_S64_t)dig_P3) >> 8) + ((var3 * (BMP280_S64_t)dig_P2) << 12);
 8000d3e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000d42:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000d46:	fb03 f102 	mul.w	r1, r3, r2
 8000d4a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000d4e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000d52:	fb02 f303 	mul.w	r3, r2, r3
 8000d56:	18ca      	adds	r2, r1, r3
 8000d58:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000d5c:	fba3 1303 	umull	r1, r3, r3, r3
 8000d60:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000d64:	460b      	mov	r3, r1
 8000d66:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000d6e:	18d3      	adds	r3, r2, r3
 8000d70:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000d74:	4b58      	ldr	r3, [pc, #352]	; (8000ed8 <BMP280_compensate_press+0x2dc>)
 8000d76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d7a:	b21b      	sxth	r3, r3
 8000d7c:	17da      	asrs	r2, r3, #31
 8000d7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000d82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8000d86:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8000d8a:	462b      	mov	r3, r5
 8000d8c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8000d90:	4642      	mov	r2, r8
 8000d92:	fb02 f203 	mul.w	r2, r2, r3
 8000d96:	464b      	mov	r3, r9
 8000d98:	4621      	mov	r1, r4
 8000d9a:	fb01 f303 	mul.w	r3, r1, r3
 8000d9e:	4413      	add	r3, r2
 8000da0:	4622      	mov	r2, r4
 8000da2:	4641      	mov	r1, r8
 8000da4:	fba2 1201 	umull	r1, r2, r2, r1
 8000da8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8000dac:	460a      	mov	r2, r1
 8000dae:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8000db2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8000db6:	4413      	add	r3, r2
 8000db8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8000dbc:	f04f 0000 	mov.w	r0, #0
 8000dc0:	f04f 0100 	mov.w	r1, #0
 8000dc4:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8000dc8:	4623      	mov	r3, r4
 8000dca:	0a18      	lsrs	r0, r3, #8
 8000dcc:	462b      	mov	r3, r5
 8000dce:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000dd2:	462b      	mov	r3, r5
 8000dd4:	1219      	asrs	r1, r3, #8
 8000dd6:	4b41      	ldr	r3, [pc, #260]	; (8000edc <BMP280_compensate_press+0x2e0>)
 8000dd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ddc:	b21b      	sxth	r3, r3
 8000dde:	17da      	asrs	r2, r3, #31
 8000de0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000de4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8000de8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000dec:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8000df0:	464a      	mov	r2, r9
 8000df2:	fb02 f203 	mul.w	r2, r2, r3
 8000df6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000dfa:	4644      	mov	r4, r8
 8000dfc:	fb04 f303 	mul.w	r3, r4, r3
 8000e00:	441a      	add	r2, r3
 8000e02:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000e06:	4644      	mov	r4, r8
 8000e08:	fba3 4304 	umull	r4, r3, r3, r4
 8000e0c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000e10:	4623      	mov	r3, r4
 8000e12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000e16:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000e1a:	18d3      	adds	r3, r2, r3
 8000e1c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000e20:	f04f 0200 	mov.w	r2, #0
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8000e2c:	464c      	mov	r4, r9
 8000e2e:	0323      	lsls	r3, r4, #12
 8000e30:	4644      	mov	r4, r8
 8000e32:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000e36:	4644      	mov	r4, r8
 8000e38:	0322      	lsls	r2, r4, #12
 8000e3a:	1884      	adds	r4, r0, r2
 8000e3c:	633c      	str	r4, [r7, #48]	; 0x30
 8000e3e:	eb41 0303 	adc.w	r3, r1, r3
 8000e42:	637b      	str	r3, [r7, #52]	; 0x34
 8000e44:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8000e48:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
    var3 = (((((BMP280_S64_t)1) << 47) + var3)) * ((BMP280_S64_t)dig_P1) >> 33;
 8000e4c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000e50:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8000e54:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8000e58:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8000e5c:	4b20      	ldr	r3, [pc, #128]	; (8000ee0 <BMP280_compensate_press+0x2e4>)
 8000e5e:	881b      	ldrh	r3, [r3, #0]
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	2200      	movs	r2, #0
 8000e64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000e68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8000e6c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8000e70:	462b      	mov	r3, r5
 8000e72:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8000e76:	4642      	mov	r2, r8
 8000e78:	fb02 f203 	mul.w	r2, r2, r3
 8000e7c:	464b      	mov	r3, r9
 8000e7e:	4621      	mov	r1, r4
 8000e80:	fb01 f303 	mul.w	r3, r1, r3
 8000e84:	4413      	add	r3, r2
 8000e86:	4622      	mov	r2, r4
 8000e88:	4641      	mov	r1, r8
 8000e8a:	fba2 1201 	umull	r1, r2, r2, r1
 8000e8e:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8000e92:	460a      	mov	r2, r1
 8000e94:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8000e98:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8000e9c:	4413      	add	r3, r2
 8000e9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000ea2:	f04f 0200 	mov.w	r2, #0
 8000ea6:	f04f 0300 	mov.w	r3, #0
 8000eaa:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8000eae:	4629      	mov	r1, r5
 8000eb0:	104a      	asrs	r2, r1, #1
 8000eb2:	4629      	mov	r1, r5
 8000eb4:	17cb      	asrs	r3, r1, #31
 8000eb6:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
    if (var3 == 0) {
 8000eba:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	d110      	bne.n	8000ee4 <BMP280_compensate_press+0x2e8>
        return 0; // Pour éviter la division par zéro
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	e154      	b.n	8001170 <BMP280_compensate_press+0x574>
 8000ec6:	bf00      	nop
 8000ec8:	200000c4 	.word	0x200000c4
 8000ecc:	200000bc 	.word	0x200000bc
 8000ed0:	200000ba 	.word	0x200000ba
 8000ed4:	200000b8 	.word	0x200000b8
 8000ed8:	200000b6 	.word	0x200000b6
 8000edc:	200000b4 	.word	0x200000b4
 8000ee0:	200000b2 	.word	0x200000b2
    }
    p = 1048576 - adc_P;
 8000ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000ee8:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8000eec:	17da      	asrs	r2, r3, #31
 8000eee:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ef0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000ef2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8000ef6:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
    p = (((p << 31) - var4) * 3125) / var3;
 8000efa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000efe:	105b      	asrs	r3, r3, #1
 8000f00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000f04:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000f08:	07db      	lsls	r3, r3, #31
 8000f0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000f0e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000f12:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8000f16:	4621      	mov	r1, r4
 8000f18:	1a89      	subs	r1, r1, r2
 8000f1a:	67b9      	str	r1, [r7, #120]	; 0x78
 8000f1c:	4629      	mov	r1, r5
 8000f1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000f22:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000f24:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8000f28:	4622      	mov	r2, r4
 8000f2a:	462b      	mov	r3, r5
 8000f2c:	1891      	adds	r1, r2, r2
 8000f2e:	6239      	str	r1, [r7, #32]
 8000f30:	415b      	adcs	r3, r3
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
 8000f34:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000f38:	4621      	mov	r1, r4
 8000f3a:	1851      	adds	r1, r2, r1
 8000f3c:	61b9      	str	r1, [r7, #24]
 8000f3e:	4629      	mov	r1, r5
 8000f40:	414b      	adcs	r3, r1
 8000f42:	61fb      	str	r3, [r7, #28]
 8000f44:	f04f 0200 	mov.w	r2, #0
 8000f48:	f04f 0300 	mov.w	r3, #0
 8000f4c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000f50:	4649      	mov	r1, r9
 8000f52:	018b      	lsls	r3, r1, #6
 8000f54:	4641      	mov	r1, r8
 8000f56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000f5a:	4641      	mov	r1, r8
 8000f5c:	018a      	lsls	r2, r1, #6
 8000f5e:	4641      	mov	r1, r8
 8000f60:	1889      	adds	r1, r1, r2
 8000f62:	6139      	str	r1, [r7, #16]
 8000f64:	4649      	mov	r1, r9
 8000f66:	eb43 0101 	adc.w	r1, r3, r1
 8000f6a:	6179      	str	r1, [r7, #20]
 8000f6c:	f04f 0200 	mov.w	r2, #0
 8000f70:	f04f 0300 	mov.w	r3, #0
 8000f74:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000f78:	4649      	mov	r1, r9
 8000f7a:	008b      	lsls	r3, r1, #2
 8000f7c:	4641      	mov	r1, r8
 8000f7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000f82:	4641      	mov	r1, r8
 8000f84:	008a      	lsls	r2, r1, #2
 8000f86:	4610      	mov	r0, r2
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	4622      	mov	r2, r4
 8000f8e:	189b      	adds	r3, r3, r2
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	460b      	mov	r3, r1
 8000f94:	462a      	mov	r2, r5
 8000f96:	eb42 0303 	adc.w	r3, r2, r3
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	f04f 0200 	mov.w	r2, #0
 8000fa0:	f04f 0300 	mov.w	r3, #0
 8000fa4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000fa8:	4649      	mov	r1, r9
 8000faa:	008b      	lsls	r3, r1, #2
 8000fac:	4641      	mov	r1, r8
 8000fae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000fb2:	4641      	mov	r1, r8
 8000fb4:	008a      	lsls	r2, r1, #2
 8000fb6:	4610      	mov	r0, r2
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4603      	mov	r3, r0
 8000fbc:	4622      	mov	r2, r4
 8000fbe:	189b      	adds	r3, r3, r2
 8000fc0:	673b      	str	r3, [r7, #112]	; 0x70
 8000fc2:	462b      	mov	r3, r5
 8000fc4:	460a      	mov	r2, r1
 8000fc6:	eb42 0303 	adc.w	r3, r2, r3
 8000fca:	677b      	str	r3, [r7, #116]	; 0x74
 8000fcc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000fd0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8000fd4:	f7ff f96c 	bl	80002b0 <__aeabi_ldivmod>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    var3 = (((BMP280_S64_t)dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8000fe0:	4b66      	ldr	r3, [pc, #408]	; (800117c <BMP280_compensate_press+0x580>)
 8000fe2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe6:	b21b      	sxth	r3, r3
 8000fe8:	17da      	asrs	r2, r3, #31
 8000fea:	66bb      	str	r3, [r7, #104]	; 0x68
 8000fec:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000fee:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8000ff2:	f04f 0000 	mov.w	r0, #0
 8000ff6:	f04f 0100 	mov.w	r1, #0
 8000ffa:	0b50      	lsrs	r0, r2, #13
 8000ffc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001000:	1359      	asrs	r1, r3, #13
 8001002:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001006:	462b      	mov	r3, r5
 8001008:	fb00 f203 	mul.w	r2, r0, r3
 800100c:	4623      	mov	r3, r4
 800100e:	fb03 f301 	mul.w	r3, r3, r1
 8001012:	4413      	add	r3, r2
 8001014:	4622      	mov	r2, r4
 8001016:	fba2 1200 	umull	r1, r2, r2, r0
 800101a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800101e:	460a      	mov	r2, r1
 8001020:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001024:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001028:	4413      	add	r3, r2
 800102a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800102e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001032:	f04f 0000 	mov.w	r0, #0
 8001036:	f04f 0100 	mov.w	r1, #0
 800103a:	0b50      	lsrs	r0, r2, #13
 800103c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001040:	1359      	asrs	r1, r3, #13
 8001042:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001046:	462b      	mov	r3, r5
 8001048:	fb00 f203 	mul.w	r2, r0, r3
 800104c:	4623      	mov	r3, r4
 800104e:	fb03 f301 	mul.w	r3, r3, r1
 8001052:	4413      	add	r3, r2
 8001054:	4622      	mov	r2, r4
 8001056:	fba2 1200 	umull	r1, r2, r2, r0
 800105a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800105e:	460a      	mov	r2, r1
 8001060:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001064:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001068:	4413      	add	r3, r2
 800106a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800106e:	f04f 0200 	mov.w	r2, #0
 8001072:	f04f 0300 	mov.w	r3, #0
 8001076:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800107a:	4621      	mov	r1, r4
 800107c:	0e4a      	lsrs	r2, r1, #25
 800107e:	4629      	mov	r1, r5
 8001080:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001084:	4629      	mov	r1, r5
 8001086:	164b      	asrs	r3, r1, #25
 8001088:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
    var4 = (((BMP280_S64_t)dig_P8) * p) >> 19;
 800108c:	4b3c      	ldr	r3, [pc, #240]	; (8001180 <BMP280_compensate_press+0x584>)
 800108e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001092:	b21b      	sxth	r3, r3
 8001094:	17da      	asrs	r2, r3, #31
 8001096:	663b      	str	r3, [r7, #96]	; 0x60
 8001098:	667a      	str	r2, [r7, #100]	; 0x64
 800109a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800109e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80010a2:	462a      	mov	r2, r5
 80010a4:	fb02 f203 	mul.w	r2, r2, r3
 80010a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80010ac:	4621      	mov	r1, r4
 80010ae:	fb01 f303 	mul.w	r3, r1, r3
 80010b2:	4413      	add	r3, r2
 80010b4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80010b8:	4621      	mov	r1, r4
 80010ba:	fba2 1201 	umull	r1, r2, r2, r1
 80010be:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80010c2:	460a      	mov	r2, r1
 80010c4:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80010c8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80010cc:	4413      	add	r3, r2
 80010ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	f04f 0300 	mov.w	r3, #0
 80010da:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 80010de:	4621      	mov	r1, r4
 80010e0:	0cca      	lsrs	r2, r1, #19
 80010e2:	4629      	mov	r1, r5
 80010e4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80010e8:	4629      	mov	r1, r5
 80010ea:	14cb      	asrs	r3, r1, #19
 80010ec:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
    p = ((p + var3 + var4) >> 8) + (((BMP280_S64_t)dig_P7) << 4);
 80010f0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80010f4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80010f8:	1884      	adds	r4, r0, r2
 80010fa:	65bc      	str	r4, [r7, #88]	; 0x58
 80010fc:	eb41 0303 	adc.w	r3, r1, r3
 8001100:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001102:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001106:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800110a:	4621      	mov	r1, r4
 800110c:	1889      	adds	r1, r1, r2
 800110e:	6539      	str	r1, [r7, #80]	; 0x50
 8001110:	4629      	mov	r1, r5
 8001112:	eb43 0101 	adc.w	r1, r3, r1
 8001116:	6579      	str	r1, [r7, #84]	; 0x54
 8001118:	f04f 0000 	mov.w	r0, #0
 800111c:	f04f 0100 	mov.w	r1, #0
 8001120:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001124:	4623      	mov	r3, r4
 8001126:	0a18      	lsrs	r0, r3, #8
 8001128:	462b      	mov	r3, r5
 800112a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800112e:	462b      	mov	r3, r5
 8001130:	1219      	asrs	r1, r3, #8
 8001132:	4b14      	ldr	r3, [pc, #80]	; (8001184 <BMP280_compensate_press+0x588>)
 8001134:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001138:	b21b      	sxth	r3, r3
 800113a:	17da      	asrs	r2, r3, #31
 800113c:	64bb      	str	r3, [r7, #72]	; 0x48
 800113e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 800114c:	464c      	mov	r4, r9
 800114e:	0123      	lsls	r3, r4, #4
 8001150:	4644      	mov	r4, r8
 8001152:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001156:	4644      	mov	r4, r8
 8001158:	0122      	lsls	r2, r4, #4
 800115a:	1884      	adds	r4, r0, r2
 800115c:	603c      	str	r4, [r7, #0]
 800115e:	eb41 0303 	adc.w	r3, r1, r3
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001168:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110

    return (BMP280_S32_t)p; // Vous pouvez également renvoyer la pression si nécessaire
 800116c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001170:	4618      	mov	r0, r3
 8001172:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001176:	46bd      	mov	sp, r7
 8001178:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800117c:	200000c2 	.word	0x200000c2
 8001180:	200000c0 	.word	0x200000c0
 8001184:	200000be 	.word	0x200000be

08001188 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	4b2d      	ldr	r3, [pc, #180]	; (8001258 <MX_GPIO_Init+0xd0>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a2c      	ldr	r2, [pc, #176]	; (8001258 <MX_GPIO_Init+0xd0>)
 80011a8:	f043 0304 	orr.w	r3, r3, #4
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b2a      	ldr	r3, [pc, #168]	; (8001258 <MX_GPIO_Init+0xd0>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0304 	and.w	r3, r3, #4
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	4b26      	ldr	r3, [pc, #152]	; (8001258 <MX_GPIO_Init+0xd0>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a25      	ldr	r2, [pc, #148]	; (8001258 <MX_GPIO_Init+0xd0>)
 80011c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b23      	ldr	r3, [pc, #140]	; (8001258 <MX_GPIO_Init+0xd0>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <MX_GPIO_Init+0xd0>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a1e      	ldr	r2, [pc, #120]	; (8001258 <MX_GPIO_Init+0xd0>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <MX_GPIO_Init+0xd0>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	4b18      	ldr	r3, [pc, #96]	; (8001258 <MX_GPIO_Init+0xd0>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a17      	ldr	r2, [pc, #92]	; (8001258 <MX_GPIO_Init+0xd0>)
 80011fc:	f043 0302 	orr.w	r3, r3, #2
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <MX_GPIO_Init+0xd0>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800120e:	2200      	movs	r2, #0
 8001210:	2120      	movs	r1, #32
 8001212:	4812      	ldr	r0, [pc, #72]	; (800125c <MX_GPIO_Init+0xd4>)
 8001214:	f001 fa32 	bl	800267c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001218:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800121c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800121e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001222:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4619      	mov	r1, r3
 800122e:	480c      	ldr	r0, [pc, #48]	; (8001260 <MX_GPIO_Init+0xd8>)
 8001230:	f001 f890 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001234:	2320      	movs	r3, #32
 8001236:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001238:	2301      	movs	r3, #1
 800123a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001240:	2300      	movs	r3, #0
 8001242:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	4619      	mov	r1, r3
 800124a:	4804      	ldr	r0, [pc, #16]	; (800125c <MX_GPIO_Init+0xd4>)
 800124c:	f001 f882 	bl	8002354 <HAL_GPIO_Init>

}
 8001250:	bf00      	nop
 8001252:	3728      	adds	r7, #40	; 0x28
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40023800 	.word	0x40023800
 800125c:	40020000 	.word	0x40020000
 8001260:	40020800 	.word	0x40020800

08001264 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <MX_I2C1_Init+0x50>)
 800126a:	4a13      	ldr	r2, [pc, #76]	; (80012b8 <MX_I2C1_Init+0x54>)
 800126c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <MX_I2C1_Init+0x50>)
 8001270:	4a12      	ldr	r2, [pc, #72]	; (80012bc <MX_I2C1_Init+0x58>)
 8001272:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <MX_I2C1_Init+0x50>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <MX_I2C1_Init+0x50>)
 800127c:	2200      	movs	r2, #0
 800127e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <MX_I2C1_Init+0x50>)
 8001282:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001286:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001288:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <MX_I2C1_Init+0x50>)
 800128a:	2200      	movs	r2, #0
 800128c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <MX_I2C1_Init+0x50>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001294:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <MX_I2C1_Init+0x50>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <MX_I2C1_Init+0x50>)
 800129c:	2200      	movs	r2, #0
 800129e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012a0:	4804      	ldr	r0, [pc, #16]	; (80012b4 <MX_I2C1_Init+0x50>)
 80012a2:	f001 fa05 	bl	80026b0 <HAL_I2C_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012ac:	f000 f9d2 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	200000c8 	.word	0x200000c8
 80012b8:	40005400 	.word	0x40005400
 80012bc:	000186a0 	.word	0x000186a0

080012c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08a      	sub	sp, #40	; 0x28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a19      	ldr	r2, [pc, #100]	; (8001344 <HAL_I2C_MspInit+0x84>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d12b      	bne.n	800133a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	4b18      	ldr	r3, [pc, #96]	; (8001348 <HAL_I2C_MspInit+0x88>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a17      	ldr	r2, [pc, #92]	; (8001348 <HAL_I2C_MspInit+0x88>)
 80012ec:	f043 0302 	orr.w	r3, r3, #2
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <HAL_I2C_MspInit+0x88>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012fe:	23c0      	movs	r3, #192	; 0xc0
 8001300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001302:	2312      	movs	r3, #18
 8001304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130a:	2303      	movs	r3, #3
 800130c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800130e:	2304      	movs	r3, #4
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001312:	f107 0314 	add.w	r3, r7, #20
 8001316:	4619      	mov	r1, r3
 8001318:	480c      	ldr	r0, [pc, #48]	; (800134c <HAL_I2C_MspInit+0x8c>)
 800131a:	f001 f81b 	bl	8002354 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <HAL_I2C_MspInit+0x88>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	4a08      	ldr	r2, [pc, #32]	; (8001348 <HAL_I2C_MspInit+0x88>)
 8001328:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800132c:	6413      	str	r3, [r2, #64]	; 0x40
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_I2C_MspInit+0x88>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800133a:	bf00      	nop
 800133c:	3728      	adds	r7, #40	; 0x28
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40005400 	.word	0x40005400
 8001348:	40023800 	.word	0x40023800
 800134c:	40020400 	.word	0x40020400

08001350 <HAL_UART_RxCpltCallback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART4){
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a37      	ldr	r2, [pc, #220]	; (800143c <HAL_UART_RxCpltCallback+0xec>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d167      	bne.n	8001432 <HAL_UART_RxCpltCallback+0xe2>
		BMP280_S32_t rawPressure;
		BMP280_S32_t pressure_COMP;

		// Ajouter le caractère reçu au tampon
		static uint8_t rxIndex = 0;
		rxData[rxIndex++] = receivedChar;
 8001362:	4b37      	ldr	r3, [pc, #220]	; (8001440 <HAL_UART_RxCpltCallback+0xf0>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	1c5a      	adds	r2, r3, #1
 8001368:	b2d1      	uxtb	r1, r2
 800136a:	4a35      	ldr	r2, [pc, #212]	; (8001440 <HAL_UART_RxCpltCallback+0xf0>)
 800136c:	7011      	strb	r1, [r2, #0]
 800136e:	461a      	mov	r2, r3
 8001370:	4b34      	ldr	r3, [pc, #208]	; (8001444 <HAL_UART_RxCpltCallback+0xf4>)
 8001372:	7819      	ldrb	r1, [r3, #0]
 8001374:	4b34      	ldr	r3, [pc, #208]	; (8001448 <HAL_UART_RxCpltCallback+0xf8>)
 8001376:	5499      	strb	r1, [r3, r2]

		if (rxIndex >= 5) {
 8001378:	4b31      	ldr	r3, [pc, #196]	; (8001440 <HAL_UART_RxCpltCallback+0xf0>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b04      	cmp	r3, #4
 800137e:	d953      	bls.n	8001428 <HAL_UART_RxCpltCallback+0xd8>

			if (strncmp(rxData, "GET_T", 5) == 0) {
 8001380:	2205      	movs	r2, #5
 8001382:	4932      	ldr	r1, [pc, #200]	; (800144c <HAL_UART_RxCpltCallback+0xfc>)
 8001384:	4830      	ldr	r0, [pc, #192]	; (8001448 <HAL_UART_RxCpltCallback+0xf8>)
 8001386:	f004 fa43 	bl	8005810 <strncmp>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d112      	bne.n	80013b6 <HAL_UART_RxCpltCallback+0x66>
				printf("caractere reçu : %c", rxData);
 8001390:	492d      	ldr	r1, [pc, #180]	; (8001448 <HAL_UART_RxCpltCallback+0xf8>)
 8001392:	482f      	ldr	r0, [pc, #188]	; (8001450 <HAL_UART_RxCpltCallback+0x100>)
 8001394:	f004 f8ee 	bl	8005574 <iprintf>
				rawTemperature = BMP280_get_temperature();
 8001398:	f7ff fb8a 	bl	8000ab0 <BMP280_get_temperature>
 800139c:	60f8      	str	r0, [r7, #12]
				temperature_COMP = BMP280_compensate_temp(rawTemperature);
 800139e:	68f8      	ldr	r0, [r7, #12]
 80013a0:	f7ff fbea 	bl	8000b78 <BMP280_compensate_temp>
 80013a4:	60b8      	str	r0, [r7, #8]
				HAL_UART_Transmit(&huart4, temperature_COMP, sizeof(temperature_COMP), HAL_MAX_DELAY);
 80013a6:	68b9      	ldr	r1, [r7, #8]
 80013a8:	f04f 33ff 	mov.w	r3, #4294967295
 80013ac:	2204      	movs	r2, #4
 80013ae:	4829      	ldr	r0, [pc, #164]	; (8001454 <HAL_UART_RxCpltCallback+0x104>)
 80013b0:	f002 ff49 	bl	8004246 <HAL_UART_Transmit>
 80013b4:	e035      	b.n	8001422 <HAL_UART_RxCpltCallback+0xd2>
			}

			else if (strncmp(rxData, "GET_P", 5) == 0) {
 80013b6:	2205      	movs	r2, #5
 80013b8:	4927      	ldr	r1, [pc, #156]	; (8001458 <HAL_UART_RxCpltCallback+0x108>)
 80013ba:	4823      	ldr	r0, [pc, #140]	; (8001448 <HAL_UART_RxCpltCallback+0xf8>)
 80013bc:	f004 fa28 	bl	8005810 <strncmp>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d10e      	bne.n	80013e4 <HAL_UART_RxCpltCallback+0x94>
				rawPressure = BMP280_get_pressure();
 80013c6:	f7ff fba5 	bl	8000b14 <BMP280_get_pressure>
 80013ca:	6178      	str	r0, [r7, #20]
				pressure_COMP = BMP280_compensate_press(rawPressure);
 80013cc:	6978      	ldr	r0, [r7, #20]
 80013ce:	f7ff fc15 	bl	8000bfc <BMP280_compensate_press>
 80013d2:	6138      	str	r0, [r7, #16]
				HAL_UART_Transmit(&huart4, pressure_COMP, sizeof(pressure_COMP), HAL_MAX_DELAY);
 80013d4:	6939      	ldr	r1, [r7, #16]
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295
 80013da:	2204      	movs	r2, #4
 80013dc:	481d      	ldr	r0, [pc, #116]	; (8001454 <HAL_UART_RxCpltCallback+0x104>)
 80013de:	f002 ff32 	bl	8004246 <HAL_UART_Transmit>
 80013e2:	e01e      	b.n	8001422 <HAL_UART_RxCpltCallback+0xd2>

			}
			else if (strncmp(rxData, "SET_K=1234", 10) == 0){
 80013e4:	220a      	movs	r2, #10
 80013e6:	491d      	ldr	r1, [pc, #116]	; (800145c <HAL_UART_RxCpltCallback+0x10c>)
 80013e8:	4817      	ldr	r0, [pc, #92]	; (8001448 <HAL_UART_RxCpltCallback+0xf8>)
 80013ea:	f004 fa11 	bl	8005810 <strncmp>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d016      	beq.n	8001422 <HAL_UART_RxCpltCallback+0xd2>

			}
			else if (strncmp(rxData, "GET_K", 5) == 0){
 80013f4:	2205      	movs	r2, #5
 80013f6:	491a      	ldr	r1, [pc, #104]	; (8001460 <HAL_UART_RxCpltCallback+0x110>)
 80013f8:	4813      	ldr	r0, [pc, #76]	; (8001448 <HAL_UART_RxCpltCallback+0xf8>)
 80013fa:	f004 fa09 	bl	8005810 <strncmp>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d109      	bne.n	8001418 <HAL_UART_RxCpltCallback+0xc8>

				HAL_UART_Transmit(&huart4, coef_temperature, sizeof(coef_temperature), HAL_MAX_DELAY);
 8001404:	4b17      	ldr	r3, [pc, #92]	; (8001464 <HAL_UART_RxCpltCallback+0x114>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4619      	mov	r1, r3
 800140a:	f04f 33ff 	mov.w	r3, #4294967295
 800140e:	2204      	movs	r2, #4
 8001410:	4810      	ldr	r0, [pc, #64]	; (8001454 <HAL_UART_RxCpltCallback+0x104>)
 8001412:	f002 ff18 	bl	8004246 <HAL_UART_Transmit>
 8001416:	e004      	b.n	8001422 <HAL_UART_RxCpltCallback+0xd2>

			}

			else if (strncmp(rxData, "GET_A", 5) == 0) {
 8001418:	2205      	movs	r2, #5
 800141a:	4913      	ldr	r1, [pc, #76]	; (8001468 <HAL_UART_RxCpltCallback+0x118>)
 800141c:	480a      	ldr	r0, [pc, #40]	; (8001448 <HAL_UART_RxCpltCallback+0xf8>)
 800141e:	f004 f9f7 	bl	8005810 <strncmp>


			}
			// Réinitialiser l'index pour la prochaine réception
			rxIndex = 0;
 8001422:	4b07      	ldr	r3, [pc, #28]	; (8001440 <HAL_UART_RxCpltCallback+0xf0>)
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
		}

		// Continuez à attendre le prochain caractère
		HAL_UART_Receive_IT(&huart4, &receivedChar, 1);
 8001428:	2201      	movs	r2, #1
 800142a:	4906      	ldr	r1, [pc, #24]	; (8001444 <HAL_UART_RxCpltCallback+0xf4>)
 800142c:	4809      	ldr	r0, [pc, #36]	; (8001454 <HAL_UART_RxCpltCallback+0x104>)
 800142e:	f002 ff9c 	bl	800436a <HAL_UART_Receive_IT>
	}
}
 8001432:	bf00      	nop
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40004c00 	.word	0x40004c00
 8001440:	20000154 	.word	0x20000154
 8001444:	2000014e 	.word	0x2000014e
 8001448:	2000011c 	.word	0x2000011c
 800144c:	080062f0 	.word	0x080062f0
 8001450:	080062f8 	.word	0x080062f8
 8001454:	2000015c 	.word	0x2000015c
 8001458:	08006310 	.word	0x08006310
 800145c:	08006318 	.word	0x08006318
 8001460:	08006324 	.word	0x08006324
 8001464:	20000150 	.word	0x20000150
 8001468:	0800632c 	.word	0x0800632c

0800146c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b090      	sub	sp, #64	; 0x40
 8001470:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001472:	f000 fb1b 	bl	8001aac <HAL_Init>
	BMP280_S32_t compensated_temperature;
	BMP280_S32_t temp;
	BMP280_S32_t press;
	BMP280_S32_t compensated_pressure;

	int temp_max = 35;
 8001476:	2323      	movs	r3, #35	; 0x23
 8001478:	63fb      	str	r3, [r7, #60]	; 0x3c
	int angle_max = 180;
 800147a:	23b4      	movs	r3, #180	; 0xb4
 800147c:	63bb      	str	r3, [r7, #56]	; 0x38

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800147e:	f000 f87b 	bl	8001578 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001482:	f7ff fe81 	bl	8001188 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001486:	f000 fa39 	bl	80018fc <MX_USART2_UART_Init>
	MX_CAN1_Init();
 800148a:	f7ff f8df 	bl	800064c <MX_CAN1_Init>
	MX_I2C1_Init();
 800148e:	f7ff fee9 	bl	8001264 <MX_I2C1_Init>
	MX_UART4_Init();
 8001492:	f000 fa09 	bl	80018a8 <MX_UART4_Init>
	/* USER CODE BEGIN 2 */

	BMP280_check();
 8001496:	f7ff f957 	bl	8000748 <BMP280_check>
	BMP280_init();
 800149a:	f7ff f9a1 	bl	80007e0 <BMP280_init>

	//HAL_CAN_Init(&hcan1);

	HAL_CAN_Start (&hcan1);
 800149e:	4830      	ldr	r0, [pc, #192]	; (8001560 <main+0xf4>)
 80014a0:	f000 fc95 	bl	8001dce <HAL_CAN_Start>

	pHeader.IDE = CAN_ID_STD;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61bb      	str	r3, [r7, #24]
	pHeader.StdId = 0x61;
 80014a8:	2361      	movs	r3, #97	; 0x61
 80014aa:	613b      	str	r3, [r7, #16]
	pHeader.RTR = CAN_RTR_DATA;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
	pHeader.DLC = 2;
 80014b0:	2302      	movs	r3, #2
 80014b2:	623b      	str	r3, [r7, #32]
	pHeader.TransmitGlobalTime = DISABLE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24


	aData[0] = 0x01;
 80014ba:	2301      	movs	r3, #1
 80014bc:	723b      	strb	r3, [r7, #8]
	aData[1] = 0x01;
 80014be:	2301      	movs	r3, #1
 80014c0:	727b      	strb	r3, [r7, #9]
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		press = BMP280_get_pressure();
 80014c2:	f7ff fb27 	bl	8000b14 <BMP280_get_pressure>
 80014c6:	6378      	str	r0, [r7, #52]	; 0x34
		temp = BMP280_get_temperature();
 80014c8:	f7ff faf2 	bl	8000ab0 <BMP280_get_temperature>
 80014cc:	6338      	str	r0, [r7, #48]	; 0x30

		compensated_temperature = BMP280_compensate_temp(temp);
 80014ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80014d0:	f7ff fb52 	bl	8000b78 <BMP280_compensate_temp>
 80014d4:	62f8      	str	r0, [r7, #44]	; 0x2c
		coef_temperature = compensated_temperature/100;
 80014d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014d8:	4a22      	ldr	r2, [pc, #136]	; (8001564 <main+0xf8>)
 80014da:	fb82 1203 	smull	r1, r2, r2, r3
 80014de:	1152      	asrs	r2, r2, #5
 80014e0:	17db      	asrs	r3, r3, #31
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	4a20      	ldr	r2, [pc, #128]	; (8001568 <main+0xfc>)
 80014e6:	6013      	str	r3, [r2, #0]
		printf("Compensated Temperature: %ld\r\n", compensated_temperature/100);
 80014e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ea:	4a1e      	ldr	r2, [pc, #120]	; (8001564 <main+0xf8>)
 80014ec:	fb82 1203 	smull	r1, r2, r2, r3
 80014f0:	1152      	asrs	r2, r2, #5
 80014f2:	17db      	asrs	r3, r3, #31
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	4619      	mov	r1, r3
 80014f8:	481c      	ldr	r0, [pc, #112]	; (800156c <main+0x100>)
 80014fa:	f004 f83b 	bl	8005574 <iprintf>


		coef_temperature = (coef_temperature - 23) * ((angle_max)/(temp_max-23));
 80014fe:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <main+0xfc>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	3b17      	subs	r3, #23
 8001504:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001506:	3a17      	subs	r2, #23
 8001508:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800150a:	fb91 f2f2 	sdiv	r2, r1, r2
 800150e:	fb02 f303 	mul.w	r3, r2, r3
 8001512:	4a15      	ldr	r2, [pc, #84]	; (8001568 <main+0xfc>)
 8001514:	6013      	str	r3, [r2, #0]
		printf("Coeff Temperature: %ld\r\n", coef_temperature);
 8001516:	4b14      	ldr	r3, [pc, #80]	; (8001568 <main+0xfc>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4619      	mov	r1, r3
 800151c:	4814      	ldr	r0, [pc, #80]	; (8001570 <main+0x104>)
 800151e:	f004 f829 	bl	8005574 <iprintf>

		aData[0] = coef_temperature;
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <main+0xfc>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	723b      	strb	r3, [r7, #8]


		HAL_CAN_AddTxMessage (&hcan1, &pHeader, aData, &TxMailbox);
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	f107 0208 	add.w	r2, r7, #8
 8001530:	f107 0110 	add.w	r1, r7, #16
 8001534:	480a      	ldr	r0, [pc, #40]	; (8001560 <main+0xf4>)
 8001536:	f000 fc8e 	bl	8001e56 <HAL_CAN_AddTxMessage>


		//printf("temperature = %ld",coef_temperature);
		//aData[0] = aData[0] + compensated_temperature/100;

		compensated_pressure = BMP280_compensate_press(press);
 800153a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800153c:	f7ff fb5e 	bl	8000bfc <BMP280_compensate_press>
 8001540:	62b8      	str	r0, [r7, #40]	; 0x28
		printf("Compensated Pressure: %ld\r\n", compensated_pressure/256);
 8001542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001544:	2b00      	cmp	r3, #0
 8001546:	da00      	bge.n	800154a <main+0xde>
 8001548:	33ff      	adds	r3, #255	; 0xff
 800154a:	121b      	asrs	r3, r3, #8
 800154c:	4619      	mov	r1, r3
 800154e:	4809      	ldr	r0, [pc, #36]	; (8001574 <main+0x108>)
 8001550:	f004 f810 	bl	8005574 <iprintf>

		HAL_Delay(500);
 8001554:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001558:	f000 fb1a 	bl	8001b90 <HAL_Delay>
		press = BMP280_get_pressure();
 800155c:	e7b1      	b.n	80014c2 <main+0x56>
 800155e:	bf00      	nop
 8001560:	20000084 	.word	0x20000084
 8001564:	51eb851f 	.word	0x51eb851f
 8001568:	20000150 	.word	0x20000150
 800156c:	08006334 	.word	0x08006334
 8001570:	08006354 	.word	0x08006354
 8001574:	08006370 	.word	0x08006370

08001578 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b094      	sub	sp, #80	; 0x50
 800157c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800157e:	f107 031c 	add.w	r3, r7, #28
 8001582:	2234      	movs	r2, #52	; 0x34
 8001584:	2100      	movs	r1, #0
 8001586:	4618      	mov	r0, r3
 8001588:	f004 f93a 	bl	8005800 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800158c:	f107 0308 	add.w	r3, r7, #8
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800159c:	2300      	movs	r3, #0
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	4b2a      	ldr	r3, [pc, #168]	; (800164c <SystemClock_Config+0xd4>)
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	4a29      	ldr	r2, [pc, #164]	; (800164c <SystemClock_Config+0xd4>)
 80015a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015aa:	6413      	str	r3, [r2, #64]	; 0x40
 80015ac:	4b27      	ldr	r3, [pc, #156]	; (800164c <SystemClock_Config+0xd4>)
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80015b8:	2300      	movs	r3, #0
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	4b24      	ldr	r3, [pc, #144]	; (8001650 <SystemClock_Config+0xd8>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015c4:	4a22      	ldr	r2, [pc, #136]	; (8001650 <SystemClock_Config+0xd8>)
 80015c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ca:	6013      	str	r3, [r2, #0]
 80015cc:	4b20      	ldr	r3, [pc, #128]	; (8001650 <SystemClock_Config+0xd8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015d4:	603b      	str	r3, [r7, #0]
 80015d6:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015d8:	2302      	movs	r3, #2
 80015da:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015dc:	2301      	movs	r3, #1
 80015de:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015e0:	2310      	movs	r3, #16
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015e4:	2302      	movs	r3, #2
 80015e6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015e8:	2300      	movs	r3, #0
 80015ea:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 80015ec:	2310      	movs	r3, #16
 80015ee:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 80015f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80015f4:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80015f6:	2304      	movs	r3, #4
 80015f8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80015fa:	2302      	movs	r3, #2
 80015fc:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80015fe:	2302      	movs	r3, #2
 8001600:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001602:	f107 031c 	add.w	r3, r7, #28
 8001606:	4618      	mov	r0, r3
 8001608:	f002 fb32 	bl	8003c70 <HAL_RCC_OscConfig>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <SystemClock_Config+0x9e>
	{
		Error_Handler();
 8001612:	f000 f81f 	bl	8001654 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001616:	230f      	movs	r3, #15
 8001618:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800161a:	2302      	movs	r3, #2
 800161c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001626:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001628:	2300      	movs	r3, #0
 800162a:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800162c:	f107 0308 	add.w	r3, r7, #8
 8001630:	2102      	movs	r1, #2
 8001632:	4618      	mov	r0, r3
 8001634:	f001 ffd2 	bl	80035dc <HAL_RCC_ClockConfig>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <SystemClock_Config+0xca>
	{
		Error_Handler();
 800163e:	f000 f809 	bl	8001654 <Error_Handler>
	}
}
 8001642:	bf00      	nop
 8001644:	3750      	adds	r7, #80	; 0x50
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800
 8001650:	40007000 	.word	0x40007000

08001654 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001658:	b672      	cpsid	i
}
 800165a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800165c:	e7fe      	b.n	800165c <Error_Handler+0x8>
	...

08001660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <HAL_MspInit+0x4c>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	4a0f      	ldr	r2, [pc, #60]	; (80016ac <HAL_MspInit+0x4c>)
 8001670:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001674:	6453      	str	r3, [r2, #68]	; 0x44
 8001676:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <HAL_MspInit+0x4c>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	603b      	str	r3, [r7, #0]
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <HAL_MspInit+0x4c>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	4a08      	ldr	r2, [pc, #32]	; (80016ac <HAL_MspInit+0x4c>)
 800168c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001690:	6413      	str	r3, [r2, #64]	; 0x40
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <HAL_MspInit+0x4c>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169a:	603b      	str	r3, [r7, #0]
 800169c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800169e:	2007      	movs	r0, #7
 80016a0:	f000 fd84 	bl	80021ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40023800 	.word	0x40023800

080016b0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80016b8:	1d39      	adds	r1, r7, #4
 80016ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016be:	2201      	movs	r2, #1
 80016c0:	4803      	ldr	r0, [pc, #12]	; (80016d0 <__io_putchar+0x20>)
 80016c2:	f002 fdc0 	bl	8004246 <HAL_UART_Transmit>

  return ch;
 80016c6:	687b      	ldr	r3, [r7, #4]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	200001a0 	.word	0x200001a0

080016d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <NMI_Handler+0x4>

080016da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016de:	e7fe      	b.n	80016de <HardFault_Handler+0x4>

080016e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <MemManage_Handler+0x4>

080016e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ea:	e7fe      	b.n	80016ea <BusFault_Handler+0x4>

080016ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <UsageFault_Handler+0x4>

080016f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001720:	f000 fa16 	bl	8001b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}

08001728 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800172c:	4802      	ldr	r0, [pc, #8]	; (8001738 <UART4_IRQHandler+0x10>)
 800172e:	f002 fe4d 	bl	80043cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	2000015c 	.word	0x2000015c

0800173c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
 800174c:	e00a      	b.n	8001764 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800174e:	f3af 8000 	nop.w
 8001752:	4601      	mov	r1, r0
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	1c5a      	adds	r2, r3, #1
 8001758:	60ba      	str	r2, [r7, #8]
 800175a:	b2ca      	uxtb	r2, r1
 800175c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	3301      	adds	r3, #1
 8001762:	617b      	str	r3, [r7, #20]
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	429a      	cmp	r2, r3
 800176a:	dbf0      	blt.n	800174e <_read+0x12>
  }

  return len;
 800176c:	687b      	ldr	r3, [r7, #4]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b086      	sub	sp, #24
 800177a:	af00      	add	r7, sp, #0
 800177c:	60f8      	str	r0, [r7, #12]
 800177e:	60b9      	str	r1, [r7, #8]
 8001780:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
 8001786:	e009      	b.n	800179c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	1c5a      	adds	r2, r3, #1
 800178c:	60ba      	str	r2, [r7, #8]
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff ff8d 	bl	80016b0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	3301      	adds	r3, #1
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	697a      	ldr	r2, [r7, #20]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	dbf1      	blt.n	8001788 <_write+0x12>
  }
  return len;
 80017a4:	687b      	ldr	r3, [r7, #4]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <_close>:

int _close(int file)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017d6:	605a      	str	r2, [r3, #4]
  return 0;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <_isatty>:

int _isatty(int file)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017ee:	2301      	movs	r3, #1
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
	...

08001818 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001820:	4a14      	ldr	r2, [pc, #80]	; (8001874 <_sbrk+0x5c>)
 8001822:	4b15      	ldr	r3, [pc, #84]	; (8001878 <_sbrk+0x60>)
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800182c:	4b13      	ldr	r3, [pc, #76]	; (800187c <_sbrk+0x64>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d102      	bne.n	800183a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001834:	4b11      	ldr	r3, [pc, #68]	; (800187c <_sbrk+0x64>)
 8001836:	4a12      	ldr	r2, [pc, #72]	; (8001880 <_sbrk+0x68>)
 8001838:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800183a:	4b10      	ldr	r3, [pc, #64]	; (800187c <_sbrk+0x64>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	429a      	cmp	r2, r3
 8001846:	d207      	bcs.n	8001858 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001848:	f004 f84a 	bl	80058e0 <__errno>
 800184c:	4603      	mov	r3, r0
 800184e:	220c      	movs	r2, #12
 8001850:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001852:	f04f 33ff 	mov.w	r3, #4294967295
 8001856:	e009      	b.n	800186c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001858:	4b08      	ldr	r3, [pc, #32]	; (800187c <_sbrk+0x64>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800185e:	4b07      	ldr	r3, [pc, #28]	; (800187c <_sbrk+0x64>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4413      	add	r3, r2
 8001866:	4a05      	ldr	r2, [pc, #20]	; (800187c <_sbrk+0x64>)
 8001868:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800186a:	68fb      	ldr	r3, [r7, #12]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20020000 	.word	0x20020000
 8001878:	00000400 	.word	0x00000400
 800187c:	20000158 	.word	0x20000158
 8001880:	20000338 	.word	0x20000338

08001884 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <SystemInit+0x20>)
 800188a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800188e:	4a05      	ldr	r2, [pc, #20]	; (80018a4 <SystemInit+0x20>)
 8001890:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001894:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80018ac:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <MX_UART4_Init+0x4c>)
 80018ae:	4a12      	ldr	r2, [pc, #72]	; (80018f8 <MX_UART4_Init+0x50>)
 80018b0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80018b2:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <MX_UART4_Init+0x4c>)
 80018b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018b8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80018ba:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <MX_UART4_Init+0x4c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <MX_UART4_Init+0x4c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80018c6:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <MX_UART4_Init+0x4c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80018cc:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <MX_UART4_Init+0x4c>)
 80018ce:	220c      	movs	r2, #12
 80018d0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d2:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <MX_UART4_Init+0x4c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <MX_UART4_Init+0x4c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80018de:	4805      	ldr	r0, [pc, #20]	; (80018f4 <MX_UART4_Init+0x4c>)
 80018e0:	f002 fc64 	bl	80041ac <HAL_UART_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80018ea:	f7ff feb3 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	2000015c 	.word	0x2000015c
 80018f8:	40004c00 	.word	0x40004c00

080018fc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001900:	4b11      	ldr	r3, [pc, #68]	; (8001948 <MX_USART2_UART_Init+0x4c>)
 8001902:	4a12      	ldr	r2, [pc, #72]	; (800194c <MX_USART2_UART_Init+0x50>)
 8001904:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <MX_USART2_UART_Init+0x4c>)
 8001908:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800190c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <MX_USART2_UART_Init+0x4c>)
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <MX_USART2_UART_Init+0x4c>)
 8001916:	2200      	movs	r2, #0
 8001918:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <MX_USART2_UART_Init+0x4c>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001920:	4b09      	ldr	r3, [pc, #36]	; (8001948 <MX_USART2_UART_Init+0x4c>)
 8001922:	220c      	movs	r2, #12
 8001924:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001926:	4b08      	ldr	r3, [pc, #32]	; (8001948 <MX_USART2_UART_Init+0x4c>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <MX_USART2_UART_Init+0x4c>)
 800192e:	2200      	movs	r2, #0
 8001930:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001932:	4805      	ldr	r0, [pc, #20]	; (8001948 <MX_USART2_UART_Init+0x4c>)
 8001934:	f002 fc3a 	bl	80041ac <HAL_UART_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800193e:	f7ff fe89 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200001a0 	.word	0x200001a0
 800194c:	40004400 	.word	0x40004400

08001950 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08c      	sub	sp, #48	; 0x30
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	f107 031c 	add.w	r3, r7, #28
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a36      	ldr	r2, [pc, #216]	; (8001a48 <HAL_UART_MspInit+0xf8>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d134      	bne.n	80019dc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	61bb      	str	r3, [r7, #24]
 8001976:	4b35      	ldr	r3, [pc, #212]	; (8001a4c <HAL_UART_MspInit+0xfc>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	4a34      	ldr	r2, [pc, #208]	; (8001a4c <HAL_UART_MspInit+0xfc>)
 800197c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001980:	6413      	str	r3, [r2, #64]	; 0x40
 8001982:	4b32      	ldr	r3, [pc, #200]	; (8001a4c <HAL_UART_MspInit+0xfc>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800198a:	61bb      	str	r3, [r7, #24]
 800198c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
 8001992:	4b2e      	ldr	r3, [pc, #184]	; (8001a4c <HAL_UART_MspInit+0xfc>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	4a2d      	ldr	r2, [pc, #180]	; (8001a4c <HAL_UART_MspInit+0xfc>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	6313      	str	r3, [r2, #48]	; 0x30
 800199e:	4b2b      	ldr	r3, [pc, #172]	; (8001a4c <HAL_UART_MspInit+0xfc>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019aa:	2303      	movs	r3, #3
 80019ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b6:	2303      	movs	r3, #3
 80019b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80019ba:	2308      	movs	r3, #8
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019be:	f107 031c 	add.w	r3, r7, #28
 80019c2:	4619      	mov	r1, r3
 80019c4:	4822      	ldr	r0, [pc, #136]	; (8001a50 <HAL_UART_MspInit+0x100>)
 80019c6:	f000 fcc5 	bl	8002354 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80019ca:	2200      	movs	r2, #0
 80019cc:	2100      	movs	r1, #0
 80019ce:	2034      	movs	r0, #52	; 0x34
 80019d0:	f000 fbf7 	bl	80021c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80019d4:	2034      	movs	r0, #52	; 0x34
 80019d6:	f000 fc10 	bl	80021fa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80019da:	e030      	b.n	8001a3e <HAL_UART_MspInit+0xee>
  else if(uartHandle->Instance==USART2)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a1c      	ldr	r2, [pc, #112]	; (8001a54 <HAL_UART_MspInit+0x104>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d12b      	bne.n	8001a3e <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <HAL_UART_MspInit+0xfc>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	4a17      	ldr	r2, [pc, #92]	; (8001a4c <HAL_UART_MspInit+0xfc>)
 80019f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f4:	6413      	str	r3, [r2, #64]	; 0x40
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <HAL_UART_MspInit+0xfc>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fe:	613b      	str	r3, [r7, #16]
 8001a00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <HAL_UART_MspInit+0xfc>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4a10      	ldr	r2, [pc, #64]	; (8001a4c <HAL_UART_MspInit+0xfc>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <HAL_UART_MspInit+0xfc>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a1e:	230c      	movs	r3, #12
 8001a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a22:	2302      	movs	r3, #2
 8001a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a2e:	2307      	movs	r3, #7
 8001a30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a32:	f107 031c 	add.w	r3, r7, #28
 8001a36:	4619      	mov	r1, r3
 8001a38:	4805      	ldr	r0, [pc, #20]	; (8001a50 <HAL_UART_MspInit+0x100>)
 8001a3a:	f000 fc8b 	bl	8002354 <HAL_GPIO_Init>
}
 8001a3e:	bf00      	nop
 8001a40:	3730      	adds	r7, #48	; 0x30
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40004c00 	.word	0x40004c00
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40020000 	.word	0x40020000
 8001a54:	40004400 	.word	0x40004400

08001a58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a5c:	480d      	ldr	r0, [pc, #52]	; (8001a94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a5e:	490e      	ldr	r1, [pc, #56]	; (8001a98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a60:	4a0e      	ldr	r2, [pc, #56]	; (8001a9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a64:	e002      	b.n	8001a6c <LoopCopyDataInit>

08001a66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a6a:	3304      	adds	r3, #4

08001a6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a70:	d3f9      	bcc.n	8001a66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a72:	4a0b      	ldr	r2, [pc, #44]	; (8001aa0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a74:	4c0b      	ldr	r4, [pc, #44]	; (8001aa4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a78:	e001      	b.n	8001a7e <LoopFillZerobss>

08001a7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a7c:	3204      	adds	r2, #4

08001a7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a80:	d3fb      	bcc.n	8001a7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a82:	f7ff feff 	bl	8001884 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a86:	f003 ff31 	bl	80058ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a8a:	f7ff fcef 	bl	800146c <main>
  bx  lr    
 8001a8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a98:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001a9c:	080063e8 	.word	0x080063e8
  ldr r2, =_sbss
 8001aa0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001aa4:	20000334 	.word	0x20000334

08001aa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001aa8:	e7fe      	b.n	8001aa8 <ADC_IRQHandler>
	...

08001aac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ab0:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <HAL_Init+0x40>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a0d      	ldr	r2, [pc, #52]	; (8001aec <HAL_Init+0x40>)
 8001ab6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001abc:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <HAL_Init+0x40>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <HAL_Init+0x40>)
 8001ac2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ac6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac8:	4b08      	ldr	r3, [pc, #32]	; (8001aec <HAL_Init+0x40>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a07      	ldr	r2, [pc, #28]	; (8001aec <HAL_Init+0x40>)
 8001ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad4:	2003      	movs	r0, #3
 8001ad6:	f000 fb69 	bl	80021ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ada:	2000      	movs	r0, #0
 8001adc:	f000 f808 	bl	8001af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae0:	f7ff fdbe 	bl	8001660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40023c00 	.word	0x40023c00

08001af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <HAL_InitTick+0x54>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <HAL_InitTick+0x58>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	4619      	mov	r1, r3
 8001b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 fb81 	bl	8002216 <HAL_SYSTICK_Config>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e00e      	b.n	8001b3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b0f      	cmp	r3, #15
 8001b22:	d80a      	bhi.n	8001b3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b24:	2200      	movs	r2, #0
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	f04f 30ff 	mov.w	r0, #4294967295
 8001b2c:	f000 fb49 	bl	80021c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b30:	4a06      	ldr	r2, [pc, #24]	; (8001b4c <HAL_InitTick+0x5c>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	e000      	b.n	8001b3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000000 	.word	0x20000000
 8001b48:	20000008 	.word	0x20000008
 8001b4c:	20000004 	.word	0x20000004

08001b50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <HAL_IncTick+0x20>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_IncTick+0x24>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4413      	add	r3, r2
 8001b60:	4a04      	ldr	r2, [pc, #16]	; (8001b74 <HAL_IncTick+0x24>)
 8001b62:	6013      	str	r3, [r2, #0]
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	20000008 	.word	0x20000008
 8001b74:	200001e4 	.word	0x200001e4

08001b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b7c:	4b03      	ldr	r3, [pc, #12]	; (8001b8c <HAL_GetTick+0x14>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	200001e4 	.word	0x200001e4

08001b90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b98:	f7ff ffee 	bl	8001b78 <HAL_GetTick>
 8001b9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba8:	d005      	beq.n	8001bb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001baa:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <HAL_Delay+0x44>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bb6:	bf00      	nop
 8001bb8:	f7ff ffde 	bl	8001b78 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d8f7      	bhi.n	8001bb8 <HAL_Delay+0x28>
  {
  }
}
 8001bc8:	bf00      	nop
 8001bca:	bf00      	nop
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000008 	.word	0x20000008

08001bd8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e0ed      	b.n	8001dc6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d102      	bne.n	8001bfc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7fe fd5e 	bl	80006b8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f042 0201 	orr.w	r2, r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c0c:	f7ff ffb4 	bl	8001b78 <HAL_GetTick>
 8001c10:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c12:	e012      	b.n	8001c3a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c14:	f7ff ffb0 	bl	8001b78 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b0a      	cmp	r3, #10
 8001c20:	d90b      	bls.n	8001c3a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c26:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2205      	movs	r2, #5
 8001c32:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e0c5      	b.n	8001dc6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0e5      	beq.n	8001c14 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 0202 	bic.w	r2, r2, #2
 8001c56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c58:	f7ff ff8e 	bl	8001b78 <HAL_GetTick>
 8001c5c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c5e:	e012      	b.n	8001c86 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c60:	f7ff ff8a 	bl	8001b78 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b0a      	cmp	r3, #10
 8001c6c:	d90b      	bls.n	8001c86 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2205      	movs	r2, #5
 8001c7e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e09f      	b.n	8001dc6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1e5      	bne.n	8001c60 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	7e1b      	ldrb	r3, [r3, #24]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d108      	bne.n	8001cae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	e007      	b.n	8001cbe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	7e5b      	ldrb	r3, [r3, #25]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d108      	bne.n	8001cd8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	e007      	b.n	8001ce8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ce6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	7e9b      	ldrb	r3, [r3, #26]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d108      	bne.n	8001d02 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 0220 	orr.w	r2, r2, #32
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	e007      	b.n	8001d12 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0220 	bic.w	r2, r2, #32
 8001d10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	7edb      	ldrb	r3, [r3, #27]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d108      	bne.n	8001d2c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 0210 	bic.w	r2, r2, #16
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	e007      	b.n	8001d3c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f042 0210 	orr.w	r2, r2, #16
 8001d3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	7f1b      	ldrb	r3, [r3, #28]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d108      	bne.n	8001d56 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f042 0208 	orr.w	r2, r2, #8
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	e007      	b.n	8001d66 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 0208 	bic.w	r2, r2, #8
 8001d64:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	7f5b      	ldrb	r3, [r3, #29]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d108      	bne.n	8001d80 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f042 0204 	orr.w	r2, r2, #4
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	e007      	b.n	8001d90 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 0204 	bic.w	r2, r2, #4
 8001d8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	ea42 0103 	orr.w	r1, r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	1e5a      	subs	r2, r3, #1
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b084      	sub	sp, #16
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d12e      	bne.n	8001e40 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2202      	movs	r2, #2
 8001de6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 0201 	bic.w	r2, r2, #1
 8001df8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001dfa:	f7ff febd 	bl	8001b78 <HAL_GetTick>
 8001dfe:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e00:	e012      	b.n	8001e28 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e02:	f7ff feb9 	bl	8001b78 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b0a      	cmp	r3, #10
 8001e0e:	d90b      	bls.n	8001e28 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e14:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2205      	movs	r2, #5
 8001e20:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e012      	b.n	8001e4e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1e5      	bne.n	8001e02 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	e006      	b.n	8001e4e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e44:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
  }
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b089      	sub	sp, #36	; 0x24
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	60f8      	str	r0, [r7, #12]
 8001e5e:	60b9      	str	r1, [r7, #8]
 8001e60:	607a      	str	r2, [r7, #4]
 8001e62:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e6a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e74:	7ffb      	ldrb	r3, [r7, #31]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d003      	beq.n	8001e82 <HAL_CAN_AddTxMessage+0x2c>
 8001e7a:	7ffb      	ldrb	r3, [r7, #31]
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	f040 80b8 	bne.w	8001ff2 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d10a      	bne.n	8001ea2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d105      	bne.n	8001ea2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 80a0 	beq.w	8001fe2 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	0e1b      	lsrs	r3, r3, #24
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d907      	bls.n	8001ec2 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e09e      	b.n	8002000 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	409a      	lsls	r2, r3
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10d      	bne.n	8001ef0 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ede:	68f9      	ldr	r1, [r7, #12]
 8001ee0:	6809      	ldr	r1, [r1, #0]
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	3318      	adds	r3, #24
 8001ee8:	011b      	lsls	r3, r3, #4
 8001eea:	440b      	add	r3, r1
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	e00f      	b.n	8001f10 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001efa:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f00:	68f9      	ldr	r1, [r7, #12]
 8001f02:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001f04:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	3318      	adds	r3, #24
 8001f0a:	011b      	lsls	r3, r3, #4
 8001f0c:	440b      	add	r3, r1
 8001f0e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6819      	ldr	r1, [r3, #0]
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	691a      	ldr	r2, [r3, #16]
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	3318      	adds	r3, #24
 8001f1c:	011b      	lsls	r3, r3, #4
 8001f1e:	440b      	add	r3, r1
 8001f20:	3304      	adds	r3, #4
 8001f22:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	7d1b      	ldrb	r3, [r3, #20]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d111      	bne.n	8001f50 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	3318      	adds	r3, #24
 8001f34:	011b      	lsls	r3, r3, #4
 8001f36:	4413      	add	r3, r2
 8001f38:	3304      	adds	r3, #4
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	6811      	ldr	r1, [r2, #0]
 8001f40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	3318      	adds	r3, #24
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	440b      	add	r3, r1
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3307      	adds	r3, #7
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	061a      	lsls	r2, r3, #24
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3306      	adds	r3, #6
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	041b      	lsls	r3, r3, #16
 8001f60:	431a      	orrs	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3305      	adds	r3, #5
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	021b      	lsls	r3, r3, #8
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	3204      	adds	r2, #4
 8001f70:	7812      	ldrb	r2, [r2, #0]
 8001f72:	4610      	mov	r0, r2
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	6811      	ldr	r1, [r2, #0]
 8001f78:	ea43 0200 	orr.w	r2, r3, r0
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	011b      	lsls	r3, r3, #4
 8001f80:	440b      	add	r3, r1
 8001f82:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001f86:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3303      	adds	r3, #3
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	061a      	lsls	r2, r3, #24
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3302      	adds	r3, #2
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	041b      	lsls	r3, r3, #16
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	021b      	lsls	r3, r3, #8
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	7812      	ldrb	r2, [r2, #0]
 8001fa8:	4610      	mov	r0, r2
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	6811      	ldr	r1, [r2, #0]
 8001fae:	ea43 0200 	orr.w	r2, r3, r0
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	011b      	lsls	r3, r3, #4
 8001fb6:	440b      	add	r3, r1
 8001fb8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001fbc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	3318      	adds	r3, #24
 8001fc6:	011b      	lsls	r3, r3, #4
 8001fc8:	4413      	add	r3, r2
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	6811      	ldr	r1, [r2, #0]
 8001fd0:	f043 0201 	orr.w	r2, r3, #1
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	3318      	adds	r3, #24
 8001fd8:	011b      	lsls	r3, r3, #4
 8001fda:	440b      	add	r3, r1
 8001fdc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	e00e      	b.n	8002000 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e006      	b.n	8002000 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
  }
}
 8002000:	4618      	mov	r0, r3
 8002002:	3724      	adds	r7, #36	; 0x24
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800201c:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <__NVIC_SetPriorityGrouping+0x44>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002022:	68ba      	ldr	r2, [r7, #8]
 8002024:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002028:	4013      	ands	r3, r2
 800202a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002034:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800203c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800203e:	4a04      	ldr	r2, [pc, #16]	; (8002050 <__NVIC_SetPriorityGrouping+0x44>)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	60d3      	str	r3, [r2, #12]
}
 8002044:	bf00      	nop
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002058:	4b04      	ldr	r3, [pc, #16]	; (800206c <__NVIC_GetPriorityGrouping+0x18>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	0a1b      	lsrs	r3, r3, #8
 800205e:	f003 0307 	and.w	r3, r3, #7
}
 8002062:	4618      	mov	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207e:	2b00      	cmp	r3, #0
 8002080:	db0b      	blt.n	800209a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	f003 021f 	and.w	r2, r3, #31
 8002088:	4907      	ldr	r1, [pc, #28]	; (80020a8 <__NVIC_EnableIRQ+0x38>)
 800208a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208e:	095b      	lsrs	r3, r3, #5
 8002090:	2001      	movs	r0, #1
 8002092:	fa00 f202 	lsl.w	r2, r0, r2
 8002096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	e000e100 	.word	0xe000e100

080020ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	6039      	str	r1, [r7, #0]
 80020b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	db0a      	blt.n	80020d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	490c      	ldr	r1, [pc, #48]	; (80020f8 <__NVIC_SetPriority+0x4c>)
 80020c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ca:	0112      	lsls	r2, r2, #4
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	440b      	add	r3, r1
 80020d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d4:	e00a      	b.n	80020ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	4908      	ldr	r1, [pc, #32]	; (80020fc <__NVIC_SetPriority+0x50>)
 80020dc:	79fb      	ldrb	r3, [r7, #7]
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	3b04      	subs	r3, #4
 80020e4:	0112      	lsls	r2, r2, #4
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	440b      	add	r3, r1
 80020ea:	761a      	strb	r2, [r3, #24]
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	e000e100 	.word	0xe000e100
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002100:	b480      	push	{r7}
 8002102:	b089      	sub	sp, #36	; 0x24
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	f1c3 0307 	rsb	r3, r3, #7
 800211a:	2b04      	cmp	r3, #4
 800211c:	bf28      	it	cs
 800211e:	2304      	movcs	r3, #4
 8002120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3304      	adds	r3, #4
 8002126:	2b06      	cmp	r3, #6
 8002128:	d902      	bls.n	8002130 <NVIC_EncodePriority+0x30>
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	3b03      	subs	r3, #3
 800212e:	e000      	b.n	8002132 <NVIC_EncodePriority+0x32>
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002134:	f04f 32ff 	mov.w	r2, #4294967295
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43da      	mvns	r2, r3
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	401a      	ands	r2, r3
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002148:	f04f 31ff 	mov.w	r1, #4294967295
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	fa01 f303 	lsl.w	r3, r1, r3
 8002152:	43d9      	mvns	r1, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002158:	4313      	orrs	r3, r2
         );
}
 800215a:	4618      	mov	r0, r3
 800215c:	3724      	adds	r7, #36	; 0x24
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
	...

08002168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3b01      	subs	r3, #1
 8002174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002178:	d301      	bcc.n	800217e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800217a:	2301      	movs	r3, #1
 800217c:	e00f      	b.n	800219e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800217e:	4a0a      	ldr	r2, [pc, #40]	; (80021a8 <SysTick_Config+0x40>)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3b01      	subs	r3, #1
 8002184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002186:	210f      	movs	r1, #15
 8002188:	f04f 30ff 	mov.w	r0, #4294967295
 800218c:	f7ff ff8e 	bl	80020ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002190:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <SysTick_Config+0x40>)
 8002192:	2200      	movs	r2, #0
 8002194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002196:	4b04      	ldr	r3, [pc, #16]	; (80021a8 <SysTick_Config+0x40>)
 8002198:	2207      	movs	r2, #7
 800219a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	e000e010 	.word	0xe000e010

080021ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff ff29 	bl	800200c <__NVIC_SetPriorityGrouping>
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b086      	sub	sp, #24
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	4603      	mov	r3, r0
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
 80021ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021d4:	f7ff ff3e 	bl	8002054 <__NVIC_GetPriorityGrouping>
 80021d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	68b9      	ldr	r1, [r7, #8]
 80021de:	6978      	ldr	r0, [r7, #20]
 80021e0:	f7ff ff8e 	bl	8002100 <NVIC_EncodePriority>
 80021e4:	4602      	mov	r2, r0
 80021e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ea:	4611      	mov	r1, r2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ff5d 	bl	80020ac <__NVIC_SetPriority>
}
 80021f2:	bf00      	nop
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b082      	sub	sp, #8
 80021fe:	af00      	add	r7, sp, #0
 8002200:	4603      	mov	r3, r0
 8002202:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff ff31 	bl	8002070 <__NVIC_EnableIRQ>
}
 800220e:	bf00      	nop
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7ff ffa2 	bl	8002168 <SysTick_Config>
 8002224:	4603      	mov	r3, r0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b084      	sub	sp, #16
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800223c:	f7ff fc9c 	bl	8001b78 <HAL_GetTick>
 8002240:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d008      	beq.n	8002260 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2280      	movs	r2, #128	; 0x80
 8002252:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e052      	b.n	8002306 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0216 	bic.w	r2, r2, #22
 800226e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695a      	ldr	r2, [r3, #20]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800227e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	2b00      	cmp	r3, #0
 8002286:	d103      	bne.n	8002290 <HAL_DMA_Abort+0x62>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800228c:	2b00      	cmp	r3, #0
 800228e:	d007      	beq.n	80022a0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0208 	bic.w	r2, r2, #8
 800229e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 0201 	bic.w	r2, r2, #1
 80022ae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022b0:	e013      	b.n	80022da <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022b2:	f7ff fc61 	bl	8001b78 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b05      	cmp	r3, #5
 80022be:	d90c      	bls.n	80022da <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2220      	movs	r2, #32
 80022c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2203      	movs	r2, #3
 80022ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e015      	b.n	8002306 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1e4      	bne.n	80022b2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ec:	223f      	movs	r2, #63	; 0x3f
 80022ee:	409a      	lsls	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d004      	beq.n	800232c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2280      	movs	r2, #128	; 0x80
 8002326:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e00c      	b.n	8002346 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2205      	movs	r2, #5
 8002330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0201 	bic.w	r2, r2, #1
 8002342:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002354:	b480      	push	{r7}
 8002356:	b089      	sub	sp, #36	; 0x24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002362:	2300      	movs	r3, #0
 8002364:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002366:	2300      	movs	r3, #0
 8002368:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
 800236e:	e165      	b.n	800263c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002370:	2201      	movs	r2, #1
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	4013      	ands	r3, r2
 8002382:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	429a      	cmp	r2, r3
 800238a:	f040 8154 	bne.w	8002636 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	2b01      	cmp	r3, #1
 8002398:	d005      	beq.n	80023a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d130      	bne.n	8002408 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	2203      	movs	r2, #3
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023dc:	2201      	movs	r2, #1
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	091b      	lsrs	r3, r3, #4
 80023f2:	f003 0201 	and.w	r2, r3, #1
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 0303 	and.w	r3, r3, #3
 8002410:	2b03      	cmp	r3, #3
 8002412:	d017      	beq.n	8002444 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	2203      	movs	r2, #3
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4313      	orrs	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d123      	bne.n	8002498 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	08da      	lsrs	r2, r3, #3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3208      	adds	r2, #8
 8002458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800245c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	220f      	movs	r2, #15
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	691a      	ldr	r2, [r3, #16]
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4313      	orrs	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	08da      	lsrs	r2, r3, #3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3208      	adds	r2, #8
 8002492:	69b9      	ldr	r1, [r7, #24]
 8002494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	2203      	movs	r2, #3
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4013      	ands	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 0203 	and.w	r2, r3, #3
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 80ae 	beq.w	8002636 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	4b5d      	ldr	r3, [pc, #372]	; (8002654 <HAL_GPIO_Init+0x300>)
 80024e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e2:	4a5c      	ldr	r2, [pc, #368]	; (8002654 <HAL_GPIO_Init+0x300>)
 80024e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024e8:	6453      	str	r3, [r2, #68]	; 0x44
 80024ea:	4b5a      	ldr	r3, [pc, #360]	; (8002654 <HAL_GPIO_Init+0x300>)
 80024ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024f6:	4a58      	ldr	r2, [pc, #352]	; (8002658 <HAL_GPIO_Init+0x304>)
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	089b      	lsrs	r3, r3, #2
 80024fc:	3302      	adds	r3, #2
 80024fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	220f      	movs	r2, #15
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43db      	mvns	r3, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4013      	ands	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a4f      	ldr	r2, [pc, #316]	; (800265c <HAL_GPIO_Init+0x308>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d025      	beq.n	800256e <HAL_GPIO_Init+0x21a>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a4e      	ldr	r2, [pc, #312]	; (8002660 <HAL_GPIO_Init+0x30c>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d01f      	beq.n	800256a <HAL_GPIO_Init+0x216>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a4d      	ldr	r2, [pc, #308]	; (8002664 <HAL_GPIO_Init+0x310>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d019      	beq.n	8002566 <HAL_GPIO_Init+0x212>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a4c      	ldr	r2, [pc, #304]	; (8002668 <HAL_GPIO_Init+0x314>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d013      	beq.n	8002562 <HAL_GPIO_Init+0x20e>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a4b      	ldr	r2, [pc, #300]	; (800266c <HAL_GPIO_Init+0x318>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d00d      	beq.n	800255e <HAL_GPIO_Init+0x20a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a4a      	ldr	r2, [pc, #296]	; (8002670 <HAL_GPIO_Init+0x31c>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d007      	beq.n	800255a <HAL_GPIO_Init+0x206>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a49      	ldr	r2, [pc, #292]	; (8002674 <HAL_GPIO_Init+0x320>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d101      	bne.n	8002556 <HAL_GPIO_Init+0x202>
 8002552:	2306      	movs	r3, #6
 8002554:	e00c      	b.n	8002570 <HAL_GPIO_Init+0x21c>
 8002556:	2307      	movs	r3, #7
 8002558:	e00a      	b.n	8002570 <HAL_GPIO_Init+0x21c>
 800255a:	2305      	movs	r3, #5
 800255c:	e008      	b.n	8002570 <HAL_GPIO_Init+0x21c>
 800255e:	2304      	movs	r3, #4
 8002560:	e006      	b.n	8002570 <HAL_GPIO_Init+0x21c>
 8002562:	2303      	movs	r3, #3
 8002564:	e004      	b.n	8002570 <HAL_GPIO_Init+0x21c>
 8002566:	2302      	movs	r3, #2
 8002568:	e002      	b.n	8002570 <HAL_GPIO_Init+0x21c>
 800256a:	2301      	movs	r3, #1
 800256c:	e000      	b.n	8002570 <HAL_GPIO_Init+0x21c>
 800256e:	2300      	movs	r3, #0
 8002570:	69fa      	ldr	r2, [r7, #28]
 8002572:	f002 0203 	and.w	r2, r2, #3
 8002576:	0092      	lsls	r2, r2, #2
 8002578:	4093      	lsls	r3, r2
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4313      	orrs	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002580:	4935      	ldr	r1, [pc, #212]	; (8002658 <HAL_GPIO_Init+0x304>)
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	089b      	lsrs	r3, r3, #2
 8002586:	3302      	adds	r3, #2
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800258e:	4b3a      	ldr	r3, [pc, #232]	; (8002678 <HAL_GPIO_Init+0x324>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	43db      	mvns	r3, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4013      	ands	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025b2:	4a31      	ldr	r2, [pc, #196]	; (8002678 <HAL_GPIO_Init+0x324>)
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025b8:	4b2f      	ldr	r3, [pc, #188]	; (8002678 <HAL_GPIO_Init+0x324>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	43db      	mvns	r3, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	4313      	orrs	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025dc:	4a26      	ldr	r2, [pc, #152]	; (8002678 <HAL_GPIO_Init+0x324>)
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025e2:	4b25      	ldr	r3, [pc, #148]	; (8002678 <HAL_GPIO_Init+0x324>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	43db      	mvns	r3, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4013      	ands	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002606:	4a1c      	ldr	r2, [pc, #112]	; (8002678 <HAL_GPIO_Init+0x324>)
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800260c:	4b1a      	ldr	r3, [pc, #104]	; (8002678 <HAL_GPIO_Init+0x324>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d003      	beq.n	8002630 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002630:	4a11      	ldr	r2, [pc, #68]	; (8002678 <HAL_GPIO_Init+0x324>)
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3301      	adds	r3, #1
 800263a:	61fb      	str	r3, [r7, #28]
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	2b0f      	cmp	r3, #15
 8002640:	f67f ae96 	bls.w	8002370 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002644:	bf00      	nop
 8002646:	bf00      	nop
 8002648:	3724      	adds	r7, #36	; 0x24
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	40023800 	.word	0x40023800
 8002658:	40013800 	.word	0x40013800
 800265c:	40020000 	.word	0x40020000
 8002660:	40020400 	.word	0x40020400
 8002664:	40020800 	.word	0x40020800
 8002668:	40020c00 	.word	0x40020c00
 800266c:	40021000 	.word	0x40021000
 8002670:	40021400 	.word	0x40021400
 8002674:	40021800 	.word	0x40021800
 8002678:	40013c00 	.word	0x40013c00

0800267c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	460b      	mov	r3, r1
 8002686:	807b      	strh	r3, [r7, #2]
 8002688:	4613      	mov	r3, r2
 800268a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800268c:	787b      	ldrb	r3, [r7, #1]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002692:	887a      	ldrh	r2, [r7, #2]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002698:	e003      	b.n	80026a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800269a:	887b      	ldrh	r3, [r7, #2]
 800269c:	041a      	lsls	r2, r3, #16
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	619a      	str	r2, [r3, #24]
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e12b      	b.n	800291a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d106      	bne.n	80026dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7fe fdf2 	bl	80012c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2224      	movs	r2, #36	; 0x24
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0201 	bic.w	r2, r2, #1
 80026f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002702:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002712:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002714:	f001 f854 	bl	80037c0 <HAL_RCC_GetPCLK1Freq>
 8002718:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	4a81      	ldr	r2, [pc, #516]	; (8002924 <HAL_I2C_Init+0x274>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d807      	bhi.n	8002734 <HAL_I2C_Init+0x84>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4a80      	ldr	r2, [pc, #512]	; (8002928 <HAL_I2C_Init+0x278>)
 8002728:	4293      	cmp	r3, r2
 800272a:	bf94      	ite	ls
 800272c:	2301      	movls	r3, #1
 800272e:	2300      	movhi	r3, #0
 8002730:	b2db      	uxtb	r3, r3
 8002732:	e006      	b.n	8002742 <HAL_I2C_Init+0x92>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4a7d      	ldr	r2, [pc, #500]	; (800292c <HAL_I2C_Init+0x27c>)
 8002738:	4293      	cmp	r3, r2
 800273a:	bf94      	ite	ls
 800273c:	2301      	movls	r3, #1
 800273e:	2300      	movhi	r3, #0
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e0e7      	b.n	800291a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	4a78      	ldr	r2, [pc, #480]	; (8002930 <HAL_I2C_Init+0x280>)
 800274e:	fba2 2303 	umull	r2, r3, r2, r3
 8002752:	0c9b      	lsrs	r3, r3, #18
 8002754:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	430a      	orrs	r2, r1
 8002768:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	4a6a      	ldr	r2, [pc, #424]	; (8002924 <HAL_I2C_Init+0x274>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d802      	bhi.n	8002784 <HAL_I2C_Init+0xd4>
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	3301      	adds	r3, #1
 8002782:	e009      	b.n	8002798 <HAL_I2C_Init+0xe8>
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800278a:	fb02 f303 	mul.w	r3, r2, r3
 800278e:	4a69      	ldr	r2, [pc, #420]	; (8002934 <HAL_I2C_Init+0x284>)
 8002790:	fba2 2303 	umull	r2, r3, r2, r3
 8002794:	099b      	lsrs	r3, r3, #6
 8002796:	3301      	adds	r3, #1
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6812      	ldr	r2, [r2, #0]
 800279c:	430b      	orrs	r3, r1
 800279e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	495c      	ldr	r1, [pc, #368]	; (8002924 <HAL_I2C_Init+0x274>)
 80027b4:	428b      	cmp	r3, r1
 80027b6:	d819      	bhi.n	80027ec <HAL_I2C_Init+0x13c>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	1e59      	subs	r1, r3, #1
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80027c6:	1c59      	adds	r1, r3, #1
 80027c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80027cc:	400b      	ands	r3, r1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00a      	beq.n	80027e8 <HAL_I2C_Init+0x138>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	1e59      	subs	r1, r3, #1
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80027e0:	3301      	adds	r3, #1
 80027e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027e6:	e051      	b.n	800288c <HAL_I2C_Init+0x1dc>
 80027e8:	2304      	movs	r3, #4
 80027ea:	e04f      	b.n	800288c <HAL_I2C_Init+0x1dc>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d111      	bne.n	8002818 <HAL_I2C_Init+0x168>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	1e58      	subs	r0, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6859      	ldr	r1, [r3, #4]
 80027fc:	460b      	mov	r3, r1
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	440b      	add	r3, r1
 8002802:	fbb0 f3f3 	udiv	r3, r0, r3
 8002806:	3301      	adds	r3, #1
 8002808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800280c:	2b00      	cmp	r3, #0
 800280e:	bf0c      	ite	eq
 8002810:	2301      	moveq	r3, #1
 8002812:	2300      	movne	r3, #0
 8002814:	b2db      	uxtb	r3, r3
 8002816:	e012      	b.n	800283e <HAL_I2C_Init+0x18e>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	1e58      	subs	r0, r3, #1
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6859      	ldr	r1, [r3, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	0099      	lsls	r1, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	fbb0 f3f3 	udiv	r3, r0, r3
 800282e:	3301      	adds	r3, #1
 8002830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002834:	2b00      	cmp	r3, #0
 8002836:	bf0c      	ite	eq
 8002838:	2301      	moveq	r3, #1
 800283a:	2300      	movne	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <HAL_I2C_Init+0x196>
 8002842:	2301      	movs	r3, #1
 8002844:	e022      	b.n	800288c <HAL_I2C_Init+0x1dc>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10e      	bne.n	800286c <HAL_I2C_Init+0x1bc>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	1e58      	subs	r0, r3, #1
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6859      	ldr	r1, [r3, #4]
 8002856:	460b      	mov	r3, r1
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	440b      	add	r3, r1
 800285c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002860:	3301      	adds	r3, #1
 8002862:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002866:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800286a:	e00f      	b.n	800288c <HAL_I2C_Init+0x1dc>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	1e58      	subs	r0, r3, #1
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6859      	ldr	r1, [r3, #4]
 8002874:	460b      	mov	r3, r1
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	440b      	add	r3, r1
 800287a:	0099      	lsls	r1, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002882:	3301      	adds	r3, #1
 8002884:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002888:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800288c:	6879      	ldr	r1, [r7, #4]
 800288e:	6809      	ldr	r1, [r1, #0]
 8002890:	4313      	orrs	r3, r2
 8002892:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69da      	ldr	r2, [r3, #28]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	431a      	orrs	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6911      	ldr	r1, [r2, #16]
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	68d2      	ldr	r2, [r2, #12]
 80028c6:	4311      	orrs	r1, r2
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	430b      	orrs	r3, r1
 80028ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	695a      	ldr	r2, [r3, #20]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0201 	orr.w	r2, r2, #1
 80028fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2220      	movs	r2, #32
 8002906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	000186a0 	.word	0x000186a0
 8002928:	001e847f 	.word	0x001e847f
 800292c:	003d08ff 	.word	0x003d08ff
 8002930:	431bde83 	.word	0x431bde83
 8002934:	10624dd3 	.word	0x10624dd3

08002938 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b088      	sub	sp, #32
 800293c:	af02      	add	r7, sp, #8
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	607a      	str	r2, [r7, #4]
 8002942:	461a      	mov	r2, r3
 8002944:	460b      	mov	r3, r1
 8002946:	817b      	strh	r3, [r7, #10]
 8002948:	4613      	mov	r3, r2
 800294a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800294c:	f7ff f914 	bl	8001b78 <HAL_GetTick>
 8002950:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b20      	cmp	r3, #32
 800295c:	f040 80e0 	bne.w	8002b20 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	2319      	movs	r3, #25
 8002966:	2201      	movs	r2, #1
 8002968:	4970      	ldr	r1, [pc, #448]	; (8002b2c <HAL_I2C_Master_Transmit+0x1f4>)
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 fc58 	bl	8003220 <I2C_WaitOnFlagUntilTimeout>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002976:	2302      	movs	r3, #2
 8002978:	e0d3      	b.n	8002b22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002980:	2b01      	cmp	r3, #1
 8002982:	d101      	bne.n	8002988 <HAL_I2C_Master_Transmit+0x50>
 8002984:	2302      	movs	r3, #2
 8002986:	e0cc      	b.n	8002b22 <HAL_I2C_Master_Transmit+0x1ea>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b01      	cmp	r3, #1
 800299c:	d007      	beq.n	80029ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f042 0201 	orr.w	r2, r2, #1
 80029ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2221      	movs	r2, #33	; 0x21
 80029c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2210      	movs	r2, #16
 80029ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	893a      	ldrh	r2, [r7, #8]
 80029de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	4a50      	ldr	r2, [pc, #320]	; (8002b30 <HAL_I2C_Master_Transmit+0x1f8>)
 80029ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80029f0:	8979      	ldrh	r1, [r7, #10]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	6a3a      	ldr	r2, [r7, #32]
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f000 fac2 	bl	8002f80 <I2C_MasterRequestWrite>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e08d      	b.n	8002b22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a06:	2300      	movs	r3, #0
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	613b      	str	r3, [r7, #16]
 8002a1a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002a1c:	e066      	b.n	8002aec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	6a39      	ldr	r1, [r7, #32]
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 fcd2 	bl	80033cc <I2C_WaitOnTXEFlagUntilTimeout>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00d      	beq.n	8002a4a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	d107      	bne.n	8002a46 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e06b      	b.n	8002b22 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4e:	781a      	ldrb	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	1c5a      	adds	r2, r3, #1
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	3b01      	subs	r3, #1
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a72:	3b01      	subs	r3, #1
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b04      	cmp	r3, #4
 8002a86:	d11b      	bne.n	8002ac0 <HAL_I2C_Master_Transmit+0x188>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d017      	beq.n	8002ac0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	781a      	ldrb	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	1c5a      	adds	r2, r3, #1
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	3b01      	subs	r3, #1
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	6a39      	ldr	r1, [r7, #32]
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f000 fcc2 	bl	800344e <I2C_WaitOnBTFFlagUntilTimeout>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00d      	beq.n	8002aec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad4:	2b04      	cmp	r3, #4
 8002ad6:	d107      	bne.n	8002ae8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ae6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e01a      	b.n	8002b22 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d194      	bne.n	8002a1e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2220      	movs	r2, #32
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	e000      	b.n	8002b22 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b20:	2302      	movs	r3, #2
  }
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	00100002 	.word	0x00100002
 8002b30:	ffff0000 	.word	0xffff0000

08002b34 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b08c      	sub	sp, #48	; 0x30
 8002b38:	af02      	add	r7, sp, #8
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	607a      	str	r2, [r7, #4]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	460b      	mov	r3, r1
 8002b42:	817b      	strh	r3, [r7, #10]
 8002b44:	4613      	mov	r3, r2
 8002b46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b48:	f7ff f816 	bl	8001b78 <HAL_GetTick>
 8002b4c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b20      	cmp	r3, #32
 8002b58:	f040 820b 	bne.w	8002f72 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	2319      	movs	r3, #25
 8002b62:	2201      	movs	r2, #1
 8002b64:	497c      	ldr	r1, [pc, #496]	; (8002d58 <HAL_I2C_Master_Receive+0x224>)
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 fb5a 	bl	8003220 <I2C_WaitOnFlagUntilTimeout>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002b72:	2302      	movs	r3, #2
 8002b74:	e1fe      	b.n	8002f74 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d101      	bne.n	8002b84 <HAL_I2C_Master_Receive+0x50>
 8002b80:	2302      	movs	r3, #2
 8002b82:	e1f7      	b.n	8002f74 <HAL_I2C_Master_Receive+0x440>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d007      	beq.n	8002baa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f042 0201 	orr.w	r2, r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bb8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2222      	movs	r2, #34	; 0x22
 8002bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2210      	movs	r2, #16
 8002bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	893a      	ldrh	r2, [r7, #8]
 8002bda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	4a5c      	ldr	r2, [pc, #368]	; (8002d5c <HAL_I2C_Master_Receive+0x228>)
 8002bea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002bec:	8979      	ldrh	r1, [r7, #10]
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 fa46 	bl	8003084 <I2C_MasterRequestRead>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e1b8      	b.n	8002f74 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d113      	bne.n	8002c32 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	623b      	str	r3, [r7, #32]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	623b      	str	r3, [r7, #32]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	623b      	str	r3, [r7, #32]
 8002c1e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	e18c      	b.n	8002f4c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d11b      	bne.n	8002c72 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61fb      	str	r3, [r7, #28]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	61fb      	str	r3, [r7, #28]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	61fb      	str	r3, [r7, #28]
 8002c5e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	e16c      	b.n	8002f4c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d11b      	bne.n	8002cb2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c88:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61bb      	str	r3, [r7, #24]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	61bb      	str	r3, [r7, #24]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	61bb      	str	r3, [r7, #24]
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	e14c      	b.n	8002f4c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	617b      	str	r3, [r7, #20]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	617b      	str	r3, [r7, #20]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	617b      	str	r3, [r7, #20]
 8002cd6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002cd8:	e138      	b.n	8002f4c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cde:	2b03      	cmp	r3, #3
 8002ce0:	f200 80f1 	bhi.w	8002ec6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d123      	bne.n	8002d34 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 fbed 	bl	80034d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e139      	b.n	8002f74 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691a      	ldr	r2, [r3, #16]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	1c5a      	adds	r2, r3, #1
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d32:	e10b      	b.n	8002f4c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d14e      	bne.n	8002dda <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	9300      	str	r3, [sp, #0]
 8002d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d42:	2200      	movs	r2, #0
 8002d44:	4906      	ldr	r1, [pc, #24]	; (8002d60 <HAL_I2C_Master_Receive+0x22c>)
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f000 fa6a 	bl	8003220 <I2C_WaitOnFlagUntilTimeout>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d008      	beq.n	8002d64 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e10e      	b.n	8002f74 <HAL_I2C_Master_Receive+0x440>
 8002d56:	bf00      	nop
 8002d58:	00100002 	.word	0x00100002
 8002d5c:	ffff0000 	.word	0xffff0000
 8002d60:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	691a      	ldr	r2, [r3, #16]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	b2d2      	uxtb	r2, r2
 8002d80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	1c5a      	adds	r2, r3, #1
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d90:	3b01      	subs	r3, #1
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	691a      	ldr	r2, [r3, #16]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	b2d2      	uxtb	r2, r2
 8002db2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002dd8:	e0b8      	b.n	8002f4c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de0:	2200      	movs	r2, #0
 8002de2:	4966      	ldr	r1, [pc, #408]	; (8002f7c <HAL_I2C_Master_Receive+0x448>)
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f000 fa1b 	bl	8003220 <I2C_WaitOnFlagUntilTimeout>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e0bf      	b.n	8002f74 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691a      	ldr	r2, [r3, #16]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	494f      	ldr	r1, [pc, #316]	; (8002f7c <HAL_I2C_Master_Receive+0x448>)
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f000 f9ed 	bl	8003220 <I2C_WaitOnFlagUntilTimeout>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e091      	b.n	8002f74 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	691a      	ldr	r2, [r3, #16]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	1c5a      	adds	r2, r3, #1
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	1c5a      	adds	r2, r3, #1
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ec4:	e042      	b.n	8002f4c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 fb00 	bl	80034d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e04c      	b.n	8002f74 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	691a      	ldr	r2, [r3, #16]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	1c5a      	adds	r2, r3, #1
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	3b01      	subs	r3, #1
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	f003 0304 	and.w	r3, r3, #4
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d118      	bne.n	8002f4c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	691a      	ldr	r2, [r3, #16]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	b2d2      	uxtb	r2, r2
 8002f26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	1c5a      	adds	r2, r3, #1
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f36:	3b01      	subs	r3, #1
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	3b01      	subs	r3, #1
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f47f aec2 	bne.w	8002cda <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	e000      	b.n	8002f74 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002f72:	2302      	movs	r3, #2
  }
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3728      	adds	r7, #40	; 0x28
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	00010004 	.word	0x00010004

08002f80 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b088      	sub	sp, #32
 8002f84:	af02      	add	r7, sp, #8
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	607a      	str	r2, [r7, #4]
 8002f8a:	603b      	str	r3, [r7, #0]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f94:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	d006      	beq.n	8002faa <I2C_MasterRequestWrite+0x2a>
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d003      	beq.n	8002faa <I2C_MasterRequestWrite+0x2a>
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002fa8:	d108      	bne.n	8002fbc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	e00b      	b.n	8002fd4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc0:	2b12      	cmp	r3, #18
 8002fc2:	d107      	bne.n	8002fd4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fd2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 f91d 	bl	8003220 <I2C_WaitOnFlagUntilTimeout>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00d      	beq.n	8003008 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ffa:	d103      	bne.n	8003004 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003002:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e035      	b.n	8003074 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003010:	d108      	bne.n	8003024 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003012:	897b      	ldrh	r3, [r7, #10]
 8003014:	b2db      	uxtb	r3, r3
 8003016:	461a      	mov	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003020:	611a      	str	r2, [r3, #16]
 8003022:	e01b      	b.n	800305c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003024:	897b      	ldrh	r3, [r7, #10]
 8003026:	11db      	asrs	r3, r3, #7
 8003028:	b2db      	uxtb	r3, r3
 800302a:	f003 0306 	and.w	r3, r3, #6
 800302e:	b2db      	uxtb	r3, r3
 8003030:	f063 030f 	orn	r3, r3, #15
 8003034:	b2da      	uxtb	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	490e      	ldr	r1, [pc, #56]	; (800307c <I2C_MasterRequestWrite+0xfc>)
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 f943 	bl	80032ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e010      	b.n	8003074 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003052:	897b      	ldrh	r3, [r7, #10]
 8003054:	b2da      	uxtb	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	4907      	ldr	r1, [pc, #28]	; (8003080 <I2C_MasterRequestWrite+0x100>)
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 f933 	bl	80032ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	00010008 	.word	0x00010008
 8003080:	00010002 	.word	0x00010002

08003084 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af02      	add	r7, sp, #8
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	607a      	str	r2, [r7, #4]
 800308e:	603b      	str	r3, [r7, #0]
 8003090:	460b      	mov	r3, r1
 8003092:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003098:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030a8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d006      	beq.n	80030be <I2C_MasterRequestRead+0x3a>
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d003      	beq.n	80030be <I2C_MasterRequestRead+0x3a>
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030bc:	d108      	bne.n	80030d0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	e00b      	b.n	80030e8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d4:	2b11      	cmp	r3, #17
 80030d6:	d107      	bne.n	80030e8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 f893 	bl	8003220 <I2C_WaitOnFlagUntilTimeout>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00d      	beq.n	800311c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800310e:	d103      	bne.n	8003118 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003116:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e079      	b.n	8003210 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003124:	d108      	bne.n	8003138 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003126:	897b      	ldrh	r3, [r7, #10]
 8003128:	b2db      	uxtb	r3, r3
 800312a:	f043 0301 	orr.w	r3, r3, #1
 800312e:	b2da      	uxtb	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	611a      	str	r2, [r3, #16]
 8003136:	e05f      	b.n	80031f8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003138:	897b      	ldrh	r3, [r7, #10]
 800313a:	11db      	asrs	r3, r3, #7
 800313c:	b2db      	uxtb	r3, r3
 800313e:	f003 0306 	and.w	r3, r3, #6
 8003142:	b2db      	uxtb	r3, r3
 8003144:	f063 030f 	orn	r3, r3, #15
 8003148:	b2da      	uxtb	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	4930      	ldr	r1, [pc, #192]	; (8003218 <I2C_MasterRequestRead+0x194>)
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 f8b9 	bl	80032ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e054      	b.n	8003210 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003166:	897b      	ldrh	r3, [r7, #10]
 8003168:	b2da      	uxtb	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	4929      	ldr	r1, [pc, #164]	; (800321c <I2C_MasterRequestRead+0x198>)
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 f8a9 	bl	80032ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e044      	b.n	8003210 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003186:	2300      	movs	r3, #0
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	613b      	str	r3, [r7, #16]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	613b      	str	r3, [r7, #16]
 800319a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031aa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f000 f831 	bl	8003220 <I2C_WaitOnFlagUntilTimeout>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00d      	beq.n	80031e0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031d2:	d103      	bne.n	80031dc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031da:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e017      	b.n	8003210 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80031e0:	897b      	ldrh	r3, [r7, #10]
 80031e2:	11db      	asrs	r3, r3, #7
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	f003 0306 	and.w	r3, r3, #6
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	f063 030e 	orn	r3, r3, #14
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	4907      	ldr	r1, [pc, #28]	; (800321c <I2C_MasterRequestRead+0x198>)
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 f865 	bl	80032ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	00010008 	.word	0x00010008
 800321c:	00010002 	.word	0x00010002

08003220 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	603b      	str	r3, [r7, #0]
 800322c:	4613      	mov	r3, r2
 800322e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003230:	e025      	b.n	800327e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003238:	d021      	beq.n	800327e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800323a:	f7fe fc9d 	bl	8001b78 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d302      	bcc.n	8003250 <I2C_WaitOnFlagUntilTimeout+0x30>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d116      	bne.n	800327e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2220      	movs	r2, #32
 800325a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	f043 0220 	orr.w	r2, r3, #32
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e023      	b.n	80032c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	0c1b      	lsrs	r3, r3, #16
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b01      	cmp	r3, #1
 8003286:	d10d      	bne.n	80032a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	43da      	mvns	r2, r3
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	4013      	ands	r3, r2
 8003294:	b29b      	uxth	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	bf0c      	ite	eq
 800329a:	2301      	moveq	r3, #1
 800329c:	2300      	movne	r3, #0
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	461a      	mov	r2, r3
 80032a2:	e00c      	b.n	80032be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	43da      	mvns	r2, r3
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	4013      	ands	r3, r2
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	bf0c      	ite	eq
 80032b6:	2301      	moveq	r3, #1
 80032b8:	2300      	movne	r3, #0
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	461a      	mov	r2, r3
 80032be:	79fb      	ldrb	r3, [r7, #7]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d0b6      	beq.n	8003232 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b084      	sub	sp, #16
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	60f8      	str	r0, [r7, #12]
 80032d6:	60b9      	str	r1, [r7, #8]
 80032d8:	607a      	str	r2, [r7, #4]
 80032da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032dc:	e051      	b.n	8003382 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ec:	d123      	bne.n	8003336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003306:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2220      	movs	r2, #32
 8003312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	f043 0204 	orr.w	r2, r3, #4
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e046      	b.n	80033c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333c:	d021      	beq.n	8003382 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800333e:	f7fe fc1b 	bl	8001b78 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	429a      	cmp	r2, r3
 800334c:	d302      	bcc.n	8003354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d116      	bne.n	8003382 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2220      	movs	r2, #32
 800335e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	f043 0220 	orr.w	r2, r3, #32
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e020      	b.n	80033c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	0c1b      	lsrs	r3, r3, #16
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b01      	cmp	r3, #1
 800338a:	d10c      	bne.n	80033a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	43da      	mvns	r2, r3
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	4013      	ands	r3, r2
 8003398:	b29b      	uxth	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	bf14      	ite	ne
 800339e:	2301      	movne	r3, #1
 80033a0:	2300      	moveq	r3, #0
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	e00b      	b.n	80033be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	43da      	mvns	r2, r3
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	4013      	ands	r3, r2
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	bf14      	ite	ne
 80033b8:	2301      	movne	r3, #1
 80033ba:	2300      	moveq	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d18d      	bne.n	80032de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033d8:	e02d      	b.n	8003436 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 f8ce 	bl	800357c <I2C_IsAcknowledgeFailed>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e02d      	b.n	8003446 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f0:	d021      	beq.n	8003436 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f2:	f7fe fbc1 	bl	8001b78 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d302      	bcc.n	8003408 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d116      	bne.n	8003436 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2220      	movs	r2, #32
 8003412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	f043 0220 	orr.w	r2, r3, #32
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e007      	b.n	8003446 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003440:	2b80      	cmp	r3, #128	; 0x80
 8003442:	d1ca      	bne.n	80033da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b084      	sub	sp, #16
 8003452:	af00      	add	r7, sp, #0
 8003454:	60f8      	str	r0, [r7, #12]
 8003456:	60b9      	str	r1, [r7, #8]
 8003458:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800345a:	e02d      	b.n	80034b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f000 f88d 	bl	800357c <I2C_IsAcknowledgeFailed>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e02d      	b.n	80034c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003472:	d021      	beq.n	80034b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003474:	f7fe fb80 	bl	8001b78 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	429a      	cmp	r2, r3
 8003482:	d302      	bcc.n	800348a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d116      	bne.n	80034b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2220      	movs	r2, #32
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	f043 0220 	orr.w	r2, r3, #32
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e007      	b.n	80034c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	f003 0304 	and.w	r3, r3, #4
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	d1ca      	bne.n	800345c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034dc:	e042      	b.n	8003564 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	f003 0310 	and.w	r3, r3, #16
 80034e8:	2b10      	cmp	r3, #16
 80034ea:	d119      	bne.n	8003520 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f06f 0210 	mvn.w	r2, #16
 80034f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2220      	movs	r2, #32
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e029      	b.n	8003574 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003520:	f7fe fb2a 	bl	8001b78 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	429a      	cmp	r2, r3
 800352e:	d302      	bcc.n	8003536 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d116      	bne.n	8003564 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2220      	movs	r2, #32
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	f043 0220 	orr.w	r2, r3, #32
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e007      	b.n	8003574 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356e:	2b40      	cmp	r3, #64	; 0x40
 8003570:	d1b5      	bne.n	80034de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800358e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003592:	d11b      	bne.n	80035cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800359c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2220      	movs	r2, #32
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	f043 0204 	orr.w	r2, r3, #4
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e000      	b.n	80035ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
	...

080035dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e0cc      	b.n	800378a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035f0:	4b68      	ldr	r3, [pc, #416]	; (8003794 <HAL_RCC_ClockConfig+0x1b8>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 030f 	and.w	r3, r3, #15
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d90c      	bls.n	8003618 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fe:	4b65      	ldr	r3, [pc, #404]	; (8003794 <HAL_RCC_ClockConfig+0x1b8>)
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003606:	4b63      	ldr	r3, [pc, #396]	; (8003794 <HAL_RCC_ClockConfig+0x1b8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 030f 	and.w	r3, r3, #15
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	429a      	cmp	r2, r3
 8003612:	d001      	beq.n	8003618 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e0b8      	b.n	800378a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d020      	beq.n	8003666 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0304 	and.w	r3, r3, #4
 800362c:	2b00      	cmp	r3, #0
 800362e:	d005      	beq.n	800363c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003630:	4b59      	ldr	r3, [pc, #356]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	4a58      	ldr	r2, [pc, #352]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 8003636:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800363a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	2b00      	cmp	r3, #0
 8003646:	d005      	beq.n	8003654 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003648:	4b53      	ldr	r3, [pc, #332]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	4a52      	ldr	r2, [pc, #328]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 800364e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003652:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003654:	4b50      	ldr	r3, [pc, #320]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	494d      	ldr	r1, [pc, #308]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 8003662:	4313      	orrs	r3, r2
 8003664:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d044      	beq.n	80036fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d107      	bne.n	800368a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800367a:	4b47      	ldr	r3, [pc, #284]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d119      	bne.n	80036ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e07f      	b.n	800378a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2b02      	cmp	r3, #2
 8003690:	d003      	beq.n	800369a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003696:	2b03      	cmp	r3, #3
 8003698:	d107      	bne.n	80036aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800369a:	4b3f      	ldr	r3, [pc, #252]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d109      	bne.n	80036ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e06f      	b.n	800378a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036aa:	4b3b      	ldr	r3, [pc, #236]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e067      	b.n	800378a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ba:	4b37      	ldr	r3, [pc, #220]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f023 0203 	bic.w	r2, r3, #3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	4934      	ldr	r1, [pc, #208]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036cc:	f7fe fa54 	bl	8001b78 <HAL_GetTick>
 80036d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d2:	e00a      	b.n	80036ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036d4:	f7fe fa50 	bl	8001b78 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e04f      	b.n	800378a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ea:	4b2b      	ldr	r3, [pc, #172]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 020c 	and.w	r2, r3, #12
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d1eb      	bne.n	80036d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036fc:	4b25      	ldr	r3, [pc, #148]	; (8003794 <HAL_RCC_ClockConfig+0x1b8>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 030f 	and.w	r3, r3, #15
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	429a      	cmp	r2, r3
 8003708:	d20c      	bcs.n	8003724 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370a:	4b22      	ldr	r3, [pc, #136]	; (8003794 <HAL_RCC_ClockConfig+0x1b8>)
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	b2d2      	uxtb	r2, r2
 8003710:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003712:	4b20      	ldr	r3, [pc, #128]	; (8003794 <HAL_RCC_ClockConfig+0x1b8>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	429a      	cmp	r2, r3
 800371e:	d001      	beq.n	8003724 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e032      	b.n	800378a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	2b00      	cmp	r3, #0
 800372e:	d008      	beq.n	8003742 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003730:	4b19      	ldr	r3, [pc, #100]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	4916      	ldr	r1, [pc, #88]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 800373e:	4313      	orrs	r3, r2
 8003740:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0308 	and.w	r3, r3, #8
 800374a:	2b00      	cmp	r3, #0
 800374c:	d009      	beq.n	8003762 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800374e:	4b12      	ldr	r3, [pc, #72]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	490e      	ldr	r1, [pc, #56]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	4313      	orrs	r3, r2
 8003760:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003762:	f000 f855 	bl	8003810 <HAL_RCC_GetSysClockFreq>
 8003766:	4602      	mov	r2, r0
 8003768:	4b0b      	ldr	r3, [pc, #44]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	091b      	lsrs	r3, r3, #4
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	490a      	ldr	r1, [pc, #40]	; (800379c <HAL_RCC_ClockConfig+0x1c0>)
 8003774:	5ccb      	ldrb	r3, [r1, r3]
 8003776:	fa22 f303 	lsr.w	r3, r2, r3
 800377a:	4a09      	ldr	r2, [pc, #36]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 800377c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800377e:	4b09      	ldr	r3, [pc, #36]	; (80037a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f7fe f9b4 	bl	8001af0 <HAL_InitTick>

  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	40023c00 	.word	0x40023c00
 8003798:	40023800 	.word	0x40023800
 800379c:	0800638c 	.word	0x0800638c
 80037a0:	20000000 	.word	0x20000000
 80037a4:	20000004 	.word	0x20000004

080037a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037ac:	4b03      	ldr	r3, [pc, #12]	; (80037bc <HAL_RCC_GetHCLKFreq+0x14>)
 80037ae:	681b      	ldr	r3, [r3, #0]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	20000000 	.word	0x20000000

080037c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037c4:	f7ff fff0 	bl	80037a8 <HAL_RCC_GetHCLKFreq>
 80037c8:	4602      	mov	r2, r0
 80037ca:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	0a9b      	lsrs	r3, r3, #10
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	4903      	ldr	r1, [pc, #12]	; (80037e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037d6:	5ccb      	ldrb	r3, [r1, r3]
 80037d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037dc:	4618      	mov	r0, r3
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40023800 	.word	0x40023800
 80037e4:	0800639c 	.word	0x0800639c

080037e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037ec:	f7ff ffdc 	bl	80037a8 <HAL_RCC_GetHCLKFreq>
 80037f0:	4602      	mov	r2, r0
 80037f2:	4b05      	ldr	r3, [pc, #20]	; (8003808 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	0b5b      	lsrs	r3, r3, #13
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	4903      	ldr	r1, [pc, #12]	; (800380c <HAL_RCC_GetPCLK2Freq+0x24>)
 80037fe:	5ccb      	ldrb	r3, [r1, r3]
 8003800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003804:	4618      	mov	r0, r3
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40023800 	.word	0x40023800
 800380c:	0800639c 	.word	0x0800639c

08003810 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003814:	b0ae      	sub	sp, #184	; 0xb8
 8003816:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003818:	2300      	movs	r3, #0
 800381a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800381e:	2300      	movs	r3, #0
 8003820:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003824:	2300      	movs	r3, #0
 8003826:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800382a:	2300      	movs	r3, #0
 800382c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003830:	2300      	movs	r3, #0
 8003832:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003836:	4bcb      	ldr	r3, [pc, #812]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x354>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 030c 	and.w	r3, r3, #12
 800383e:	2b0c      	cmp	r3, #12
 8003840:	f200 8206 	bhi.w	8003c50 <HAL_RCC_GetSysClockFreq+0x440>
 8003844:	a201      	add	r2, pc, #4	; (adr r2, 800384c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800384a:	bf00      	nop
 800384c:	08003881 	.word	0x08003881
 8003850:	08003c51 	.word	0x08003c51
 8003854:	08003c51 	.word	0x08003c51
 8003858:	08003c51 	.word	0x08003c51
 800385c:	08003889 	.word	0x08003889
 8003860:	08003c51 	.word	0x08003c51
 8003864:	08003c51 	.word	0x08003c51
 8003868:	08003c51 	.word	0x08003c51
 800386c:	08003891 	.word	0x08003891
 8003870:	08003c51 	.word	0x08003c51
 8003874:	08003c51 	.word	0x08003c51
 8003878:	08003c51 	.word	0x08003c51
 800387c:	08003a81 	.word	0x08003a81
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003880:	4bb9      	ldr	r3, [pc, #740]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x358>)
 8003882:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003886:	e1e7      	b.n	8003c58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003888:	4bb8      	ldr	r3, [pc, #736]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x35c>)
 800388a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800388e:	e1e3      	b.n	8003c58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003890:	4bb4      	ldr	r3, [pc, #720]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x354>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003898:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800389c:	4bb1      	ldr	r3, [pc, #708]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x354>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d071      	beq.n	800398c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038a8:	4bae      	ldr	r3, [pc, #696]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x354>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	099b      	lsrs	r3, r3, #6
 80038ae:	2200      	movs	r2, #0
 80038b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80038b4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80038b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80038bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80038c4:	2300      	movs	r3, #0
 80038c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80038ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80038ce:	4622      	mov	r2, r4
 80038d0:	462b      	mov	r3, r5
 80038d2:	f04f 0000 	mov.w	r0, #0
 80038d6:	f04f 0100 	mov.w	r1, #0
 80038da:	0159      	lsls	r1, r3, #5
 80038dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038e0:	0150      	lsls	r0, r2, #5
 80038e2:	4602      	mov	r2, r0
 80038e4:	460b      	mov	r3, r1
 80038e6:	4621      	mov	r1, r4
 80038e8:	1a51      	subs	r1, r2, r1
 80038ea:	6439      	str	r1, [r7, #64]	; 0x40
 80038ec:	4629      	mov	r1, r5
 80038ee:	eb63 0301 	sbc.w	r3, r3, r1
 80038f2:	647b      	str	r3, [r7, #68]	; 0x44
 80038f4:	f04f 0200 	mov.w	r2, #0
 80038f8:	f04f 0300 	mov.w	r3, #0
 80038fc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003900:	4649      	mov	r1, r9
 8003902:	018b      	lsls	r3, r1, #6
 8003904:	4641      	mov	r1, r8
 8003906:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800390a:	4641      	mov	r1, r8
 800390c:	018a      	lsls	r2, r1, #6
 800390e:	4641      	mov	r1, r8
 8003910:	1a51      	subs	r1, r2, r1
 8003912:	63b9      	str	r1, [r7, #56]	; 0x38
 8003914:	4649      	mov	r1, r9
 8003916:	eb63 0301 	sbc.w	r3, r3, r1
 800391a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800391c:	f04f 0200 	mov.w	r2, #0
 8003920:	f04f 0300 	mov.w	r3, #0
 8003924:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003928:	4649      	mov	r1, r9
 800392a:	00cb      	lsls	r3, r1, #3
 800392c:	4641      	mov	r1, r8
 800392e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003932:	4641      	mov	r1, r8
 8003934:	00ca      	lsls	r2, r1, #3
 8003936:	4610      	mov	r0, r2
 8003938:	4619      	mov	r1, r3
 800393a:	4603      	mov	r3, r0
 800393c:	4622      	mov	r2, r4
 800393e:	189b      	adds	r3, r3, r2
 8003940:	633b      	str	r3, [r7, #48]	; 0x30
 8003942:	462b      	mov	r3, r5
 8003944:	460a      	mov	r2, r1
 8003946:	eb42 0303 	adc.w	r3, r2, r3
 800394a:	637b      	str	r3, [r7, #52]	; 0x34
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	f04f 0300 	mov.w	r3, #0
 8003954:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003958:	4629      	mov	r1, r5
 800395a:	024b      	lsls	r3, r1, #9
 800395c:	4621      	mov	r1, r4
 800395e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003962:	4621      	mov	r1, r4
 8003964:	024a      	lsls	r2, r1, #9
 8003966:	4610      	mov	r0, r2
 8003968:	4619      	mov	r1, r3
 800396a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800396e:	2200      	movs	r2, #0
 8003970:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003974:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003978:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800397c:	f7fc fce8 	bl	8000350 <__aeabi_uldivmod>
 8003980:	4602      	mov	r2, r0
 8003982:	460b      	mov	r3, r1
 8003984:	4613      	mov	r3, r2
 8003986:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800398a:	e067      	b.n	8003a5c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800398c:	4b75      	ldr	r3, [pc, #468]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x354>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	099b      	lsrs	r3, r3, #6
 8003992:	2200      	movs	r2, #0
 8003994:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003998:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800399c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80039a6:	2300      	movs	r3, #0
 80039a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80039aa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80039ae:	4622      	mov	r2, r4
 80039b0:	462b      	mov	r3, r5
 80039b2:	f04f 0000 	mov.w	r0, #0
 80039b6:	f04f 0100 	mov.w	r1, #0
 80039ba:	0159      	lsls	r1, r3, #5
 80039bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039c0:	0150      	lsls	r0, r2, #5
 80039c2:	4602      	mov	r2, r0
 80039c4:	460b      	mov	r3, r1
 80039c6:	4621      	mov	r1, r4
 80039c8:	1a51      	subs	r1, r2, r1
 80039ca:	62b9      	str	r1, [r7, #40]	; 0x28
 80039cc:	4629      	mov	r1, r5
 80039ce:	eb63 0301 	sbc.w	r3, r3, r1
 80039d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039d4:	f04f 0200 	mov.w	r2, #0
 80039d8:	f04f 0300 	mov.w	r3, #0
 80039dc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80039e0:	4649      	mov	r1, r9
 80039e2:	018b      	lsls	r3, r1, #6
 80039e4:	4641      	mov	r1, r8
 80039e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039ea:	4641      	mov	r1, r8
 80039ec:	018a      	lsls	r2, r1, #6
 80039ee:	4641      	mov	r1, r8
 80039f0:	ebb2 0a01 	subs.w	sl, r2, r1
 80039f4:	4649      	mov	r1, r9
 80039f6:	eb63 0b01 	sbc.w	fp, r3, r1
 80039fa:	f04f 0200 	mov.w	r2, #0
 80039fe:	f04f 0300 	mov.w	r3, #0
 8003a02:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a06:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a0e:	4692      	mov	sl, r2
 8003a10:	469b      	mov	fp, r3
 8003a12:	4623      	mov	r3, r4
 8003a14:	eb1a 0303 	adds.w	r3, sl, r3
 8003a18:	623b      	str	r3, [r7, #32]
 8003a1a:	462b      	mov	r3, r5
 8003a1c:	eb4b 0303 	adc.w	r3, fp, r3
 8003a20:	627b      	str	r3, [r7, #36]	; 0x24
 8003a22:	f04f 0200 	mov.w	r2, #0
 8003a26:	f04f 0300 	mov.w	r3, #0
 8003a2a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003a2e:	4629      	mov	r1, r5
 8003a30:	028b      	lsls	r3, r1, #10
 8003a32:	4621      	mov	r1, r4
 8003a34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a38:	4621      	mov	r1, r4
 8003a3a:	028a      	lsls	r2, r1, #10
 8003a3c:	4610      	mov	r0, r2
 8003a3e:	4619      	mov	r1, r3
 8003a40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a44:	2200      	movs	r2, #0
 8003a46:	673b      	str	r3, [r7, #112]	; 0x70
 8003a48:	677a      	str	r2, [r7, #116]	; 0x74
 8003a4a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003a4e:	f7fc fc7f 	bl	8000350 <__aeabi_uldivmod>
 8003a52:	4602      	mov	r2, r0
 8003a54:	460b      	mov	r3, r1
 8003a56:	4613      	mov	r3, r2
 8003a58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a5c:	4b41      	ldr	r3, [pc, #260]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	0c1b      	lsrs	r3, r3, #16
 8003a62:	f003 0303 	and.w	r3, r3, #3
 8003a66:	3301      	adds	r3, #1
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003a6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003a7e:	e0eb      	b.n	8003c58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a80:	4b38      	ldr	r3, [pc, #224]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a8c:	4b35      	ldr	r3, [pc, #212]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d06b      	beq.n	8003b70 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a98:	4b32      	ldr	r3, [pc, #200]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	099b      	lsrs	r3, r3, #6
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003aa2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003aa4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aaa:	663b      	str	r3, [r7, #96]	; 0x60
 8003aac:	2300      	movs	r3, #0
 8003aae:	667b      	str	r3, [r7, #100]	; 0x64
 8003ab0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003ab4:	4622      	mov	r2, r4
 8003ab6:	462b      	mov	r3, r5
 8003ab8:	f04f 0000 	mov.w	r0, #0
 8003abc:	f04f 0100 	mov.w	r1, #0
 8003ac0:	0159      	lsls	r1, r3, #5
 8003ac2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ac6:	0150      	lsls	r0, r2, #5
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	4621      	mov	r1, r4
 8003ace:	1a51      	subs	r1, r2, r1
 8003ad0:	61b9      	str	r1, [r7, #24]
 8003ad2:	4629      	mov	r1, r5
 8003ad4:	eb63 0301 	sbc.w	r3, r3, r1
 8003ad8:	61fb      	str	r3, [r7, #28]
 8003ada:	f04f 0200 	mov.w	r2, #0
 8003ade:	f04f 0300 	mov.w	r3, #0
 8003ae2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003ae6:	4659      	mov	r1, fp
 8003ae8:	018b      	lsls	r3, r1, #6
 8003aea:	4651      	mov	r1, sl
 8003aec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003af0:	4651      	mov	r1, sl
 8003af2:	018a      	lsls	r2, r1, #6
 8003af4:	4651      	mov	r1, sl
 8003af6:	ebb2 0801 	subs.w	r8, r2, r1
 8003afa:	4659      	mov	r1, fp
 8003afc:	eb63 0901 	sbc.w	r9, r3, r1
 8003b00:	f04f 0200 	mov.w	r2, #0
 8003b04:	f04f 0300 	mov.w	r3, #0
 8003b08:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b0c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b10:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b14:	4690      	mov	r8, r2
 8003b16:	4699      	mov	r9, r3
 8003b18:	4623      	mov	r3, r4
 8003b1a:	eb18 0303 	adds.w	r3, r8, r3
 8003b1e:	613b      	str	r3, [r7, #16]
 8003b20:	462b      	mov	r3, r5
 8003b22:	eb49 0303 	adc.w	r3, r9, r3
 8003b26:	617b      	str	r3, [r7, #20]
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	f04f 0300 	mov.w	r3, #0
 8003b30:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003b34:	4629      	mov	r1, r5
 8003b36:	024b      	lsls	r3, r1, #9
 8003b38:	4621      	mov	r1, r4
 8003b3a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b3e:	4621      	mov	r1, r4
 8003b40:	024a      	lsls	r2, r1, #9
 8003b42:	4610      	mov	r0, r2
 8003b44:	4619      	mov	r1, r3
 8003b46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b4e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003b50:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b54:	f7fc fbfc 	bl	8000350 <__aeabi_uldivmod>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b62:	e065      	b.n	8003c30 <HAL_RCC_GetSysClockFreq+0x420>
 8003b64:	40023800 	.word	0x40023800
 8003b68:	00f42400 	.word	0x00f42400
 8003b6c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b70:	4b3d      	ldr	r3, [pc, #244]	; (8003c68 <HAL_RCC_GetSysClockFreq+0x458>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	099b      	lsrs	r3, r3, #6
 8003b76:	2200      	movs	r2, #0
 8003b78:	4618      	mov	r0, r3
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b80:	653b      	str	r3, [r7, #80]	; 0x50
 8003b82:	2300      	movs	r3, #0
 8003b84:	657b      	str	r3, [r7, #84]	; 0x54
 8003b86:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003b8a:	4642      	mov	r2, r8
 8003b8c:	464b      	mov	r3, r9
 8003b8e:	f04f 0000 	mov.w	r0, #0
 8003b92:	f04f 0100 	mov.w	r1, #0
 8003b96:	0159      	lsls	r1, r3, #5
 8003b98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b9c:	0150      	lsls	r0, r2, #5
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	4641      	mov	r1, r8
 8003ba4:	1a51      	subs	r1, r2, r1
 8003ba6:	60b9      	str	r1, [r7, #8]
 8003ba8:	4649      	mov	r1, r9
 8003baa:	eb63 0301 	sbc.w	r3, r3, r1
 8003bae:	60fb      	str	r3, [r7, #12]
 8003bb0:	f04f 0200 	mov.w	r2, #0
 8003bb4:	f04f 0300 	mov.w	r3, #0
 8003bb8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003bbc:	4659      	mov	r1, fp
 8003bbe:	018b      	lsls	r3, r1, #6
 8003bc0:	4651      	mov	r1, sl
 8003bc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bc6:	4651      	mov	r1, sl
 8003bc8:	018a      	lsls	r2, r1, #6
 8003bca:	4651      	mov	r1, sl
 8003bcc:	1a54      	subs	r4, r2, r1
 8003bce:	4659      	mov	r1, fp
 8003bd0:	eb63 0501 	sbc.w	r5, r3, r1
 8003bd4:	f04f 0200 	mov.w	r2, #0
 8003bd8:	f04f 0300 	mov.w	r3, #0
 8003bdc:	00eb      	lsls	r3, r5, #3
 8003bde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003be2:	00e2      	lsls	r2, r4, #3
 8003be4:	4614      	mov	r4, r2
 8003be6:	461d      	mov	r5, r3
 8003be8:	4643      	mov	r3, r8
 8003bea:	18e3      	adds	r3, r4, r3
 8003bec:	603b      	str	r3, [r7, #0]
 8003bee:	464b      	mov	r3, r9
 8003bf0:	eb45 0303 	adc.w	r3, r5, r3
 8003bf4:	607b      	str	r3, [r7, #4]
 8003bf6:	f04f 0200 	mov.w	r2, #0
 8003bfa:	f04f 0300 	mov.w	r3, #0
 8003bfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c02:	4629      	mov	r1, r5
 8003c04:	028b      	lsls	r3, r1, #10
 8003c06:	4621      	mov	r1, r4
 8003c08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c0c:	4621      	mov	r1, r4
 8003c0e:	028a      	lsls	r2, r1, #10
 8003c10:	4610      	mov	r0, r2
 8003c12:	4619      	mov	r1, r3
 8003c14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c18:	2200      	movs	r2, #0
 8003c1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c1c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003c1e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c22:	f7fc fb95 	bl	8000350 <__aeabi_uldivmod>
 8003c26:	4602      	mov	r2, r0
 8003c28:	460b      	mov	r3, r1
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003c30:	4b0d      	ldr	r3, [pc, #52]	; (8003c68 <HAL_RCC_GetSysClockFreq+0x458>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	0f1b      	lsrs	r3, r3, #28
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003c3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003c4e:	e003      	b.n	8003c58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c50:	4b06      	ldr	r3, [pc, #24]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003c52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003c56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	37b8      	adds	r7, #184	; 0xb8
 8003c60:	46bd      	mov	sp, r7
 8003c62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c66:	bf00      	nop
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	00f42400 	.word	0x00f42400

08003c70 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e28d      	b.n	800419e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 8083 	beq.w	8003d96 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003c90:	4b94      	ldr	r3, [pc, #592]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 030c 	and.w	r3, r3, #12
 8003c98:	2b04      	cmp	r3, #4
 8003c9a:	d019      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c9c:	4b91      	ldr	r3, [pc, #580]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	d106      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ca8:	4b8e      	ldr	r3, [pc, #568]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cb4:	d00c      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cb6:	4b8b      	ldr	r3, [pc, #556]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003cbe:	2b0c      	cmp	r3, #12
 8003cc0:	d112      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cc2:	4b88      	ldr	r3, [pc, #544]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cce:	d10b      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd0:	4b84      	ldr	r3, [pc, #528]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d05b      	beq.n	8003d94 <HAL_RCC_OscConfig+0x124>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d157      	bne.n	8003d94 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e25a      	b.n	800419e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf0:	d106      	bne.n	8003d00 <HAL_RCC_OscConfig+0x90>
 8003cf2:	4b7c      	ldr	r3, [pc, #496]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a7b      	ldr	r2, [pc, #492]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cfc:	6013      	str	r3, [r2, #0]
 8003cfe:	e01d      	b.n	8003d3c <HAL_RCC_OscConfig+0xcc>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d08:	d10c      	bne.n	8003d24 <HAL_RCC_OscConfig+0xb4>
 8003d0a:	4b76      	ldr	r3, [pc, #472]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a75      	ldr	r2, [pc, #468]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	4b73      	ldr	r3, [pc, #460]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a72      	ldr	r2, [pc, #456]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d20:	6013      	str	r3, [r2, #0]
 8003d22:	e00b      	b.n	8003d3c <HAL_RCC_OscConfig+0xcc>
 8003d24:	4b6f      	ldr	r3, [pc, #444]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a6e      	ldr	r2, [pc, #440]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d2e:	6013      	str	r3, [r2, #0]
 8003d30:	4b6c      	ldr	r3, [pc, #432]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a6b      	ldr	r2, [pc, #428]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003d36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d013      	beq.n	8003d6c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d44:	f7fd ff18 	bl	8001b78 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d4c:	f7fd ff14 	bl	8001b78 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b64      	cmp	r3, #100	; 0x64
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e21f      	b.n	800419e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d5e:	4b61      	ldr	r3, [pc, #388]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d0f0      	beq.n	8003d4c <HAL_RCC_OscConfig+0xdc>
 8003d6a:	e014      	b.n	8003d96 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6c:	f7fd ff04 	bl	8001b78 <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d74:	f7fd ff00 	bl	8001b78 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b64      	cmp	r3, #100	; 0x64
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e20b      	b.n	800419e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d86:	4b57      	ldr	r3, [pc, #348]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1f0      	bne.n	8003d74 <HAL_RCC_OscConfig+0x104>
 8003d92:	e000      	b.n	8003d96 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d06f      	beq.n	8003e82 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003da2:	4b50      	ldr	r3, [pc, #320]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f003 030c 	and.w	r3, r3, #12
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d017      	beq.n	8003dde <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003dae:	4b4d      	ldr	r3, [pc, #308]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003db6:	2b08      	cmp	r3, #8
 8003db8:	d105      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003dba:	4b4a      	ldr	r3, [pc, #296]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00b      	beq.n	8003dde <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dc6:	4b47      	ldr	r3, [pc, #284]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003dce:	2b0c      	cmp	r3, #12
 8003dd0:	d11c      	bne.n	8003e0c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dd2:	4b44      	ldr	r3, [pc, #272]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d116      	bne.n	8003e0c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dde:	4b41      	ldr	r3, [pc, #260]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d005      	beq.n	8003df6 <HAL_RCC_OscConfig+0x186>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d001      	beq.n	8003df6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e1d3      	b.n	800419e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df6:	4b3b      	ldr	r3, [pc, #236]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	4937      	ldr	r1, [pc, #220]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e0a:	e03a      	b.n	8003e82 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d020      	beq.n	8003e56 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e14:	4b34      	ldr	r3, [pc, #208]	; (8003ee8 <HAL_RCC_OscConfig+0x278>)
 8003e16:	2201      	movs	r2, #1
 8003e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1a:	f7fd fead 	bl	8001b78 <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e20:	e008      	b.n	8003e34 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e22:	f7fd fea9 	bl	8001b78 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e1b4      	b.n	800419e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e34:	4b2b      	ldr	r3, [pc, #172]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0f0      	beq.n	8003e22 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e40:	4b28      	ldr	r3, [pc, #160]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	4925      	ldr	r1, [pc, #148]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	600b      	str	r3, [r1, #0]
 8003e54:	e015      	b.n	8003e82 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e56:	4b24      	ldr	r3, [pc, #144]	; (8003ee8 <HAL_RCC_OscConfig+0x278>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5c:	f7fd fe8c 	bl	8001b78 <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e64:	f7fd fe88 	bl	8001b78 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e193      	b.n	800419e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e76:	4b1b      	ldr	r3, [pc, #108]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1f0      	bne.n	8003e64 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d036      	beq.n	8003efc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d016      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e96:	4b15      	ldr	r3, [pc, #84]	; (8003eec <HAL_RCC_OscConfig+0x27c>)
 8003e98:	2201      	movs	r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e9c:	f7fd fe6c 	bl	8001b78 <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ea4:	f7fd fe68 	bl	8001b78 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e173      	b.n	800419e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eb6:	4b0b      	ldr	r3, [pc, #44]	; (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0f0      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x234>
 8003ec2:	e01b      	b.n	8003efc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ec4:	4b09      	ldr	r3, [pc, #36]	; (8003eec <HAL_RCC_OscConfig+0x27c>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eca:	f7fd fe55 	bl	8001b78 <HAL_GetTick>
 8003ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ed0:	e00e      	b.n	8003ef0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ed2:	f7fd fe51 	bl	8001b78 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d907      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e15c      	b.n	800419e <HAL_RCC_OscConfig+0x52e>
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	42470000 	.word	0x42470000
 8003eec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ef0:	4b8a      	ldr	r3, [pc, #552]	; (800411c <HAL_RCC_OscConfig+0x4ac>)
 8003ef2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1ea      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 8097 	beq.w	8004038 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f0e:	4b83      	ldr	r3, [pc, #524]	; (800411c <HAL_RCC_OscConfig+0x4ac>)
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10f      	bne.n	8003f3a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60bb      	str	r3, [r7, #8]
 8003f1e:	4b7f      	ldr	r3, [pc, #508]	; (800411c <HAL_RCC_OscConfig+0x4ac>)
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	4a7e      	ldr	r2, [pc, #504]	; (800411c <HAL_RCC_OscConfig+0x4ac>)
 8003f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f28:	6413      	str	r3, [r2, #64]	; 0x40
 8003f2a:	4b7c      	ldr	r3, [pc, #496]	; (800411c <HAL_RCC_OscConfig+0x4ac>)
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f32:	60bb      	str	r3, [r7, #8]
 8003f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f36:	2301      	movs	r3, #1
 8003f38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f3a:	4b79      	ldr	r3, [pc, #484]	; (8004120 <HAL_RCC_OscConfig+0x4b0>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d118      	bne.n	8003f78 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f46:	4b76      	ldr	r3, [pc, #472]	; (8004120 <HAL_RCC_OscConfig+0x4b0>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a75      	ldr	r2, [pc, #468]	; (8004120 <HAL_RCC_OscConfig+0x4b0>)
 8003f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f52:	f7fd fe11 	bl	8001b78 <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f5a:	f7fd fe0d 	bl	8001b78 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e118      	b.n	800419e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f6c:	4b6c      	ldr	r3, [pc, #432]	; (8004120 <HAL_RCC_OscConfig+0x4b0>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d0f0      	beq.n	8003f5a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d106      	bne.n	8003f8e <HAL_RCC_OscConfig+0x31e>
 8003f80:	4b66      	ldr	r3, [pc, #408]	; (800411c <HAL_RCC_OscConfig+0x4ac>)
 8003f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f84:	4a65      	ldr	r2, [pc, #404]	; (800411c <HAL_RCC_OscConfig+0x4ac>)
 8003f86:	f043 0301 	orr.w	r3, r3, #1
 8003f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f8c:	e01c      	b.n	8003fc8 <HAL_RCC_OscConfig+0x358>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	2b05      	cmp	r3, #5
 8003f94:	d10c      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x340>
 8003f96:	4b61      	ldr	r3, [pc, #388]	; (800411c <HAL_RCC_OscConfig+0x4ac>)
 8003f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9a:	4a60      	ldr	r2, [pc, #384]	; (800411c <HAL_RCC_OscConfig+0x4ac>)
 8003f9c:	f043 0304 	orr.w	r3, r3, #4
 8003fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8003fa2:	4b5e      	ldr	r3, [pc, #376]	; (800411c <HAL_RCC_OscConfig+0x4ac>)
 8003fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa6:	4a5d      	ldr	r2, [pc, #372]	; (800411c <HAL_RCC_OscConfig+0x4ac>)
 8003fa8:	f043 0301 	orr.w	r3, r3, #1
 8003fac:	6713      	str	r3, [r2, #112]	; 0x70
 8003fae:	e00b      	b.n	8003fc8 <HAL_RCC_OscConfig+0x358>
 8003fb0:	4b5a      	ldr	r3, [pc, #360]	; (800411c <HAL_RCC_OscConfig+0x4ac>)
 8003fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb4:	4a59      	ldr	r2, [pc, #356]	; (800411c <HAL_RCC_OscConfig+0x4ac>)
 8003fb6:	f023 0301 	bic.w	r3, r3, #1
 8003fba:	6713      	str	r3, [r2, #112]	; 0x70
 8003fbc:	4b57      	ldr	r3, [pc, #348]	; (800411c <HAL_RCC_OscConfig+0x4ac>)
 8003fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc0:	4a56      	ldr	r2, [pc, #344]	; (800411c <HAL_RCC_OscConfig+0x4ac>)
 8003fc2:	f023 0304 	bic.w	r3, r3, #4
 8003fc6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d015      	beq.n	8003ffc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd0:	f7fd fdd2 	bl	8001b78 <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd6:	e00a      	b.n	8003fee <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fd8:	f7fd fdce 	bl	8001b78 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e0d7      	b.n	800419e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fee:	4b4b      	ldr	r3, [pc, #300]	; (800411c <HAL_RCC_OscConfig+0x4ac>)
 8003ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0ee      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x368>
 8003ffa:	e014      	b.n	8004026 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ffc:	f7fd fdbc 	bl	8001b78 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004002:	e00a      	b.n	800401a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004004:	f7fd fdb8 	bl	8001b78 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004012:	4293      	cmp	r3, r2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e0c1      	b.n	800419e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800401a:	4b40      	ldr	r3, [pc, #256]	; (800411c <HAL_RCC_OscConfig+0x4ac>)
 800401c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1ee      	bne.n	8004004 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004026:	7dfb      	ldrb	r3, [r7, #23]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d105      	bne.n	8004038 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800402c:	4b3b      	ldr	r3, [pc, #236]	; (800411c <HAL_RCC_OscConfig+0x4ac>)
 800402e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004030:	4a3a      	ldr	r2, [pc, #232]	; (800411c <HAL_RCC_OscConfig+0x4ac>)
 8004032:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004036:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 80ad 	beq.w	800419c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004042:	4b36      	ldr	r3, [pc, #216]	; (800411c <HAL_RCC_OscConfig+0x4ac>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 030c 	and.w	r3, r3, #12
 800404a:	2b08      	cmp	r3, #8
 800404c:	d060      	beq.n	8004110 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	2b02      	cmp	r3, #2
 8004054:	d145      	bne.n	80040e2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004056:	4b33      	ldr	r3, [pc, #204]	; (8004124 <HAL_RCC_OscConfig+0x4b4>)
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405c:	f7fd fd8c 	bl	8001b78 <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004064:	f7fd fd88 	bl	8001b78 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e093      	b.n	800419e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004076:	4b29      	ldr	r3, [pc, #164]	; (800411c <HAL_RCC_OscConfig+0x4ac>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1f0      	bne.n	8004064 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	69da      	ldr	r2, [r3, #28]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	431a      	orrs	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	019b      	lsls	r3, r3, #6
 8004092:	431a      	orrs	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004098:	085b      	lsrs	r3, r3, #1
 800409a:	3b01      	subs	r3, #1
 800409c:	041b      	lsls	r3, r3, #16
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a4:	061b      	lsls	r3, r3, #24
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ac:	071b      	lsls	r3, r3, #28
 80040ae:	491b      	ldr	r1, [pc, #108]	; (800411c <HAL_RCC_OscConfig+0x4ac>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040b4:	4b1b      	ldr	r3, [pc, #108]	; (8004124 <HAL_RCC_OscConfig+0x4b4>)
 80040b6:	2201      	movs	r2, #1
 80040b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ba:	f7fd fd5d 	bl	8001b78 <HAL_GetTick>
 80040be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040c0:	e008      	b.n	80040d4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040c2:	f7fd fd59 	bl	8001b78 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d901      	bls.n	80040d4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e064      	b.n	800419e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040d4:	4b11      	ldr	r3, [pc, #68]	; (800411c <HAL_RCC_OscConfig+0x4ac>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d0f0      	beq.n	80040c2 <HAL_RCC_OscConfig+0x452>
 80040e0:	e05c      	b.n	800419c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e2:	4b10      	ldr	r3, [pc, #64]	; (8004124 <HAL_RCC_OscConfig+0x4b4>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e8:	f7fd fd46 	bl	8001b78 <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040f0:	f7fd fd42 	bl	8001b78 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e04d      	b.n	800419e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004102:	4b06      	ldr	r3, [pc, #24]	; (800411c <HAL_RCC_OscConfig+0x4ac>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1f0      	bne.n	80040f0 <HAL_RCC_OscConfig+0x480>
 800410e:	e045      	b.n	800419c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d107      	bne.n	8004128 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e040      	b.n	800419e <HAL_RCC_OscConfig+0x52e>
 800411c:	40023800 	.word	0x40023800
 8004120:	40007000 	.word	0x40007000
 8004124:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004128:	4b1f      	ldr	r3, [pc, #124]	; (80041a8 <HAL_RCC_OscConfig+0x538>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d030      	beq.n	8004198 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004140:	429a      	cmp	r2, r3
 8004142:	d129      	bne.n	8004198 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800414e:	429a      	cmp	r2, r3
 8004150:	d122      	bne.n	8004198 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004158:	4013      	ands	r3, r2
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800415e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004160:	4293      	cmp	r3, r2
 8004162:	d119      	bne.n	8004198 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416e:	085b      	lsrs	r3, r3, #1
 8004170:	3b01      	subs	r3, #1
 8004172:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004174:	429a      	cmp	r2, r3
 8004176:	d10f      	bne.n	8004198 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004182:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004184:	429a      	cmp	r2, r3
 8004186:	d107      	bne.n	8004198 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004192:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004194:	429a      	cmp	r2, r3
 8004196:	d001      	beq.n	800419c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e000      	b.n	800419e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	40023800 	.word	0x40023800

080041ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e03f      	b.n	800423e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d106      	bne.n	80041d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f7fd fbbc 	bl	8001950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2224      	movs	r2, #36	; 0x24
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68da      	ldr	r2, [r3, #12]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 fddf 	bl	8004db4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	691a      	ldr	r2, [r3, #16]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004204:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	695a      	ldr	r2, [r3, #20]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004214:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68da      	ldr	r2, [r3, #12]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004224:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2220      	movs	r2, #32
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2220      	movs	r2, #32
 8004238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b08a      	sub	sp, #40	; 0x28
 800424a:	af02      	add	r7, sp, #8
 800424c:	60f8      	str	r0, [r7, #12]
 800424e:	60b9      	str	r1, [r7, #8]
 8004250:	603b      	str	r3, [r7, #0]
 8004252:	4613      	mov	r3, r2
 8004254:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004256:	2300      	movs	r3, #0
 8004258:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b20      	cmp	r3, #32
 8004264:	d17c      	bne.n	8004360 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d002      	beq.n	8004272 <HAL_UART_Transmit+0x2c>
 800426c:	88fb      	ldrh	r3, [r7, #6]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e075      	b.n	8004362 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800427c:	2b01      	cmp	r3, #1
 800427e:	d101      	bne.n	8004284 <HAL_UART_Transmit+0x3e>
 8004280:	2302      	movs	r3, #2
 8004282:	e06e      	b.n	8004362 <HAL_UART_Transmit+0x11c>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2221      	movs	r2, #33	; 0x21
 8004296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800429a:	f7fd fc6d 	bl	8001b78 <HAL_GetTick>
 800429e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	88fa      	ldrh	r2, [r7, #6]
 80042a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	88fa      	ldrh	r2, [r7, #6]
 80042aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b4:	d108      	bne.n	80042c8 <HAL_UART_Transmit+0x82>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d104      	bne.n	80042c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80042be:	2300      	movs	r3, #0
 80042c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	61bb      	str	r3, [r7, #24]
 80042c6:	e003      	b.n	80042d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042cc:	2300      	movs	r3, #0
 80042ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80042d8:	e02a      	b.n	8004330 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	2200      	movs	r2, #0
 80042e2:	2180      	movs	r1, #128	; 0x80
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f000 fb1f 	bl	8004928 <UART_WaitOnFlagUntilTimeout>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e036      	b.n	8004362 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10b      	bne.n	8004312 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	461a      	mov	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004308:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	3302      	adds	r3, #2
 800430e:	61bb      	str	r3, [r7, #24]
 8004310:	e007      	b.n	8004322 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	781a      	ldrb	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	3301      	adds	r3, #1
 8004320:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004326:	b29b      	uxth	r3, r3
 8004328:	3b01      	subs	r3, #1
 800432a:	b29a      	uxth	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004334:	b29b      	uxth	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1cf      	bne.n	80042da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	9300      	str	r3, [sp, #0]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	2200      	movs	r2, #0
 8004342:	2140      	movs	r1, #64	; 0x40
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 faef 	bl	8004928 <UART_WaitOnFlagUntilTimeout>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e006      	b.n	8004362 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2220      	movs	r2, #32
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800435c:	2300      	movs	r3, #0
 800435e:	e000      	b.n	8004362 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004360:	2302      	movs	r3, #2
  }
}
 8004362:	4618      	mov	r0, r3
 8004364:	3720      	adds	r7, #32
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b084      	sub	sp, #16
 800436e:	af00      	add	r7, sp, #0
 8004370:	60f8      	str	r0, [r7, #12]
 8004372:	60b9      	str	r1, [r7, #8]
 8004374:	4613      	mov	r3, r2
 8004376:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b20      	cmp	r3, #32
 8004382:	d11d      	bne.n	80043c0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d002      	beq.n	8004390 <HAL_UART_Receive_IT+0x26>
 800438a:	88fb      	ldrh	r3, [r7, #6]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e016      	b.n	80043c2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800439a:	2b01      	cmp	r3, #1
 800439c:	d101      	bne.n	80043a2 <HAL_UART_Receive_IT+0x38>
 800439e:	2302      	movs	r3, #2
 80043a0:	e00f      	b.n	80043c2 <HAL_UART_Receive_IT+0x58>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80043b0:	88fb      	ldrh	r3, [r7, #6]
 80043b2:	461a      	mov	r2, r3
 80043b4:	68b9      	ldr	r1, [r7, #8]
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 fb24 	bl	8004a04 <UART_Start_Receive_IT>
 80043bc:	4603      	mov	r3, r0
 80043be:	e000      	b.n	80043c2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80043c0:	2302      	movs	r3, #2
  }
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
	...

080043cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b0ba      	sub	sp, #232	; 0xe8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80043f2:	2300      	movs	r3, #0
 80043f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80043f8:	2300      	movs	r3, #0
 80043fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80043fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004402:	f003 030f 	and.w	r3, r3, #15
 8004406:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800440a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10f      	bne.n	8004432 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004416:	f003 0320 	and.w	r3, r3, #32
 800441a:	2b00      	cmp	r3, #0
 800441c:	d009      	beq.n	8004432 <HAL_UART_IRQHandler+0x66>
 800441e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004422:	f003 0320 	and.w	r3, r3, #32
 8004426:	2b00      	cmp	r3, #0
 8004428:	d003      	beq.n	8004432 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 fc07 	bl	8004c3e <UART_Receive_IT>
      return;
 8004430:	e256      	b.n	80048e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004432:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 80de 	beq.w	80045f8 <HAL_UART_IRQHandler+0x22c>
 800443c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b00      	cmp	r3, #0
 8004446:	d106      	bne.n	8004456 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800444c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 80d1 	beq.w	80045f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00b      	beq.n	800447a <HAL_UART_IRQHandler+0xae>
 8004462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446a:	2b00      	cmp	r3, #0
 800446c:	d005      	beq.n	800447a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004472:	f043 0201 	orr.w	r2, r3, #1
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800447a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800447e:	f003 0304 	and.w	r3, r3, #4
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00b      	beq.n	800449e <HAL_UART_IRQHandler+0xd2>
 8004486:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d005      	beq.n	800449e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	f043 0202 	orr.w	r2, r3, #2
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800449e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00b      	beq.n	80044c2 <HAL_UART_IRQHandler+0xf6>
 80044aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d005      	beq.n	80044c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	f043 0204 	orr.w	r2, r3, #4
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80044c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044c6:	f003 0308 	and.w	r3, r3, #8
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d011      	beq.n	80044f2 <HAL_UART_IRQHandler+0x126>
 80044ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044d2:	f003 0320 	and.w	r3, r3, #32
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d105      	bne.n	80044e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80044da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d005      	beq.n	80044f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	f043 0208 	orr.w	r2, r3, #8
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f000 81ed 	beq.w	80048d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004500:	f003 0320 	and.w	r3, r3, #32
 8004504:	2b00      	cmp	r3, #0
 8004506:	d008      	beq.n	800451a <HAL_UART_IRQHandler+0x14e>
 8004508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800450c:	f003 0320 	and.w	r3, r3, #32
 8004510:	2b00      	cmp	r3, #0
 8004512:	d002      	beq.n	800451a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 fb92 	bl	8004c3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004524:	2b40      	cmp	r3, #64	; 0x40
 8004526:	bf0c      	ite	eq
 8004528:	2301      	moveq	r3, #1
 800452a:	2300      	movne	r3, #0
 800452c:	b2db      	uxtb	r3, r3
 800452e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	f003 0308 	and.w	r3, r3, #8
 800453a:	2b00      	cmp	r3, #0
 800453c:	d103      	bne.n	8004546 <HAL_UART_IRQHandler+0x17a>
 800453e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004542:	2b00      	cmp	r3, #0
 8004544:	d04f      	beq.n	80045e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 fa9a 	bl	8004a80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004556:	2b40      	cmp	r3, #64	; 0x40
 8004558:	d141      	bne.n	80045de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	3314      	adds	r3, #20
 8004560:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004564:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004568:	e853 3f00 	ldrex	r3, [r3]
 800456c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004570:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004574:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004578:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3314      	adds	r3, #20
 8004582:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004586:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800458a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004592:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004596:	e841 2300 	strex	r3, r2, [r1]
 800459a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800459e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1d9      	bne.n	800455a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d013      	beq.n	80045d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b2:	4a7d      	ldr	r2, [pc, #500]	; (80047a8 <HAL_UART_IRQHandler+0x3dc>)
 80045b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fd fea7 	bl	800230e <HAL_DMA_Abort_IT>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d016      	beq.n	80045f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045d0:	4610      	mov	r0, r2
 80045d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d4:	e00e      	b.n	80045f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f990 	bl	80048fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045dc:	e00a      	b.n	80045f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f98c 	bl	80048fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e4:	e006      	b.n	80045f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f988 	bl	80048fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80045f2:	e170      	b.n	80048d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045f4:	bf00      	nop
    return;
 80045f6:	e16e      	b.n	80048d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	f040 814a 	bne.w	8004896 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004606:	f003 0310 	and.w	r3, r3, #16
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 8143 	beq.w	8004896 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004614:	f003 0310 	and.w	r3, r3, #16
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 813c 	beq.w	8004896 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800461e:	2300      	movs	r3, #0
 8004620:	60bb      	str	r3, [r7, #8]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	60bb      	str	r3, [r7, #8]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	60bb      	str	r3, [r7, #8]
 8004632:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463e:	2b40      	cmp	r3, #64	; 0x40
 8004640:	f040 80b4 	bne.w	80047ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004650:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 8140 	beq.w	80048da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800465e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004662:	429a      	cmp	r2, r3
 8004664:	f080 8139 	bcs.w	80048da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800466e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800467a:	f000 8088 	beq.w	800478e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	330c      	adds	r3, #12
 8004684:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004688:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800468c:	e853 3f00 	ldrex	r3, [r3]
 8004690:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004694:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004698:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800469c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	330c      	adds	r3, #12
 80046a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80046aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80046ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80046b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80046ba:	e841 2300 	strex	r3, r2, [r1]
 80046be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80046c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1d9      	bne.n	800467e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3314      	adds	r3, #20
 80046d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046d4:	e853 3f00 	ldrex	r3, [r3]
 80046d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80046da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046dc:	f023 0301 	bic.w	r3, r3, #1
 80046e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	3314      	adds	r3, #20
 80046ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80046ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80046f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80046f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80046fa:	e841 2300 	strex	r3, r2, [r1]
 80046fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004700:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1e1      	bne.n	80046ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	3314      	adds	r3, #20
 800470c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004710:	e853 3f00 	ldrex	r3, [r3]
 8004714:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004716:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004718:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800471c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	3314      	adds	r3, #20
 8004726:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800472a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800472c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004730:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004732:	e841 2300 	strex	r3, r2, [r1]
 8004736:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004738:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1e3      	bne.n	8004706 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2220      	movs	r2, #32
 8004742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	330c      	adds	r3, #12
 8004752:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004756:	e853 3f00 	ldrex	r3, [r3]
 800475a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800475c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800475e:	f023 0310 	bic.w	r3, r3, #16
 8004762:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	330c      	adds	r3, #12
 800476c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004770:	65ba      	str	r2, [r7, #88]	; 0x58
 8004772:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004774:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004776:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004778:	e841 2300 	strex	r3, r2, [r1]
 800477c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800477e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1e3      	bne.n	800474c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004788:	4618      	mov	r0, r3
 800478a:	f7fd fd50 	bl	800222e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004796:	b29b      	uxth	r3, r3
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	b29b      	uxth	r3, r3
 800479c:	4619      	mov	r1, r3
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f8b6 	bl	8004910 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047a4:	e099      	b.n	80048da <HAL_UART_IRQHandler+0x50e>
 80047a6:	bf00      	nop
 80047a8:	08004b47 	.word	0x08004b47
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 808b 	beq.w	80048de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80047c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 8086 	beq.w	80048de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	330c      	adds	r3, #12
 80047d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047dc:	e853 3f00 	ldrex	r3, [r3]
 80047e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	330c      	adds	r3, #12
 80047f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80047f6:	647a      	str	r2, [r7, #68]	; 0x44
 80047f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047fe:	e841 2300 	strex	r3, r2, [r1]
 8004802:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1e3      	bne.n	80047d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	3314      	adds	r3, #20
 8004810:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	e853 3f00 	ldrex	r3, [r3]
 8004818:	623b      	str	r3, [r7, #32]
   return(result);
 800481a:	6a3b      	ldr	r3, [r7, #32]
 800481c:	f023 0301 	bic.w	r3, r3, #1
 8004820:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	3314      	adds	r3, #20
 800482a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800482e:	633a      	str	r2, [r7, #48]	; 0x30
 8004830:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004832:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004836:	e841 2300 	strex	r3, r2, [r1]
 800483a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800483c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1e3      	bne.n	800480a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2220      	movs	r2, #32
 8004846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	330c      	adds	r3, #12
 8004856:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	e853 3f00 	ldrex	r3, [r3]
 800485e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f023 0310 	bic.w	r3, r3, #16
 8004866:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	330c      	adds	r3, #12
 8004870:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004874:	61fa      	str	r2, [r7, #28]
 8004876:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004878:	69b9      	ldr	r1, [r7, #24]
 800487a:	69fa      	ldr	r2, [r7, #28]
 800487c:	e841 2300 	strex	r3, r2, [r1]
 8004880:	617b      	str	r3, [r7, #20]
   return(result);
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1e3      	bne.n	8004850 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004888:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800488c:	4619      	mov	r1, r3
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f83e 	bl	8004910 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004894:	e023      	b.n	80048de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800489a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d009      	beq.n	80048b6 <HAL_UART_IRQHandler+0x4ea>
 80048a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f95d 	bl	8004b6e <UART_Transmit_IT>
    return;
 80048b4:	e014      	b.n	80048e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80048b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00e      	beq.n	80048e0 <HAL_UART_IRQHandler+0x514>
 80048c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d008      	beq.n	80048e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f99d 	bl	8004c0e <UART_EndTransmit_IT>
    return;
 80048d4:	e004      	b.n	80048e0 <HAL_UART_IRQHandler+0x514>
    return;
 80048d6:	bf00      	nop
 80048d8:	e002      	b.n	80048e0 <HAL_UART_IRQHandler+0x514>
      return;
 80048da:	bf00      	nop
 80048dc:	e000      	b.n	80048e0 <HAL_UART_IRQHandler+0x514>
      return;
 80048de:	bf00      	nop
  }
}
 80048e0:	37e8      	adds	r7, #232	; 0xe8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop

080048e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	460b      	mov	r3, r1
 800491a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b090      	sub	sp, #64	; 0x40
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	603b      	str	r3, [r7, #0]
 8004934:	4613      	mov	r3, r2
 8004936:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004938:	e050      	b.n	80049dc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800493a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800493c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004940:	d04c      	beq.n	80049dc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004944:	2b00      	cmp	r3, #0
 8004946:	d007      	beq.n	8004958 <UART_WaitOnFlagUntilTimeout+0x30>
 8004948:	f7fd f916 	bl	8001b78 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004954:	429a      	cmp	r2, r3
 8004956:	d241      	bcs.n	80049dc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	330c      	adds	r3, #12
 800495e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004962:	e853 3f00 	ldrex	r3, [r3]
 8004966:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800496e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	330c      	adds	r3, #12
 8004976:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004978:	637a      	str	r2, [r7, #52]	; 0x34
 800497a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800497e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004980:	e841 2300 	strex	r3, r2, [r1]
 8004984:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1e5      	bne.n	8004958 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	3314      	adds	r3, #20
 8004992:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	e853 3f00 	ldrex	r3, [r3]
 800499a:	613b      	str	r3, [r7, #16]
   return(result);
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	f023 0301 	bic.w	r3, r3, #1
 80049a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3314      	adds	r3, #20
 80049aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049ac:	623a      	str	r2, [r7, #32]
 80049ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b0:	69f9      	ldr	r1, [r7, #28]
 80049b2:	6a3a      	ldr	r2, [r7, #32]
 80049b4:	e841 2300 	strex	r3, r2, [r1]
 80049b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1e5      	bne.n	800498c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e00f      	b.n	80049fc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	4013      	ands	r3, r2
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	bf0c      	ite	eq
 80049ec:	2301      	moveq	r3, #1
 80049ee:	2300      	movne	r3, #0
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	461a      	mov	r2, r3
 80049f4:	79fb      	ldrb	r3, [r7, #7]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d09f      	beq.n	800493a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3740      	adds	r7, #64	; 0x40
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	88fa      	ldrh	r2, [r7, #6]
 8004a1c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	88fa      	ldrh	r2, [r7, #6]
 8004a22:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2222      	movs	r2, #34	; 0x22
 8004a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d007      	beq.n	8004a52 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68da      	ldr	r2, [r3, #12]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a50:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	695a      	ldr	r2, [r3, #20]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f042 0201 	orr.w	r2, r2, #1
 8004a60:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68da      	ldr	r2, [r3, #12]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f042 0220 	orr.w	r2, r2, #32
 8004a70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3714      	adds	r7, #20
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b095      	sub	sp, #84	; 0x54
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	330c      	adds	r3, #12
 8004a8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a92:	e853 3f00 	ldrex	r3, [r3]
 8004a96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	330c      	adds	r3, #12
 8004aa6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004aa8:	643a      	str	r2, [r7, #64]	; 0x40
 8004aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004aae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ab0:	e841 2300 	strex	r3, r2, [r1]
 8004ab4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1e5      	bne.n	8004a88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	3314      	adds	r3, #20
 8004ac2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	e853 3f00 	ldrex	r3, [r3]
 8004aca:	61fb      	str	r3, [r7, #28]
   return(result);
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	f023 0301 	bic.w	r3, r3, #1
 8004ad2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	3314      	adds	r3, #20
 8004ada:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004adc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ade:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ae2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ae4:	e841 2300 	strex	r3, r2, [r1]
 8004ae8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1e5      	bne.n	8004abc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d119      	bne.n	8004b2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	330c      	adds	r3, #12
 8004afe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	e853 3f00 	ldrex	r3, [r3]
 8004b06:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	f023 0310 	bic.w	r3, r3, #16
 8004b0e:	647b      	str	r3, [r7, #68]	; 0x44
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	330c      	adds	r3, #12
 8004b16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b18:	61ba      	str	r2, [r7, #24]
 8004b1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1c:	6979      	ldr	r1, [r7, #20]
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	e841 2300 	strex	r3, r2, [r1]
 8004b24:	613b      	str	r3, [r7, #16]
   return(result);
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1e5      	bne.n	8004af8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b3a:	bf00      	nop
 8004b3c:	3754      	adds	r7, #84	; 0x54
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b084      	sub	sp, #16
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f7ff fecb 	bl	80048fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b66:	bf00      	nop
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b085      	sub	sp, #20
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b21      	cmp	r3, #33	; 0x21
 8004b80:	d13e      	bne.n	8004c00 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b8a:	d114      	bne.n	8004bb6 <UART_Transmit_IT+0x48>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d110      	bne.n	8004bb6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ba8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	1c9a      	adds	r2, r3, #2
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	621a      	str	r2, [r3, #32]
 8004bb4:	e008      	b.n	8004bc8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	1c59      	adds	r1, r3, #1
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	6211      	str	r1, [r2, #32]
 8004bc0:	781a      	ldrb	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10f      	bne.n	8004bfc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68da      	ldr	r2, [r3, #12]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68da      	ldr	r2, [r3, #12]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bfa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	e000      	b.n	8004c02 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c00:	2302      	movs	r3, #2
  }
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3714      	adds	r7, #20
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b082      	sub	sp, #8
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7ff fe5a 	bl	80048e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b08c      	sub	sp, #48	; 0x30
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b22      	cmp	r3, #34	; 0x22
 8004c50:	f040 80ab 	bne.w	8004daa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c5c:	d117      	bne.n	8004c8e <UART_Receive_IT+0x50>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d113      	bne.n	8004c8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c66:	2300      	movs	r3, #0
 8004c68:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c86:	1c9a      	adds	r2, r3, #2
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	629a      	str	r2, [r3, #40]	; 0x28
 8004c8c:	e026      	b.n	8004cdc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c92:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004c94:	2300      	movs	r3, #0
 8004c96:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ca0:	d007      	beq.n	8004cb2 <UART_Receive_IT+0x74>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10a      	bne.n	8004cc0 <UART_Receive_IT+0x82>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d106      	bne.n	8004cc0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cbc:	701a      	strb	r2, [r3, #0]
 8004cbe:	e008      	b.n	8004cd2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ccc:	b2da      	uxtb	r2, r3
 8004cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd6:	1c5a      	adds	r2, r3, #1
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	4619      	mov	r1, r3
 8004cea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d15a      	bne.n	8004da6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68da      	ldr	r2, [r3, #12]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f022 0220 	bic.w	r2, r2, #32
 8004cfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68da      	ldr	r2, [r3, #12]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	695a      	ldr	r2, [r3, #20]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 0201 	bic.w	r2, r2, #1
 8004d1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2220      	movs	r2, #32
 8004d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d135      	bne.n	8004d9c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	330c      	adds	r3, #12
 8004d3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	e853 3f00 	ldrex	r3, [r3]
 8004d44:	613b      	str	r3, [r7, #16]
   return(result);
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	f023 0310 	bic.w	r3, r3, #16
 8004d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	330c      	adds	r3, #12
 8004d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d56:	623a      	str	r2, [r7, #32]
 8004d58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5a:	69f9      	ldr	r1, [r7, #28]
 8004d5c:	6a3a      	ldr	r2, [r7, #32]
 8004d5e:	e841 2300 	strex	r3, r2, [r1]
 8004d62:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1e5      	bne.n	8004d36 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0310 	and.w	r3, r3, #16
 8004d74:	2b10      	cmp	r3, #16
 8004d76:	d10a      	bne.n	8004d8e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d78:	2300      	movs	r3, #0
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d92:	4619      	mov	r1, r3
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f7ff fdbb 	bl	8004910 <HAL_UARTEx_RxEventCallback>
 8004d9a:	e002      	b.n	8004da2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f7fc fad7 	bl	8001350 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004da2:	2300      	movs	r3, #0
 8004da4:	e002      	b.n	8004dac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004da6:	2300      	movs	r3, #0
 8004da8:	e000      	b.n	8004dac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004daa:	2302      	movs	r3, #2
  }
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3730      	adds	r7, #48	; 0x30
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004db4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004db8:	b0c0      	sub	sp, #256	; 0x100
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd0:	68d9      	ldr	r1, [r3, #12]
 8004dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	ea40 0301 	orr.w	r3, r0, r1
 8004ddc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	431a      	orrs	r2, r3
 8004dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	431a      	orrs	r2, r3
 8004df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df8:	69db      	ldr	r3, [r3, #28]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e0c:	f021 010c 	bic.w	r1, r1, #12
 8004e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e1a:	430b      	orrs	r3, r1
 8004e1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e2e:	6999      	ldr	r1, [r3, #24]
 8004e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	ea40 0301 	orr.w	r3, r0, r1
 8004e3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	4b8f      	ldr	r3, [pc, #572]	; (8005080 <UART_SetConfig+0x2cc>)
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d005      	beq.n	8004e54 <UART_SetConfig+0xa0>
 8004e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	4b8d      	ldr	r3, [pc, #564]	; (8005084 <UART_SetConfig+0x2d0>)
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d104      	bne.n	8004e5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e54:	f7fe fcc8 	bl	80037e8 <HAL_RCC_GetPCLK2Freq>
 8004e58:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004e5c:	e003      	b.n	8004e66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e5e:	f7fe fcaf 	bl	80037c0 <HAL_RCC_GetPCLK1Freq>
 8004e62:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e6a:	69db      	ldr	r3, [r3, #28]
 8004e6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e70:	f040 810c 	bne.w	800508c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e7e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004e86:	4622      	mov	r2, r4
 8004e88:	462b      	mov	r3, r5
 8004e8a:	1891      	adds	r1, r2, r2
 8004e8c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e8e:	415b      	adcs	r3, r3
 8004e90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e96:	4621      	mov	r1, r4
 8004e98:	eb12 0801 	adds.w	r8, r2, r1
 8004e9c:	4629      	mov	r1, r5
 8004e9e:	eb43 0901 	adc.w	r9, r3, r1
 8004ea2:	f04f 0200 	mov.w	r2, #0
 8004ea6:	f04f 0300 	mov.w	r3, #0
 8004eaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004eae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004eb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004eb6:	4690      	mov	r8, r2
 8004eb8:	4699      	mov	r9, r3
 8004eba:	4623      	mov	r3, r4
 8004ebc:	eb18 0303 	adds.w	r3, r8, r3
 8004ec0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ec4:	462b      	mov	r3, r5
 8004ec6:	eb49 0303 	adc.w	r3, r9, r3
 8004eca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004eda:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004ede:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	18db      	adds	r3, r3, r3
 8004ee6:	653b      	str	r3, [r7, #80]	; 0x50
 8004ee8:	4613      	mov	r3, r2
 8004eea:	eb42 0303 	adc.w	r3, r2, r3
 8004eee:	657b      	str	r3, [r7, #84]	; 0x54
 8004ef0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ef4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004ef8:	f7fb fa2a 	bl	8000350 <__aeabi_uldivmod>
 8004efc:	4602      	mov	r2, r0
 8004efe:	460b      	mov	r3, r1
 8004f00:	4b61      	ldr	r3, [pc, #388]	; (8005088 <UART_SetConfig+0x2d4>)
 8004f02:	fba3 2302 	umull	r2, r3, r3, r2
 8004f06:	095b      	lsrs	r3, r3, #5
 8004f08:	011c      	lsls	r4, r3, #4
 8004f0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f14:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004f18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004f1c:	4642      	mov	r2, r8
 8004f1e:	464b      	mov	r3, r9
 8004f20:	1891      	adds	r1, r2, r2
 8004f22:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f24:	415b      	adcs	r3, r3
 8004f26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f2c:	4641      	mov	r1, r8
 8004f2e:	eb12 0a01 	adds.w	sl, r2, r1
 8004f32:	4649      	mov	r1, r9
 8004f34:	eb43 0b01 	adc.w	fp, r3, r1
 8004f38:	f04f 0200 	mov.w	r2, #0
 8004f3c:	f04f 0300 	mov.w	r3, #0
 8004f40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f4c:	4692      	mov	sl, r2
 8004f4e:	469b      	mov	fp, r3
 8004f50:	4643      	mov	r3, r8
 8004f52:	eb1a 0303 	adds.w	r3, sl, r3
 8004f56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f5a:	464b      	mov	r3, r9
 8004f5c:	eb4b 0303 	adc.w	r3, fp, r3
 8004f60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f70:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004f74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004f78:	460b      	mov	r3, r1
 8004f7a:	18db      	adds	r3, r3, r3
 8004f7c:	643b      	str	r3, [r7, #64]	; 0x40
 8004f7e:	4613      	mov	r3, r2
 8004f80:	eb42 0303 	adc.w	r3, r2, r3
 8004f84:	647b      	str	r3, [r7, #68]	; 0x44
 8004f86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004f8e:	f7fb f9df 	bl	8000350 <__aeabi_uldivmod>
 8004f92:	4602      	mov	r2, r0
 8004f94:	460b      	mov	r3, r1
 8004f96:	4611      	mov	r1, r2
 8004f98:	4b3b      	ldr	r3, [pc, #236]	; (8005088 <UART_SetConfig+0x2d4>)
 8004f9a:	fba3 2301 	umull	r2, r3, r3, r1
 8004f9e:	095b      	lsrs	r3, r3, #5
 8004fa0:	2264      	movs	r2, #100	; 0x64
 8004fa2:	fb02 f303 	mul.w	r3, r2, r3
 8004fa6:	1acb      	subs	r3, r1, r3
 8004fa8:	00db      	lsls	r3, r3, #3
 8004faa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004fae:	4b36      	ldr	r3, [pc, #216]	; (8005088 <UART_SetConfig+0x2d4>)
 8004fb0:	fba3 2302 	umull	r2, r3, r3, r2
 8004fb4:	095b      	lsrs	r3, r3, #5
 8004fb6:	005b      	lsls	r3, r3, #1
 8004fb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fbc:	441c      	add	r4, r3
 8004fbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fc8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004fcc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004fd0:	4642      	mov	r2, r8
 8004fd2:	464b      	mov	r3, r9
 8004fd4:	1891      	adds	r1, r2, r2
 8004fd6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004fd8:	415b      	adcs	r3, r3
 8004fda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fdc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004fe0:	4641      	mov	r1, r8
 8004fe2:	1851      	adds	r1, r2, r1
 8004fe4:	6339      	str	r1, [r7, #48]	; 0x30
 8004fe6:	4649      	mov	r1, r9
 8004fe8:	414b      	adcs	r3, r1
 8004fea:	637b      	str	r3, [r7, #52]	; 0x34
 8004fec:	f04f 0200 	mov.w	r2, #0
 8004ff0:	f04f 0300 	mov.w	r3, #0
 8004ff4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ff8:	4659      	mov	r1, fp
 8004ffa:	00cb      	lsls	r3, r1, #3
 8004ffc:	4651      	mov	r1, sl
 8004ffe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005002:	4651      	mov	r1, sl
 8005004:	00ca      	lsls	r2, r1, #3
 8005006:	4610      	mov	r0, r2
 8005008:	4619      	mov	r1, r3
 800500a:	4603      	mov	r3, r0
 800500c:	4642      	mov	r2, r8
 800500e:	189b      	adds	r3, r3, r2
 8005010:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005014:	464b      	mov	r3, r9
 8005016:	460a      	mov	r2, r1
 8005018:	eb42 0303 	adc.w	r3, r2, r3
 800501c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800502c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005030:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005034:	460b      	mov	r3, r1
 8005036:	18db      	adds	r3, r3, r3
 8005038:	62bb      	str	r3, [r7, #40]	; 0x28
 800503a:	4613      	mov	r3, r2
 800503c:	eb42 0303 	adc.w	r3, r2, r3
 8005040:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005042:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005046:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800504a:	f7fb f981 	bl	8000350 <__aeabi_uldivmod>
 800504e:	4602      	mov	r2, r0
 8005050:	460b      	mov	r3, r1
 8005052:	4b0d      	ldr	r3, [pc, #52]	; (8005088 <UART_SetConfig+0x2d4>)
 8005054:	fba3 1302 	umull	r1, r3, r3, r2
 8005058:	095b      	lsrs	r3, r3, #5
 800505a:	2164      	movs	r1, #100	; 0x64
 800505c:	fb01 f303 	mul.w	r3, r1, r3
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	3332      	adds	r3, #50	; 0x32
 8005066:	4a08      	ldr	r2, [pc, #32]	; (8005088 <UART_SetConfig+0x2d4>)
 8005068:	fba2 2303 	umull	r2, r3, r2, r3
 800506c:	095b      	lsrs	r3, r3, #5
 800506e:	f003 0207 	and.w	r2, r3, #7
 8005072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4422      	add	r2, r4
 800507a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800507c:	e106      	b.n	800528c <UART_SetConfig+0x4d8>
 800507e:	bf00      	nop
 8005080:	40011000 	.word	0x40011000
 8005084:	40011400 	.word	0x40011400
 8005088:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800508c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005090:	2200      	movs	r2, #0
 8005092:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005096:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800509a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800509e:	4642      	mov	r2, r8
 80050a0:	464b      	mov	r3, r9
 80050a2:	1891      	adds	r1, r2, r2
 80050a4:	6239      	str	r1, [r7, #32]
 80050a6:	415b      	adcs	r3, r3
 80050a8:	627b      	str	r3, [r7, #36]	; 0x24
 80050aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050ae:	4641      	mov	r1, r8
 80050b0:	1854      	adds	r4, r2, r1
 80050b2:	4649      	mov	r1, r9
 80050b4:	eb43 0501 	adc.w	r5, r3, r1
 80050b8:	f04f 0200 	mov.w	r2, #0
 80050bc:	f04f 0300 	mov.w	r3, #0
 80050c0:	00eb      	lsls	r3, r5, #3
 80050c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050c6:	00e2      	lsls	r2, r4, #3
 80050c8:	4614      	mov	r4, r2
 80050ca:	461d      	mov	r5, r3
 80050cc:	4643      	mov	r3, r8
 80050ce:	18e3      	adds	r3, r4, r3
 80050d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80050d4:	464b      	mov	r3, r9
 80050d6:	eb45 0303 	adc.w	r3, r5, r3
 80050da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80050de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80050ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80050ee:	f04f 0200 	mov.w	r2, #0
 80050f2:	f04f 0300 	mov.w	r3, #0
 80050f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80050fa:	4629      	mov	r1, r5
 80050fc:	008b      	lsls	r3, r1, #2
 80050fe:	4621      	mov	r1, r4
 8005100:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005104:	4621      	mov	r1, r4
 8005106:	008a      	lsls	r2, r1, #2
 8005108:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800510c:	f7fb f920 	bl	8000350 <__aeabi_uldivmod>
 8005110:	4602      	mov	r2, r0
 8005112:	460b      	mov	r3, r1
 8005114:	4b60      	ldr	r3, [pc, #384]	; (8005298 <UART_SetConfig+0x4e4>)
 8005116:	fba3 2302 	umull	r2, r3, r3, r2
 800511a:	095b      	lsrs	r3, r3, #5
 800511c:	011c      	lsls	r4, r3, #4
 800511e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005122:	2200      	movs	r2, #0
 8005124:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005128:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800512c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005130:	4642      	mov	r2, r8
 8005132:	464b      	mov	r3, r9
 8005134:	1891      	adds	r1, r2, r2
 8005136:	61b9      	str	r1, [r7, #24]
 8005138:	415b      	adcs	r3, r3
 800513a:	61fb      	str	r3, [r7, #28]
 800513c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005140:	4641      	mov	r1, r8
 8005142:	1851      	adds	r1, r2, r1
 8005144:	6139      	str	r1, [r7, #16]
 8005146:	4649      	mov	r1, r9
 8005148:	414b      	adcs	r3, r1
 800514a:	617b      	str	r3, [r7, #20]
 800514c:	f04f 0200 	mov.w	r2, #0
 8005150:	f04f 0300 	mov.w	r3, #0
 8005154:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005158:	4659      	mov	r1, fp
 800515a:	00cb      	lsls	r3, r1, #3
 800515c:	4651      	mov	r1, sl
 800515e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005162:	4651      	mov	r1, sl
 8005164:	00ca      	lsls	r2, r1, #3
 8005166:	4610      	mov	r0, r2
 8005168:	4619      	mov	r1, r3
 800516a:	4603      	mov	r3, r0
 800516c:	4642      	mov	r2, r8
 800516e:	189b      	adds	r3, r3, r2
 8005170:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005174:	464b      	mov	r3, r9
 8005176:	460a      	mov	r2, r1
 8005178:	eb42 0303 	adc.w	r3, r2, r3
 800517c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	67bb      	str	r3, [r7, #120]	; 0x78
 800518a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800518c:	f04f 0200 	mov.w	r2, #0
 8005190:	f04f 0300 	mov.w	r3, #0
 8005194:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005198:	4649      	mov	r1, r9
 800519a:	008b      	lsls	r3, r1, #2
 800519c:	4641      	mov	r1, r8
 800519e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051a2:	4641      	mov	r1, r8
 80051a4:	008a      	lsls	r2, r1, #2
 80051a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80051aa:	f7fb f8d1 	bl	8000350 <__aeabi_uldivmod>
 80051ae:	4602      	mov	r2, r0
 80051b0:	460b      	mov	r3, r1
 80051b2:	4611      	mov	r1, r2
 80051b4:	4b38      	ldr	r3, [pc, #224]	; (8005298 <UART_SetConfig+0x4e4>)
 80051b6:	fba3 2301 	umull	r2, r3, r3, r1
 80051ba:	095b      	lsrs	r3, r3, #5
 80051bc:	2264      	movs	r2, #100	; 0x64
 80051be:	fb02 f303 	mul.w	r3, r2, r3
 80051c2:	1acb      	subs	r3, r1, r3
 80051c4:	011b      	lsls	r3, r3, #4
 80051c6:	3332      	adds	r3, #50	; 0x32
 80051c8:	4a33      	ldr	r2, [pc, #204]	; (8005298 <UART_SetConfig+0x4e4>)
 80051ca:	fba2 2303 	umull	r2, r3, r2, r3
 80051ce:	095b      	lsrs	r3, r3, #5
 80051d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051d4:	441c      	add	r4, r3
 80051d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051da:	2200      	movs	r2, #0
 80051dc:	673b      	str	r3, [r7, #112]	; 0x70
 80051de:	677a      	str	r2, [r7, #116]	; 0x74
 80051e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80051e4:	4642      	mov	r2, r8
 80051e6:	464b      	mov	r3, r9
 80051e8:	1891      	adds	r1, r2, r2
 80051ea:	60b9      	str	r1, [r7, #8]
 80051ec:	415b      	adcs	r3, r3
 80051ee:	60fb      	str	r3, [r7, #12]
 80051f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051f4:	4641      	mov	r1, r8
 80051f6:	1851      	adds	r1, r2, r1
 80051f8:	6039      	str	r1, [r7, #0]
 80051fa:	4649      	mov	r1, r9
 80051fc:	414b      	adcs	r3, r1
 80051fe:	607b      	str	r3, [r7, #4]
 8005200:	f04f 0200 	mov.w	r2, #0
 8005204:	f04f 0300 	mov.w	r3, #0
 8005208:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800520c:	4659      	mov	r1, fp
 800520e:	00cb      	lsls	r3, r1, #3
 8005210:	4651      	mov	r1, sl
 8005212:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005216:	4651      	mov	r1, sl
 8005218:	00ca      	lsls	r2, r1, #3
 800521a:	4610      	mov	r0, r2
 800521c:	4619      	mov	r1, r3
 800521e:	4603      	mov	r3, r0
 8005220:	4642      	mov	r2, r8
 8005222:	189b      	adds	r3, r3, r2
 8005224:	66bb      	str	r3, [r7, #104]	; 0x68
 8005226:	464b      	mov	r3, r9
 8005228:	460a      	mov	r2, r1
 800522a:	eb42 0303 	adc.w	r3, r2, r3
 800522e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	663b      	str	r3, [r7, #96]	; 0x60
 800523a:	667a      	str	r2, [r7, #100]	; 0x64
 800523c:	f04f 0200 	mov.w	r2, #0
 8005240:	f04f 0300 	mov.w	r3, #0
 8005244:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005248:	4649      	mov	r1, r9
 800524a:	008b      	lsls	r3, r1, #2
 800524c:	4641      	mov	r1, r8
 800524e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005252:	4641      	mov	r1, r8
 8005254:	008a      	lsls	r2, r1, #2
 8005256:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800525a:	f7fb f879 	bl	8000350 <__aeabi_uldivmod>
 800525e:	4602      	mov	r2, r0
 8005260:	460b      	mov	r3, r1
 8005262:	4b0d      	ldr	r3, [pc, #52]	; (8005298 <UART_SetConfig+0x4e4>)
 8005264:	fba3 1302 	umull	r1, r3, r3, r2
 8005268:	095b      	lsrs	r3, r3, #5
 800526a:	2164      	movs	r1, #100	; 0x64
 800526c:	fb01 f303 	mul.w	r3, r1, r3
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	011b      	lsls	r3, r3, #4
 8005274:	3332      	adds	r3, #50	; 0x32
 8005276:	4a08      	ldr	r2, [pc, #32]	; (8005298 <UART_SetConfig+0x4e4>)
 8005278:	fba2 2303 	umull	r2, r3, r2, r3
 800527c:	095b      	lsrs	r3, r3, #5
 800527e:	f003 020f 	and.w	r2, r3, #15
 8005282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4422      	add	r2, r4
 800528a:	609a      	str	r2, [r3, #8]
}
 800528c:	bf00      	nop
 800528e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005292:	46bd      	mov	sp, r7
 8005294:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005298:	51eb851f 	.word	0x51eb851f

0800529c <malloc>:
 800529c:	4b02      	ldr	r3, [pc, #8]	; (80052a8 <malloc+0xc>)
 800529e:	4601      	mov	r1, r0
 80052a0:	6818      	ldr	r0, [r3, #0]
 80052a2:	f000 b82b 	b.w	80052fc <_malloc_r>
 80052a6:	bf00      	nop
 80052a8:	20000064 	.word	0x20000064

080052ac <free>:
 80052ac:	4b02      	ldr	r3, [pc, #8]	; (80052b8 <free+0xc>)
 80052ae:	4601      	mov	r1, r0
 80052b0:	6818      	ldr	r0, [r3, #0]
 80052b2:	f000 bb41 	b.w	8005938 <_free_r>
 80052b6:	bf00      	nop
 80052b8:	20000064 	.word	0x20000064

080052bc <sbrk_aligned>:
 80052bc:	b570      	push	{r4, r5, r6, lr}
 80052be:	4e0e      	ldr	r6, [pc, #56]	; (80052f8 <sbrk_aligned+0x3c>)
 80052c0:	460c      	mov	r4, r1
 80052c2:	6831      	ldr	r1, [r6, #0]
 80052c4:	4605      	mov	r5, r0
 80052c6:	b911      	cbnz	r1, 80052ce <sbrk_aligned+0x12>
 80052c8:	f000 fae8 	bl	800589c <_sbrk_r>
 80052cc:	6030      	str	r0, [r6, #0]
 80052ce:	4621      	mov	r1, r4
 80052d0:	4628      	mov	r0, r5
 80052d2:	f000 fae3 	bl	800589c <_sbrk_r>
 80052d6:	1c43      	adds	r3, r0, #1
 80052d8:	d00a      	beq.n	80052f0 <sbrk_aligned+0x34>
 80052da:	1cc4      	adds	r4, r0, #3
 80052dc:	f024 0403 	bic.w	r4, r4, #3
 80052e0:	42a0      	cmp	r0, r4
 80052e2:	d007      	beq.n	80052f4 <sbrk_aligned+0x38>
 80052e4:	1a21      	subs	r1, r4, r0
 80052e6:	4628      	mov	r0, r5
 80052e8:	f000 fad8 	bl	800589c <_sbrk_r>
 80052ec:	3001      	adds	r0, #1
 80052ee:	d101      	bne.n	80052f4 <sbrk_aligned+0x38>
 80052f0:	f04f 34ff 	mov.w	r4, #4294967295
 80052f4:	4620      	mov	r0, r4
 80052f6:	bd70      	pop	{r4, r5, r6, pc}
 80052f8:	200001ec 	.word	0x200001ec

080052fc <_malloc_r>:
 80052fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005300:	1ccd      	adds	r5, r1, #3
 8005302:	f025 0503 	bic.w	r5, r5, #3
 8005306:	3508      	adds	r5, #8
 8005308:	2d0c      	cmp	r5, #12
 800530a:	bf38      	it	cc
 800530c:	250c      	movcc	r5, #12
 800530e:	2d00      	cmp	r5, #0
 8005310:	4607      	mov	r7, r0
 8005312:	db01      	blt.n	8005318 <_malloc_r+0x1c>
 8005314:	42a9      	cmp	r1, r5
 8005316:	d905      	bls.n	8005324 <_malloc_r+0x28>
 8005318:	230c      	movs	r3, #12
 800531a:	603b      	str	r3, [r7, #0]
 800531c:	2600      	movs	r6, #0
 800531e:	4630      	mov	r0, r6
 8005320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005324:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80053f8 <_malloc_r+0xfc>
 8005328:	f000 f868 	bl	80053fc <__malloc_lock>
 800532c:	f8d8 3000 	ldr.w	r3, [r8]
 8005330:	461c      	mov	r4, r3
 8005332:	bb5c      	cbnz	r4, 800538c <_malloc_r+0x90>
 8005334:	4629      	mov	r1, r5
 8005336:	4638      	mov	r0, r7
 8005338:	f7ff ffc0 	bl	80052bc <sbrk_aligned>
 800533c:	1c43      	adds	r3, r0, #1
 800533e:	4604      	mov	r4, r0
 8005340:	d155      	bne.n	80053ee <_malloc_r+0xf2>
 8005342:	f8d8 4000 	ldr.w	r4, [r8]
 8005346:	4626      	mov	r6, r4
 8005348:	2e00      	cmp	r6, #0
 800534a:	d145      	bne.n	80053d8 <_malloc_r+0xdc>
 800534c:	2c00      	cmp	r4, #0
 800534e:	d048      	beq.n	80053e2 <_malloc_r+0xe6>
 8005350:	6823      	ldr	r3, [r4, #0]
 8005352:	4631      	mov	r1, r6
 8005354:	4638      	mov	r0, r7
 8005356:	eb04 0903 	add.w	r9, r4, r3
 800535a:	f000 fa9f 	bl	800589c <_sbrk_r>
 800535e:	4581      	cmp	r9, r0
 8005360:	d13f      	bne.n	80053e2 <_malloc_r+0xe6>
 8005362:	6821      	ldr	r1, [r4, #0]
 8005364:	1a6d      	subs	r5, r5, r1
 8005366:	4629      	mov	r1, r5
 8005368:	4638      	mov	r0, r7
 800536a:	f7ff ffa7 	bl	80052bc <sbrk_aligned>
 800536e:	3001      	adds	r0, #1
 8005370:	d037      	beq.n	80053e2 <_malloc_r+0xe6>
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	442b      	add	r3, r5
 8005376:	6023      	str	r3, [r4, #0]
 8005378:	f8d8 3000 	ldr.w	r3, [r8]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d038      	beq.n	80053f2 <_malloc_r+0xf6>
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	42a2      	cmp	r2, r4
 8005384:	d12b      	bne.n	80053de <_malloc_r+0xe2>
 8005386:	2200      	movs	r2, #0
 8005388:	605a      	str	r2, [r3, #4]
 800538a:	e00f      	b.n	80053ac <_malloc_r+0xb0>
 800538c:	6822      	ldr	r2, [r4, #0]
 800538e:	1b52      	subs	r2, r2, r5
 8005390:	d41f      	bmi.n	80053d2 <_malloc_r+0xd6>
 8005392:	2a0b      	cmp	r2, #11
 8005394:	d917      	bls.n	80053c6 <_malloc_r+0xca>
 8005396:	1961      	adds	r1, r4, r5
 8005398:	42a3      	cmp	r3, r4
 800539a:	6025      	str	r5, [r4, #0]
 800539c:	bf18      	it	ne
 800539e:	6059      	strne	r1, [r3, #4]
 80053a0:	6863      	ldr	r3, [r4, #4]
 80053a2:	bf08      	it	eq
 80053a4:	f8c8 1000 	streq.w	r1, [r8]
 80053a8:	5162      	str	r2, [r4, r5]
 80053aa:	604b      	str	r3, [r1, #4]
 80053ac:	4638      	mov	r0, r7
 80053ae:	f104 060b 	add.w	r6, r4, #11
 80053b2:	f000 f829 	bl	8005408 <__malloc_unlock>
 80053b6:	f026 0607 	bic.w	r6, r6, #7
 80053ba:	1d23      	adds	r3, r4, #4
 80053bc:	1af2      	subs	r2, r6, r3
 80053be:	d0ae      	beq.n	800531e <_malloc_r+0x22>
 80053c0:	1b9b      	subs	r3, r3, r6
 80053c2:	50a3      	str	r3, [r4, r2]
 80053c4:	e7ab      	b.n	800531e <_malloc_r+0x22>
 80053c6:	42a3      	cmp	r3, r4
 80053c8:	6862      	ldr	r2, [r4, #4]
 80053ca:	d1dd      	bne.n	8005388 <_malloc_r+0x8c>
 80053cc:	f8c8 2000 	str.w	r2, [r8]
 80053d0:	e7ec      	b.n	80053ac <_malloc_r+0xb0>
 80053d2:	4623      	mov	r3, r4
 80053d4:	6864      	ldr	r4, [r4, #4]
 80053d6:	e7ac      	b.n	8005332 <_malloc_r+0x36>
 80053d8:	4634      	mov	r4, r6
 80053da:	6876      	ldr	r6, [r6, #4]
 80053dc:	e7b4      	b.n	8005348 <_malloc_r+0x4c>
 80053de:	4613      	mov	r3, r2
 80053e0:	e7cc      	b.n	800537c <_malloc_r+0x80>
 80053e2:	230c      	movs	r3, #12
 80053e4:	603b      	str	r3, [r7, #0]
 80053e6:	4638      	mov	r0, r7
 80053e8:	f000 f80e 	bl	8005408 <__malloc_unlock>
 80053ec:	e797      	b.n	800531e <_malloc_r+0x22>
 80053ee:	6025      	str	r5, [r4, #0]
 80053f0:	e7dc      	b.n	80053ac <_malloc_r+0xb0>
 80053f2:	605b      	str	r3, [r3, #4]
 80053f4:	deff      	udf	#255	; 0xff
 80053f6:	bf00      	nop
 80053f8:	200001e8 	.word	0x200001e8

080053fc <__malloc_lock>:
 80053fc:	4801      	ldr	r0, [pc, #4]	; (8005404 <__malloc_lock+0x8>)
 80053fe:	f000 ba99 	b.w	8005934 <__retarget_lock_acquire_recursive>
 8005402:	bf00      	nop
 8005404:	20000330 	.word	0x20000330

08005408 <__malloc_unlock>:
 8005408:	4801      	ldr	r0, [pc, #4]	; (8005410 <__malloc_unlock+0x8>)
 800540a:	f000 ba94 	b.w	8005936 <__retarget_lock_release_recursive>
 800540e:	bf00      	nop
 8005410:	20000330 	.word	0x20000330

08005414 <std>:
 8005414:	2300      	movs	r3, #0
 8005416:	b510      	push	{r4, lr}
 8005418:	4604      	mov	r4, r0
 800541a:	e9c0 3300 	strd	r3, r3, [r0]
 800541e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005422:	6083      	str	r3, [r0, #8]
 8005424:	8181      	strh	r1, [r0, #12]
 8005426:	6643      	str	r3, [r0, #100]	; 0x64
 8005428:	81c2      	strh	r2, [r0, #14]
 800542a:	6183      	str	r3, [r0, #24]
 800542c:	4619      	mov	r1, r3
 800542e:	2208      	movs	r2, #8
 8005430:	305c      	adds	r0, #92	; 0x5c
 8005432:	f000 f9e5 	bl	8005800 <memset>
 8005436:	4b05      	ldr	r3, [pc, #20]	; (800544c <std+0x38>)
 8005438:	6263      	str	r3, [r4, #36]	; 0x24
 800543a:	4b05      	ldr	r3, [pc, #20]	; (8005450 <std+0x3c>)
 800543c:	62a3      	str	r3, [r4, #40]	; 0x28
 800543e:	4b05      	ldr	r3, [pc, #20]	; (8005454 <std+0x40>)
 8005440:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005442:	4b05      	ldr	r3, [pc, #20]	; (8005458 <std+0x44>)
 8005444:	6224      	str	r4, [r4, #32]
 8005446:	6323      	str	r3, [r4, #48]	; 0x30
 8005448:	bd10      	pop	{r4, pc}
 800544a:	bf00      	nop
 800544c:	08005651 	.word	0x08005651
 8005450:	08005673 	.word	0x08005673
 8005454:	080056ab 	.word	0x080056ab
 8005458:	080056cf 	.word	0x080056cf

0800545c <stdio_exit_handler>:
 800545c:	4a02      	ldr	r2, [pc, #8]	; (8005468 <stdio_exit_handler+0xc>)
 800545e:	4903      	ldr	r1, [pc, #12]	; (800546c <stdio_exit_handler+0x10>)
 8005460:	4803      	ldr	r0, [pc, #12]	; (8005470 <stdio_exit_handler+0x14>)
 8005462:	f000 b869 	b.w	8005538 <_fwalk_sglue>
 8005466:	bf00      	nop
 8005468:	2000000c 	.word	0x2000000c
 800546c:	08006085 	.word	0x08006085
 8005470:	20000018 	.word	0x20000018

08005474 <cleanup_stdio>:
 8005474:	6841      	ldr	r1, [r0, #4]
 8005476:	4b0c      	ldr	r3, [pc, #48]	; (80054a8 <cleanup_stdio+0x34>)
 8005478:	4299      	cmp	r1, r3
 800547a:	b510      	push	{r4, lr}
 800547c:	4604      	mov	r4, r0
 800547e:	d001      	beq.n	8005484 <cleanup_stdio+0x10>
 8005480:	f000 fe00 	bl	8006084 <_fflush_r>
 8005484:	68a1      	ldr	r1, [r4, #8]
 8005486:	4b09      	ldr	r3, [pc, #36]	; (80054ac <cleanup_stdio+0x38>)
 8005488:	4299      	cmp	r1, r3
 800548a:	d002      	beq.n	8005492 <cleanup_stdio+0x1e>
 800548c:	4620      	mov	r0, r4
 800548e:	f000 fdf9 	bl	8006084 <_fflush_r>
 8005492:	68e1      	ldr	r1, [r4, #12]
 8005494:	4b06      	ldr	r3, [pc, #24]	; (80054b0 <cleanup_stdio+0x3c>)
 8005496:	4299      	cmp	r1, r3
 8005498:	d004      	beq.n	80054a4 <cleanup_stdio+0x30>
 800549a:	4620      	mov	r0, r4
 800549c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054a0:	f000 bdf0 	b.w	8006084 <_fflush_r>
 80054a4:	bd10      	pop	{r4, pc}
 80054a6:	bf00      	nop
 80054a8:	200001f0 	.word	0x200001f0
 80054ac:	20000258 	.word	0x20000258
 80054b0:	200002c0 	.word	0x200002c0

080054b4 <global_stdio_init.part.0>:
 80054b4:	b510      	push	{r4, lr}
 80054b6:	4b0b      	ldr	r3, [pc, #44]	; (80054e4 <global_stdio_init.part.0+0x30>)
 80054b8:	4c0b      	ldr	r4, [pc, #44]	; (80054e8 <global_stdio_init.part.0+0x34>)
 80054ba:	4a0c      	ldr	r2, [pc, #48]	; (80054ec <global_stdio_init.part.0+0x38>)
 80054bc:	601a      	str	r2, [r3, #0]
 80054be:	4620      	mov	r0, r4
 80054c0:	2200      	movs	r2, #0
 80054c2:	2104      	movs	r1, #4
 80054c4:	f7ff ffa6 	bl	8005414 <std>
 80054c8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80054cc:	2201      	movs	r2, #1
 80054ce:	2109      	movs	r1, #9
 80054d0:	f7ff ffa0 	bl	8005414 <std>
 80054d4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80054d8:	2202      	movs	r2, #2
 80054da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054de:	2112      	movs	r1, #18
 80054e0:	f7ff bf98 	b.w	8005414 <std>
 80054e4:	20000328 	.word	0x20000328
 80054e8:	200001f0 	.word	0x200001f0
 80054ec:	0800545d 	.word	0x0800545d

080054f0 <__sfp_lock_acquire>:
 80054f0:	4801      	ldr	r0, [pc, #4]	; (80054f8 <__sfp_lock_acquire+0x8>)
 80054f2:	f000 ba1f 	b.w	8005934 <__retarget_lock_acquire_recursive>
 80054f6:	bf00      	nop
 80054f8:	20000331 	.word	0x20000331

080054fc <__sfp_lock_release>:
 80054fc:	4801      	ldr	r0, [pc, #4]	; (8005504 <__sfp_lock_release+0x8>)
 80054fe:	f000 ba1a 	b.w	8005936 <__retarget_lock_release_recursive>
 8005502:	bf00      	nop
 8005504:	20000331 	.word	0x20000331

08005508 <__sinit>:
 8005508:	b510      	push	{r4, lr}
 800550a:	4604      	mov	r4, r0
 800550c:	f7ff fff0 	bl	80054f0 <__sfp_lock_acquire>
 8005510:	6a23      	ldr	r3, [r4, #32]
 8005512:	b11b      	cbz	r3, 800551c <__sinit+0x14>
 8005514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005518:	f7ff bff0 	b.w	80054fc <__sfp_lock_release>
 800551c:	4b04      	ldr	r3, [pc, #16]	; (8005530 <__sinit+0x28>)
 800551e:	6223      	str	r3, [r4, #32]
 8005520:	4b04      	ldr	r3, [pc, #16]	; (8005534 <__sinit+0x2c>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d1f5      	bne.n	8005514 <__sinit+0xc>
 8005528:	f7ff ffc4 	bl	80054b4 <global_stdio_init.part.0>
 800552c:	e7f2      	b.n	8005514 <__sinit+0xc>
 800552e:	bf00      	nop
 8005530:	08005475 	.word	0x08005475
 8005534:	20000328 	.word	0x20000328

08005538 <_fwalk_sglue>:
 8005538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800553c:	4607      	mov	r7, r0
 800553e:	4688      	mov	r8, r1
 8005540:	4614      	mov	r4, r2
 8005542:	2600      	movs	r6, #0
 8005544:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005548:	f1b9 0901 	subs.w	r9, r9, #1
 800554c:	d505      	bpl.n	800555a <_fwalk_sglue+0x22>
 800554e:	6824      	ldr	r4, [r4, #0]
 8005550:	2c00      	cmp	r4, #0
 8005552:	d1f7      	bne.n	8005544 <_fwalk_sglue+0xc>
 8005554:	4630      	mov	r0, r6
 8005556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800555a:	89ab      	ldrh	r3, [r5, #12]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d907      	bls.n	8005570 <_fwalk_sglue+0x38>
 8005560:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005564:	3301      	adds	r3, #1
 8005566:	d003      	beq.n	8005570 <_fwalk_sglue+0x38>
 8005568:	4629      	mov	r1, r5
 800556a:	4638      	mov	r0, r7
 800556c:	47c0      	blx	r8
 800556e:	4306      	orrs	r6, r0
 8005570:	3568      	adds	r5, #104	; 0x68
 8005572:	e7e9      	b.n	8005548 <_fwalk_sglue+0x10>

08005574 <iprintf>:
 8005574:	b40f      	push	{r0, r1, r2, r3}
 8005576:	b507      	push	{r0, r1, r2, lr}
 8005578:	4906      	ldr	r1, [pc, #24]	; (8005594 <iprintf+0x20>)
 800557a:	ab04      	add	r3, sp, #16
 800557c:	6808      	ldr	r0, [r1, #0]
 800557e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005582:	6881      	ldr	r1, [r0, #8]
 8005584:	9301      	str	r3, [sp, #4]
 8005586:	f000 fa4d 	bl	8005a24 <_vfiprintf_r>
 800558a:	b003      	add	sp, #12
 800558c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005590:	b004      	add	sp, #16
 8005592:	4770      	bx	lr
 8005594:	20000064 	.word	0x20000064

08005598 <_puts_r>:
 8005598:	6a03      	ldr	r3, [r0, #32]
 800559a:	b570      	push	{r4, r5, r6, lr}
 800559c:	6884      	ldr	r4, [r0, #8]
 800559e:	4605      	mov	r5, r0
 80055a0:	460e      	mov	r6, r1
 80055a2:	b90b      	cbnz	r3, 80055a8 <_puts_r+0x10>
 80055a4:	f7ff ffb0 	bl	8005508 <__sinit>
 80055a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055aa:	07db      	lsls	r3, r3, #31
 80055ac:	d405      	bmi.n	80055ba <_puts_r+0x22>
 80055ae:	89a3      	ldrh	r3, [r4, #12]
 80055b0:	0598      	lsls	r0, r3, #22
 80055b2:	d402      	bmi.n	80055ba <_puts_r+0x22>
 80055b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055b6:	f000 f9bd 	bl	8005934 <__retarget_lock_acquire_recursive>
 80055ba:	89a3      	ldrh	r3, [r4, #12]
 80055bc:	0719      	lsls	r1, r3, #28
 80055be:	d513      	bpl.n	80055e8 <_puts_r+0x50>
 80055c0:	6923      	ldr	r3, [r4, #16]
 80055c2:	b18b      	cbz	r3, 80055e8 <_puts_r+0x50>
 80055c4:	3e01      	subs	r6, #1
 80055c6:	68a3      	ldr	r3, [r4, #8]
 80055c8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80055cc:	3b01      	subs	r3, #1
 80055ce:	60a3      	str	r3, [r4, #8]
 80055d0:	b9e9      	cbnz	r1, 800560e <_puts_r+0x76>
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	da2e      	bge.n	8005634 <_puts_r+0x9c>
 80055d6:	4622      	mov	r2, r4
 80055d8:	210a      	movs	r1, #10
 80055da:	4628      	mov	r0, r5
 80055dc:	f000 f87b 	bl	80056d6 <__swbuf_r>
 80055e0:	3001      	adds	r0, #1
 80055e2:	d007      	beq.n	80055f4 <_puts_r+0x5c>
 80055e4:	250a      	movs	r5, #10
 80055e6:	e007      	b.n	80055f8 <_puts_r+0x60>
 80055e8:	4621      	mov	r1, r4
 80055ea:	4628      	mov	r0, r5
 80055ec:	f000 f8b0 	bl	8005750 <__swsetup_r>
 80055f0:	2800      	cmp	r0, #0
 80055f2:	d0e7      	beq.n	80055c4 <_puts_r+0x2c>
 80055f4:	f04f 35ff 	mov.w	r5, #4294967295
 80055f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055fa:	07da      	lsls	r2, r3, #31
 80055fc:	d405      	bmi.n	800560a <_puts_r+0x72>
 80055fe:	89a3      	ldrh	r3, [r4, #12]
 8005600:	059b      	lsls	r3, r3, #22
 8005602:	d402      	bmi.n	800560a <_puts_r+0x72>
 8005604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005606:	f000 f996 	bl	8005936 <__retarget_lock_release_recursive>
 800560a:	4628      	mov	r0, r5
 800560c:	bd70      	pop	{r4, r5, r6, pc}
 800560e:	2b00      	cmp	r3, #0
 8005610:	da04      	bge.n	800561c <_puts_r+0x84>
 8005612:	69a2      	ldr	r2, [r4, #24]
 8005614:	429a      	cmp	r2, r3
 8005616:	dc06      	bgt.n	8005626 <_puts_r+0x8e>
 8005618:	290a      	cmp	r1, #10
 800561a:	d004      	beq.n	8005626 <_puts_r+0x8e>
 800561c:	6823      	ldr	r3, [r4, #0]
 800561e:	1c5a      	adds	r2, r3, #1
 8005620:	6022      	str	r2, [r4, #0]
 8005622:	7019      	strb	r1, [r3, #0]
 8005624:	e7cf      	b.n	80055c6 <_puts_r+0x2e>
 8005626:	4622      	mov	r2, r4
 8005628:	4628      	mov	r0, r5
 800562a:	f000 f854 	bl	80056d6 <__swbuf_r>
 800562e:	3001      	adds	r0, #1
 8005630:	d1c9      	bne.n	80055c6 <_puts_r+0x2e>
 8005632:	e7df      	b.n	80055f4 <_puts_r+0x5c>
 8005634:	6823      	ldr	r3, [r4, #0]
 8005636:	250a      	movs	r5, #10
 8005638:	1c5a      	adds	r2, r3, #1
 800563a:	6022      	str	r2, [r4, #0]
 800563c:	701d      	strb	r5, [r3, #0]
 800563e:	e7db      	b.n	80055f8 <_puts_r+0x60>

08005640 <puts>:
 8005640:	4b02      	ldr	r3, [pc, #8]	; (800564c <puts+0xc>)
 8005642:	4601      	mov	r1, r0
 8005644:	6818      	ldr	r0, [r3, #0]
 8005646:	f7ff bfa7 	b.w	8005598 <_puts_r>
 800564a:	bf00      	nop
 800564c:	20000064 	.word	0x20000064

08005650 <__sread>:
 8005650:	b510      	push	{r4, lr}
 8005652:	460c      	mov	r4, r1
 8005654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005658:	f000 f90e 	bl	8005878 <_read_r>
 800565c:	2800      	cmp	r0, #0
 800565e:	bfab      	itete	ge
 8005660:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005662:	89a3      	ldrhlt	r3, [r4, #12]
 8005664:	181b      	addge	r3, r3, r0
 8005666:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800566a:	bfac      	ite	ge
 800566c:	6563      	strge	r3, [r4, #84]	; 0x54
 800566e:	81a3      	strhlt	r3, [r4, #12]
 8005670:	bd10      	pop	{r4, pc}

08005672 <__swrite>:
 8005672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005676:	461f      	mov	r7, r3
 8005678:	898b      	ldrh	r3, [r1, #12]
 800567a:	05db      	lsls	r3, r3, #23
 800567c:	4605      	mov	r5, r0
 800567e:	460c      	mov	r4, r1
 8005680:	4616      	mov	r6, r2
 8005682:	d505      	bpl.n	8005690 <__swrite+0x1e>
 8005684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005688:	2302      	movs	r3, #2
 800568a:	2200      	movs	r2, #0
 800568c:	f000 f8e2 	bl	8005854 <_lseek_r>
 8005690:	89a3      	ldrh	r3, [r4, #12]
 8005692:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005696:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800569a:	81a3      	strh	r3, [r4, #12]
 800569c:	4632      	mov	r2, r6
 800569e:	463b      	mov	r3, r7
 80056a0:	4628      	mov	r0, r5
 80056a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056a6:	f000 b909 	b.w	80058bc <_write_r>

080056aa <__sseek>:
 80056aa:	b510      	push	{r4, lr}
 80056ac:	460c      	mov	r4, r1
 80056ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056b2:	f000 f8cf 	bl	8005854 <_lseek_r>
 80056b6:	1c43      	adds	r3, r0, #1
 80056b8:	89a3      	ldrh	r3, [r4, #12]
 80056ba:	bf15      	itete	ne
 80056bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80056be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80056c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80056c6:	81a3      	strheq	r3, [r4, #12]
 80056c8:	bf18      	it	ne
 80056ca:	81a3      	strhne	r3, [r4, #12]
 80056cc:	bd10      	pop	{r4, pc}

080056ce <__sclose>:
 80056ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056d2:	f000 b8af 	b.w	8005834 <_close_r>

080056d6 <__swbuf_r>:
 80056d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056d8:	460e      	mov	r6, r1
 80056da:	4614      	mov	r4, r2
 80056dc:	4605      	mov	r5, r0
 80056de:	b118      	cbz	r0, 80056e8 <__swbuf_r+0x12>
 80056e0:	6a03      	ldr	r3, [r0, #32]
 80056e2:	b90b      	cbnz	r3, 80056e8 <__swbuf_r+0x12>
 80056e4:	f7ff ff10 	bl	8005508 <__sinit>
 80056e8:	69a3      	ldr	r3, [r4, #24]
 80056ea:	60a3      	str	r3, [r4, #8]
 80056ec:	89a3      	ldrh	r3, [r4, #12]
 80056ee:	071a      	lsls	r2, r3, #28
 80056f0:	d525      	bpl.n	800573e <__swbuf_r+0x68>
 80056f2:	6923      	ldr	r3, [r4, #16]
 80056f4:	b31b      	cbz	r3, 800573e <__swbuf_r+0x68>
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	6922      	ldr	r2, [r4, #16]
 80056fa:	1a98      	subs	r0, r3, r2
 80056fc:	6963      	ldr	r3, [r4, #20]
 80056fe:	b2f6      	uxtb	r6, r6
 8005700:	4283      	cmp	r3, r0
 8005702:	4637      	mov	r7, r6
 8005704:	dc04      	bgt.n	8005710 <__swbuf_r+0x3a>
 8005706:	4621      	mov	r1, r4
 8005708:	4628      	mov	r0, r5
 800570a:	f000 fcbb 	bl	8006084 <_fflush_r>
 800570e:	b9e0      	cbnz	r0, 800574a <__swbuf_r+0x74>
 8005710:	68a3      	ldr	r3, [r4, #8]
 8005712:	3b01      	subs	r3, #1
 8005714:	60a3      	str	r3, [r4, #8]
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	1c5a      	adds	r2, r3, #1
 800571a:	6022      	str	r2, [r4, #0]
 800571c:	701e      	strb	r6, [r3, #0]
 800571e:	6962      	ldr	r2, [r4, #20]
 8005720:	1c43      	adds	r3, r0, #1
 8005722:	429a      	cmp	r2, r3
 8005724:	d004      	beq.n	8005730 <__swbuf_r+0x5a>
 8005726:	89a3      	ldrh	r3, [r4, #12]
 8005728:	07db      	lsls	r3, r3, #31
 800572a:	d506      	bpl.n	800573a <__swbuf_r+0x64>
 800572c:	2e0a      	cmp	r6, #10
 800572e:	d104      	bne.n	800573a <__swbuf_r+0x64>
 8005730:	4621      	mov	r1, r4
 8005732:	4628      	mov	r0, r5
 8005734:	f000 fca6 	bl	8006084 <_fflush_r>
 8005738:	b938      	cbnz	r0, 800574a <__swbuf_r+0x74>
 800573a:	4638      	mov	r0, r7
 800573c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800573e:	4621      	mov	r1, r4
 8005740:	4628      	mov	r0, r5
 8005742:	f000 f805 	bl	8005750 <__swsetup_r>
 8005746:	2800      	cmp	r0, #0
 8005748:	d0d5      	beq.n	80056f6 <__swbuf_r+0x20>
 800574a:	f04f 37ff 	mov.w	r7, #4294967295
 800574e:	e7f4      	b.n	800573a <__swbuf_r+0x64>

08005750 <__swsetup_r>:
 8005750:	b538      	push	{r3, r4, r5, lr}
 8005752:	4b2a      	ldr	r3, [pc, #168]	; (80057fc <__swsetup_r+0xac>)
 8005754:	4605      	mov	r5, r0
 8005756:	6818      	ldr	r0, [r3, #0]
 8005758:	460c      	mov	r4, r1
 800575a:	b118      	cbz	r0, 8005764 <__swsetup_r+0x14>
 800575c:	6a03      	ldr	r3, [r0, #32]
 800575e:	b90b      	cbnz	r3, 8005764 <__swsetup_r+0x14>
 8005760:	f7ff fed2 	bl	8005508 <__sinit>
 8005764:	89a3      	ldrh	r3, [r4, #12]
 8005766:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800576a:	0718      	lsls	r0, r3, #28
 800576c:	d422      	bmi.n	80057b4 <__swsetup_r+0x64>
 800576e:	06d9      	lsls	r1, r3, #27
 8005770:	d407      	bmi.n	8005782 <__swsetup_r+0x32>
 8005772:	2309      	movs	r3, #9
 8005774:	602b      	str	r3, [r5, #0]
 8005776:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800577a:	81a3      	strh	r3, [r4, #12]
 800577c:	f04f 30ff 	mov.w	r0, #4294967295
 8005780:	e034      	b.n	80057ec <__swsetup_r+0x9c>
 8005782:	0758      	lsls	r0, r3, #29
 8005784:	d512      	bpl.n	80057ac <__swsetup_r+0x5c>
 8005786:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005788:	b141      	cbz	r1, 800579c <__swsetup_r+0x4c>
 800578a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800578e:	4299      	cmp	r1, r3
 8005790:	d002      	beq.n	8005798 <__swsetup_r+0x48>
 8005792:	4628      	mov	r0, r5
 8005794:	f000 f8d0 	bl	8005938 <_free_r>
 8005798:	2300      	movs	r3, #0
 800579a:	6363      	str	r3, [r4, #52]	; 0x34
 800579c:	89a3      	ldrh	r3, [r4, #12]
 800579e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80057a2:	81a3      	strh	r3, [r4, #12]
 80057a4:	2300      	movs	r3, #0
 80057a6:	6063      	str	r3, [r4, #4]
 80057a8:	6923      	ldr	r3, [r4, #16]
 80057aa:	6023      	str	r3, [r4, #0]
 80057ac:	89a3      	ldrh	r3, [r4, #12]
 80057ae:	f043 0308 	orr.w	r3, r3, #8
 80057b2:	81a3      	strh	r3, [r4, #12]
 80057b4:	6923      	ldr	r3, [r4, #16]
 80057b6:	b94b      	cbnz	r3, 80057cc <__swsetup_r+0x7c>
 80057b8:	89a3      	ldrh	r3, [r4, #12]
 80057ba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80057be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057c2:	d003      	beq.n	80057cc <__swsetup_r+0x7c>
 80057c4:	4621      	mov	r1, r4
 80057c6:	4628      	mov	r0, r5
 80057c8:	f000 fcaa 	bl	8006120 <__smakebuf_r>
 80057cc:	89a0      	ldrh	r0, [r4, #12]
 80057ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057d2:	f010 0301 	ands.w	r3, r0, #1
 80057d6:	d00a      	beq.n	80057ee <__swsetup_r+0x9e>
 80057d8:	2300      	movs	r3, #0
 80057da:	60a3      	str	r3, [r4, #8]
 80057dc:	6963      	ldr	r3, [r4, #20]
 80057de:	425b      	negs	r3, r3
 80057e0:	61a3      	str	r3, [r4, #24]
 80057e2:	6923      	ldr	r3, [r4, #16]
 80057e4:	b943      	cbnz	r3, 80057f8 <__swsetup_r+0xa8>
 80057e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80057ea:	d1c4      	bne.n	8005776 <__swsetup_r+0x26>
 80057ec:	bd38      	pop	{r3, r4, r5, pc}
 80057ee:	0781      	lsls	r1, r0, #30
 80057f0:	bf58      	it	pl
 80057f2:	6963      	ldrpl	r3, [r4, #20]
 80057f4:	60a3      	str	r3, [r4, #8]
 80057f6:	e7f4      	b.n	80057e2 <__swsetup_r+0x92>
 80057f8:	2000      	movs	r0, #0
 80057fa:	e7f7      	b.n	80057ec <__swsetup_r+0x9c>
 80057fc:	20000064 	.word	0x20000064

08005800 <memset>:
 8005800:	4402      	add	r2, r0
 8005802:	4603      	mov	r3, r0
 8005804:	4293      	cmp	r3, r2
 8005806:	d100      	bne.n	800580a <memset+0xa>
 8005808:	4770      	bx	lr
 800580a:	f803 1b01 	strb.w	r1, [r3], #1
 800580e:	e7f9      	b.n	8005804 <memset+0x4>

08005810 <strncmp>:
 8005810:	b510      	push	{r4, lr}
 8005812:	b16a      	cbz	r2, 8005830 <strncmp+0x20>
 8005814:	3901      	subs	r1, #1
 8005816:	1884      	adds	r4, r0, r2
 8005818:	f810 2b01 	ldrb.w	r2, [r0], #1
 800581c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005820:	429a      	cmp	r2, r3
 8005822:	d103      	bne.n	800582c <strncmp+0x1c>
 8005824:	42a0      	cmp	r0, r4
 8005826:	d001      	beq.n	800582c <strncmp+0x1c>
 8005828:	2a00      	cmp	r2, #0
 800582a:	d1f5      	bne.n	8005818 <strncmp+0x8>
 800582c:	1ad0      	subs	r0, r2, r3
 800582e:	bd10      	pop	{r4, pc}
 8005830:	4610      	mov	r0, r2
 8005832:	e7fc      	b.n	800582e <strncmp+0x1e>

08005834 <_close_r>:
 8005834:	b538      	push	{r3, r4, r5, lr}
 8005836:	4d06      	ldr	r5, [pc, #24]	; (8005850 <_close_r+0x1c>)
 8005838:	2300      	movs	r3, #0
 800583a:	4604      	mov	r4, r0
 800583c:	4608      	mov	r0, r1
 800583e:	602b      	str	r3, [r5, #0]
 8005840:	f7fb ffb5 	bl	80017ae <_close>
 8005844:	1c43      	adds	r3, r0, #1
 8005846:	d102      	bne.n	800584e <_close_r+0x1a>
 8005848:	682b      	ldr	r3, [r5, #0]
 800584a:	b103      	cbz	r3, 800584e <_close_r+0x1a>
 800584c:	6023      	str	r3, [r4, #0]
 800584e:	bd38      	pop	{r3, r4, r5, pc}
 8005850:	2000032c 	.word	0x2000032c

08005854 <_lseek_r>:
 8005854:	b538      	push	{r3, r4, r5, lr}
 8005856:	4d07      	ldr	r5, [pc, #28]	; (8005874 <_lseek_r+0x20>)
 8005858:	4604      	mov	r4, r0
 800585a:	4608      	mov	r0, r1
 800585c:	4611      	mov	r1, r2
 800585e:	2200      	movs	r2, #0
 8005860:	602a      	str	r2, [r5, #0]
 8005862:	461a      	mov	r2, r3
 8005864:	f7fb ffca 	bl	80017fc <_lseek>
 8005868:	1c43      	adds	r3, r0, #1
 800586a:	d102      	bne.n	8005872 <_lseek_r+0x1e>
 800586c:	682b      	ldr	r3, [r5, #0]
 800586e:	b103      	cbz	r3, 8005872 <_lseek_r+0x1e>
 8005870:	6023      	str	r3, [r4, #0]
 8005872:	bd38      	pop	{r3, r4, r5, pc}
 8005874:	2000032c 	.word	0x2000032c

08005878 <_read_r>:
 8005878:	b538      	push	{r3, r4, r5, lr}
 800587a:	4d07      	ldr	r5, [pc, #28]	; (8005898 <_read_r+0x20>)
 800587c:	4604      	mov	r4, r0
 800587e:	4608      	mov	r0, r1
 8005880:	4611      	mov	r1, r2
 8005882:	2200      	movs	r2, #0
 8005884:	602a      	str	r2, [r5, #0]
 8005886:	461a      	mov	r2, r3
 8005888:	f7fb ff58 	bl	800173c <_read>
 800588c:	1c43      	adds	r3, r0, #1
 800588e:	d102      	bne.n	8005896 <_read_r+0x1e>
 8005890:	682b      	ldr	r3, [r5, #0]
 8005892:	b103      	cbz	r3, 8005896 <_read_r+0x1e>
 8005894:	6023      	str	r3, [r4, #0]
 8005896:	bd38      	pop	{r3, r4, r5, pc}
 8005898:	2000032c 	.word	0x2000032c

0800589c <_sbrk_r>:
 800589c:	b538      	push	{r3, r4, r5, lr}
 800589e:	4d06      	ldr	r5, [pc, #24]	; (80058b8 <_sbrk_r+0x1c>)
 80058a0:	2300      	movs	r3, #0
 80058a2:	4604      	mov	r4, r0
 80058a4:	4608      	mov	r0, r1
 80058a6:	602b      	str	r3, [r5, #0]
 80058a8:	f7fb ffb6 	bl	8001818 <_sbrk>
 80058ac:	1c43      	adds	r3, r0, #1
 80058ae:	d102      	bne.n	80058b6 <_sbrk_r+0x1a>
 80058b0:	682b      	ldr	r3, [r5, #0]
 80058b2:	b103      	cbz	r3, 80058b6 <_sbrk_r+0x1a>
 80058b4:	6023      	str	r3, [r4, #0]
 80058b6:	bd38      	pop	{r3, r4, r5, pc}
 80058b8:	2000032c 	.word	0x2000032c

080058bc <_write_r>:
 80058bc:	b538      	push	{r3, r4, r5, lr}
 80058be:	4d07      	ldr	r5, [pc, #28]	; (80058dc <_write_r+0x20>)
 80058c0:	4604      	mov	r4, r0
 80058c2:	4608      	mov	r0, r1
 80058c4:	4611      	mov	r1, r2
 80058c6:	2200      	movs	r2, #0
 80058c8:	602a      	str	r2, [r5, #0]
 80058ca:	461a      	mov	r2, r3
 80058cc:	f7fb ff53 	bl	8001776 <_write>
 80058d0:	1c43      	adds	r3, r0, #1
 80058d2:	d102      	bne.n	80058da <_write_r+0x1e>
 80058d4:	682b      	ldr	r3, [r5, #0]
 80058d6:	b103      	cbz	r3, 80058da <_write_r+0x1e>
 80058d8:	6023      	str	r3, [r4, #0]
 80058da:	bd38      	pop	{r3, r4, r5, pc}
 80058dc:	2000032c 	.word	0x2000032c

080058e0 <__errno>:
 80058e0:	4b01      	ldr	r3, [pc, #4]	; (80058e8 <__errno+0x8>)
 80058e2:	6818      	ldr	r0, [r3, #0]
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	20000064 	.word	0x20000064

080058ec <__libc_init_array>:
 80058ec:	b570      	push	{r4, r5, r6, lr}
 80058ee:	4d0d      	ldr	r5, [pc, #52]	; (8005924 <__libc_init_array+0x38>)
 80058f0:	4c0d      	ldr	r4, [pc, #52]	; (8005928 <__libc_init_array+0x3c>)
 80058f2:	1b64      	subs	r4, r4, r5
 80058f4:	10a4      	asrs	r4, r4, #2
 80058f6:	2600      	movs	r6, #0
 80058f8:	42a6      	cmp	r6, r4
 80058fa:	d109      	bne.n	8005910 <__libc_init_array+0x24>
 80058fc:	4d0b      	ldr	r5, [pc, #44]	; (800592c <__libc_init_array+0x40>)
 80058fe:	4c0c      	ldr	r4, [pc, #48]	; (8005930 <__libc_init_array+0x44>)
 8005900:	f000 fc6c 	bl	80061dc <_init>
 8005904:	1b64      	subs	r4, r4, r5
 8005906:	10a4      	asrs	r4, r4, #2
 8005908:	2600      	movs	r6, #0
 800590a:	42a6      	cmp	r6, r4
 800590c:	d105      	bne.n	800591a <__libc_init_array+0x2e>
 800590e:	bd70      	pop	{r4, r5, r6, pc}
 8005910:	f855 3b04 	ldr.w	r3, [r5], #4
 8005914:	4798      	blx	r3
 8005916:	3601      	adds	r6, #1
 8005918:	e7ee      	b.n	80058f8 <__libc_init_array+0xc>
 800591a:	f855 3b04 	ldr.w	r3, [r5], #4
 800591e:	4798      	blx	r3
 8005920:	3601      	adds	r6, #1
 8005922:	e7f2      	b.n	800590a <__libc_init_array+0x1e>
 8005924:	080063e0 	.word	0x080063e0
 8005928:	080063e0 	.word	0x080063e0
 800592c:	080063e0 	.word	0x080063e0
 8005930:	080063e4 	.word	0x080063e4

08005934 <__retarget_lock_acquire_recursive>:
 8005934:	4770      	bx	lr

08005936 <__retarget_lock_release_recursive>:
 8005936:	4770      	bx	lr

08005938 <_free_r>:
 8005938:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800593a:	2900      	cmp	r1, #0
 800593c:	d044      	beq.n	80059c8 <_free_r+0x90>
 800593e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005942:	9001      	str	r0, [sp, #4]
 8005944:	2b00      	cmp	r3, #0
 8005946:	f1a1 0404 	sub.w	r4, r1, #4
 800594a:	bfb8      	it	lt
 800594c:	18e4      	addlt	r4, r4, r3
 800594e:	f7ff fd55 	bl	80053fc <__malloc_lock>
 8005952:	4a1e      	ldr	r2, [pc, #120]	; (80059cc <_free_r+0x94>)
 8005954:	9801      	ldr	r0, [sp, #4]
 8005956:	6813      	ldr	r3, [r2, #0]
 8005958:	b933      	cbnz	r3, 8005968 <_free_r+0x30>
 800595a:	6063      	str	r3, [r4, #4]
 800595c:	6014      	str	r4, [r2, #0]
 800595e:	b003      	add	sp, #12
 8005960:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005964:	f7ff bd50 	b.w	8005408 <__malloc_unlock>
 8005968:	42a3      	cmp	r3, r4
 800596a:	d908      	bls.n	800597e <_free_r+0x46>
 800596c:	6825      	ldr	r5, [r4, #0]
 800596e:	1961      	adds	r1, r4, r5
 8005970:	428b      	cmp	r3, r1
 8005972:	bf01      	itttt	eq
 8005974:	6819      	ldreq	r1, [r3, #0]
 8005976:	685b      	ldreq	r3, [r3, #4]
 8005978:	1949      	addeq	r1, r1, r5
 800597a:	6021      	streq	r1, [r4, #0]
 800597c:	e7ed      	b.n	800595a <_free_r+0x22>
 800597e:	461a      	mov	r2, r3
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	b10b      	cbz	r3, 8005988 <_free_r+0x50>
 8005984:	42a3      	cmp	r3, r4
 8005986:	d9fa      	bls.n	800597e <_free_r+0x46>
 8005988:	6811      	ldr	r1, [r2, #0]
 800598a:	1855      	adds	r5, r2, r1
 800598c:	42a5      	cmp	r5, r4
 800598e:	d10b      	bne.n	80059a8 <_free_r+0x70>
 8005990:	6824      	ldr	r4, [r4, #0]
 8005992:	4421      	add	r1, r4
 8005994:	1854      	adds	r4, r2, r1
 8005996:	42a3      	cmp	r3, r4
 8005998:	6011      	str	r1, [r2, #0]
 800599a:	d1e0      	bne.n	800595e <_free_r+0x26>
 800599c:	681c      	ldr	r4, [r3, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	6053      	str	r3, [r2, #4]
 80059a2:	440c      	add	r4, r1
 80059a4:	6014      	str	r4, [r2, #0]
 80059a6:	e7da      	b.n	800595e <_free_r+0x26>
 80059a8:	d902      	bls.n	80059b0 <_free_r+0x78>
 80059aa:	230c      	movs	r3, #12
 80059ac:	6003      	str	r3, [r0, #0]
 80059ae:	e7d6      	b.n	800595e <_free_r+0x26>
 80059b0:	6825      	ldr	r5, [r4, #0]
 80059b2:	1961      	adds	r1, r4, r5
 80059b4:	428b      	cmp	r3, r1
 80059b6:	bf04      	itt	eq
 80059b8:	6819      	ldreq	r1, [r3, #0]
 80059ba:	685b      	ldreq	r3, [r3, #4]
 80059bc:	6063      	str	r3, [r4, #4]
 80059be:	bf04      	itt	eq
 80059c0:	1949      	addeq	r1, r1, r5
 80059c2:	6021      	streq	r1, [r4, #0]
 80059c4:	6054      	str	r4, [r2, #4]
 80059c6:	e7ca      	b.n	800595e <_free_r+0x26>
 80059c8:	b003      	add	sp, #12
 80059ca:	bd30      	pop	{r4, r5, pc}
 80059cc:	200001e8 	.word	0x200001e8

080059d0 <__sfputc_r>:
 80059d0:	6893      	ldr	r3, [r2, #8]
 80059d2:	3b01      	subs	r3, #1
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	b410      	push	{r4}
 80059d8:	6093      	str	r3, [r2, #8]
 80059da:	da08      	bge.n	80059ee <__sfputc_r+0x1e>
 80059dc:	6994      	ldr	r4, [r2, #24]
 80059de:	42a3      	cmp	r3, r4
 80059e0:	db01      	blt.n	80059e6 <__sfputc_r+0x16>
 80059e2:	290a      	cmp	r1, #10
 80059e4:	d103      	bne.n	80059ee <__sfputc_r+0x1e>
 80059e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059ea:	f7ff be74 	b.w	80056d6 <__swbuf_r>
 80059ee:	6813      	ldr	r3, [r2, #0]
 80059f0:	1c58      	adds	r0, r3, #1
 80059f2:	6010      	str	r0, [r2, #0]
 80059f4:	7019      	strb	r1, [r3, #0]
 80059f6:	4608      	mov	r0, r1
 80059f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <__sfputs_r>:
 80059fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a00:	4606      	mov	r6, r0
 8005a02:	460f      	mov	r7, r1
 8005a04:	4614      	mov	r4, r2
 8005a06:	18d5      	adds	r5, r2, r3
 8005a08:	42ac      	cmp	r4, r5
 8005a0a:	d101      	bne.n	8005a10 <__sfputs_r+0x12>
 8005a0c:	2000      	movs	r0, #0
 8005a0e:	e007      	b.n	8005a20 <__sfputs_r+0x22>
 8005a10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a14:	463a      	mov	r2, r7
 8005a16:	4630      	mov	r0, r6
 8005a18:	f7ff ffda 	bl	80059d0 <__sfputc_r>
 8005a1c:	1c43      	adds	r3, r0, #1
 8005a1e:	d1f3      	bne.n	8005a08 <__sfputs_r+0xa>
 8005a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a24 <_vfiprintf_r>:
 8005a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a28:	460d      	mov	r5, r1
 8005a2a:	b09d      	sub	sp, #116	; 0x74
 8005a2c:	4614      	mov	r4, r2
 8005a2e:	4698      	mov	r8, r3
 8005a30:	4606      	mov	r6, r0
 8005a32:	b118      	cbz	r0, 8005a3c <_vfiprintf_r+0x18>
 8005a34:	6a03      	ldr	r3, [r0, #32]
 8005a36:	b90b      	cbnz	r3, 8005a3c <_vfiprintf_r+0x18>
 8005a38:	f7ff fd66 	bl	8005508 <__sinit>
 8005a3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a3e:	07d9      	lsls	r1, r3, #31
 8005a40:	d405      	bmi.n	8005a4e <_vfiprintf_r+0x2a>
 8005a42:	89ab      	ldrh	r3, [r5, #12]
 8005a44:	059a      	lsls	r2, r3, #22
 8005a46:	d402      	bmi.n	8005a4e <_vfiprintf_r+0x2a>
 8005a48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a4a:	f7ff ff73 	bl	8005934 <__retarget_lock_acquire_recursive>
 8005a4e:	89ab      	ldrh	r3, [r5, #12]
 8005a50:	071b      	lsls	r3, r3, #28
 8005a52:	d501      	bpl.n	8005a58 <_vfiprintf_r+0x34>
 8005a54:	692b      	ldr	r3, [r5, #16]
 8005a56:	b99b      	cbnz	r3, 8005a80 <_vfiprintf_r+0x5c>
 8005a58:	4629      	mov	r1, r5
 8005a5a:	4630      	mov	r0, r6
 8005a5c:	f7ff fe78 	bl	8005750 <__swsetup_r>
 8005a60:	b170      	cbz	r0, 8005a80 <_vfiprintf_r+0x5c>
 8005a62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a64:	07dc      	lsls	r4, r3, #31
 8005a66:	d504      	bpl.n	8005a72 <_vfiprintf_r+0x4e>
 8005a68:	f04f 30ff 	mov.w	r0, #4294967295
 8005a6c:	b01d      	add	sp, #116	; 0x74
 8005a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a72:	89ab      	ldrh	r3, [r5, #12]
 8005a74:	0598      	lsls	r0, r3, #22
 8005a76:	d4f7      	bmi.n	8005a68 <_vfiprintf_r+0x44>
 8005a78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a7a:	f7ff ff5c 	bl	8005936 <__retarget_lock_release_recursive>
 8005a7e:	e7f3      	b.n	8005a68 <_vfiprintf_r+0x44>
 8005a80:	2300      	movs	r3, #0
 8005a82:	9309      	str	r3, [sp, #36]	; 0x24
 8005a84:	2320      	movs	r3, #32
 8005a86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a8e:	2330      	movs	r3, #48	; 0x30
 8005a90:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005c44 <_vfiprintf_r+0x220>
 8005a94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a98:	f04f 0901 	mov.w	r9, #1
 8005a9c:	4623      	mov	r3, r4
 8005a9e:	469a      	mov	sl, r3
 8005aa0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005aa4:	b10a      	cbz	r2, 8005aaa <_vfiprintf_r+0x86>
 8005aa6:	2a25      	cmp	r2, #37	; 0x25
 8005aa8:	d1f9      	bne.n	8005a9e <_vfiprintf_r+0x7a>
 8005aaa:	ebba 0b04 	subs.w	fp, sl, r4
 8005aae:	d00b      	beq.n	8005ac8 <_vfiprintf_r+0xa4>
 8005ab0:	465b      	mov	r3, fp
 8005ab2:	4622      	mov	r2, r4
 8005ab4:	4629      	mov	r1, r5
 8005ab6:	4630      	mov	r0, r6
 8005ab8:	f7ff ffa1 	bl	80059fe <__sfputs_r>
 8005abc:	3001      	adds	r0, #1
 8005abe:	f000 80a9 	beq.w	8005c14 <_vfiprintf_r+0x1f0>
 8005ac2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ac4:	445a      	add	r2, fp
 8005ac6:	9209      	str	r2, [sp, #36]	; 0x24
 8005ac8:	f89a 3000 	ldrb.w	r3, [sl]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f000 80a1 	beq.w	8005c14 <_vfiprintf_r+0x1f0>
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ad8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005adc:	f10a 0a01 	add.w	sl, sl, #1
 8005ae0:	9304      	str	r3, [sp, #16]
 8005ae2:	9307      	str	r3, [sp, #28]
 8005ae4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ae8:	931a      	str	r3, [sp, #104]	; 0x68
 8005aea:	4654      	mov	r4, sl
 8005aec:	2205      	movs	r2, #5
 8005aee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005af2:	4854      	ldr	r0, [pc, #336]	; (8005c44 <_vfiprintf_r+0x220>)
 8005af4:	f7fa fb8c 	bl	8000210 <memchr>
 8005af8:	9a04      	ldr	r2, [sp, #16]
 8005afa:	b9d8      	cbnz	r0, 8005b34 <_vfiprintf_r+0x110>
 8005afc:	06d1      	lsls	r1, r2, #27
 8005afe:	bf44      	itt	mi
 8005b00:	2320      	movmi	r3, #32
 8005b02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b06:	0713      	lsls	r3, r2, #28
 8005b08:	bf44      	itt	mi
 8005b0a:	232b      	movmi	r3, #43	; 0x2b
 8005b0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b10:	f89a 3000 	ldrb.w	r3, [sl]
 8005b14:	2b2a      	cmp	r3, #42	; 0x2a
 8005b16:	d015      	beq.n	8005b44 <_vfiprintf_r+0x120>
 8005b18:	9a07      	ldr	r2, [sp, #28]
 8005b1a:	4654      	mov	r4, sl
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	f04f 0c0a 	mov.w	ip, #10
 8005b22:	4621      	mov	r1, r4
 8005b24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b28:	3b30      	subs	r3, #48	; 0x30
 8005b2a:	2b09      	cmp	r3, #9
 8005b2c:	d94d      	bls.n	8005bca <_vfiprintf_r+0x1a6>
 8005b2e:	b1b0      	cbz	r0, 8005b5e <_vfiprintf_r+0x13a>
 8005b30:	9207      	str	r2, [sp, #28]
 8005b32:	e014      	b.n	8005b5e <_vfiprintf_r+0x13a>
 8005b34:	eba0 0308 	sub.w	r3, r0, r8
 8005b38:	fa09 f303 	lsl.w	r3, r9, r3
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	9304      	str	r3, [sp, #16]
 8005b40:	46a2      	mov	sl, r4
 8005b42:	e7d2      	b.n	8005aea <_vfiprintf_r+0xc6>
 8005b44:	9b03      	ldr	r3, [sp, #12]
 8005b46:	1d19      	adds	r1, r3, #4
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	9103      	str	r1, [sp, #12]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	bfbb      	ittet	lt
 8005b50:	425b      	neglt	r3, r3
 8005b52:	f042 0202 	orrlt.w	r2, r2, #2
 8005b56:	9307      	strge	r3, [sp, #28]
 8005b58:	9307      	strlt	r3, [sp, #28]
 8005b5a:	bfb8      	it	lt
 8005b5c:	9204      	strlt	r2, [sp, #16]
 8005b5e:	7823      	ldrb	r3, [r4, #0]
 8005b60:	2b2e      	cmp	r3, #46	; 0x2e
 8005b62:	d10c      	bne.n	8005b7e <_vfiprintf_r+0x15a>
 8005b64:	7863      	ldrb	r3, [r4, #1]
 8005b66:	2b2a      	cmp	r3, #42	; 0x2a
 8005b68:	d134      	bne.n	8005bd4 <_vfiprintf_r+0x1b0>
 8005b6a:	9b03      	ldr	r3, [sp, #12]
 8005b6c:	1d1a      	adds	r2, r3, #4
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	9203      	str	r2, [sp, #12]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	bfb8      	it	lt
 8005b76:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b7a:	3402      	adds	r4, #2
 8005b7c:	9305      	str	r3, [sp, #20]
 8005b7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005c54 <_vfiprintf_r+0x230>
 8005b82:	7821      	ldrb	r1, [r4, #0]
 8005b84:	2203      	movs	r2, #3
 8005b86:	4650      	mov	r0, sl
 8005b88:	f7fa fb42 	bl	8000210 <memchr>
 8005b8c:	b138      	cbz	r0, 8005b9e <_vfiprintf_r+0x17a>
 8005b8e:	9b04      	ldr	r3, [sp, #16]
 8005b90:	eba0 000a 	sub.w	r0, r0, sl
 8005b94:	2240      	movs	r2, #64	; 0x40
 8005b96:	4082      	lsls	r2, r0
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	3401      	adds	r4, #1
 8005b9c:	9304      	str	r3, [sp, #16]
 8005b9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ba2:	4829      	ldr	r0, [pc, #164]	; (8005c48 <_vfiprintf_r+0x224>)
 8005ba4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ba8:	2206      	movs	r2, #6
 8005baa:	f7fa fb31 	bl	8000210 <memchr>
 8005bae:	2800      	cmp	r0, #0
 8005bb0:	d03f      	beq.n	8005c32 <_vfiprintf_r+0x20e>
 8005bb2:	4b26      	ldr	r3, [pc, #152]	; (8005c4c <_vfiprintf_r+0x228>)
 8005bb4:	bb1b      	cbnz	r3, 8005bfe <_vfiprintf_r+0x1da>
 8005bb6:	9b03      	ldr	r3, [sp, #12]
 8005bb8:	3307      	adds	r3, #7
 8005bba:	f023 0307 	bic.w	r3, r3, #7
 8005bbe:	3308      	adds	r3, #8
 8005bc0:	9303      	str	r3, [sp, #12]
 8005bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bc4:	443b      	add	r3, r7
 8005bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8005bc8:	e768      	b.n	8005a9c <_vfiprintf_r+0x78>
 8005bca:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bce:	460c      	mov	r4, r1
 8005bd0:	2001      	movs	r0, #1
 8005bd2:	e7a6      	b.n	8005b22 <_vfiprintf_r+0xfe>
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	3401      	adds	r4, #1
 8005bd8:	9305      	str	r3, [sp, #20]
 8005bda:	4619      	mov	r1, r3
 8005bdc:	f04f 0c0a 	mov.w	ip, #10
 8005be0:	4620      	mov	r0, r4
 8005be2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005be6:	3a30      	subs	r2, #48	; 0x30
 8005be8:	2a09      	cmp	r2, #9
 8005bea:	d903      	bls.n	8005bf4 <_vfiprintf_r+0x1d0>
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d0c6      	beq.n	8005b7e <_vfiprintf_r+0x15a>
 8005bf0:	9105      	str	r1, [sp, #20]
 8005bf2:	e7c4      	b.n	8005b7e <_vfiprintf_r+0x15a>
 8005bf4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bf8:	4604      	mov	r4, r0
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e7f0      	b.n	8005be0 <_vfiprintf_r+0x1bc>
 8005bfe:	ab03      	add	r3, sp, #12
 8005c00:	9300      	str	r3, [sp, #0]
 8005c02:	462a      	mov	r2, r5
 8005c04:	4b12      	ldr	r3, [pc, #72]	; (8005c50 <_vfiprintf_r+0x22c>)
 8005c06:	a904      	add	r1, sp, #16
 8005c08:	4630      	mov	r0, r6
 8005c0a:	f3af 8000 	nop.w
 8005c0e:	4607      	mov	r7, r0
 8005c10:	1c78      	adds	r0, r7, #1
 8005c12:	d1d6      	bne.n	8005bc2 <_vfiprintf_r+0x19e>
 8005c14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c16:	07d9      	lsls	r1, r3, #31
 8005c18:	d405      	bmi.n	8005c26 <_vfiprintf_r+0x202>
 8005c1a:	89ab      	ldrh	r3, [r5, #12]
 8005c1c:	059a      	lsls	r2, r3, #22
 8005c1e:	d402      	bmi.n	8005c26 <_vfiprintf_r+0x202>
 8005c20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c22:	f7ff fe88 	bl	8005936 <__retarget_lock_release_recursive>
 8005c26:	89ab      	ldrh	r3, [r5, #12]
 8005c28:	065b      	lsls	r3, r3, #25
 8005c2a:	f53f af1d 	bmi.w	8005a68 <_vfiprintf_r+0x44>
 8005c2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c30:	e71c      	b.n	8005a6c <_vfiprintf_r+0x48>
 8005c32:	ab03      	add	r3, sp, #12
 8005c34:	9300      	str	r3, [sp, #0]
 8005c36:	462a      	mov	r2, r5
 8005c38:	4b05      	ldr	r3, [pc, #20]	; (8005c50 <_vfiprintf_r+0x22c>)
 8005c3a:	a904      	add	r1, sp, #16
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	f000 f879 	bl	8005d34 <_printf_i>
 8005c42:	e7e4      	b.n	8005c0e <_vfiprintf_r+0x1ea>
 8005c44:	080063a4 	.word	0x080063a4
 8005c48:	080063ae 	.word	0x080063ae
 8005c4c:	00000000 	.word	0x00000000
 8005c50:	080059ff 	.word	0x080059ff
 8005c54:	080063aa 	.word	0x080063aa

08005c58 <_printf_common>:
 8005c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c5c:	4616      	mov	r6, r2
 8005c5e:	4699      	mov	r9, r3
 8005c60:	688a      	ldr	r2, [r1, #8]
 8005c62:	690b      	ldr	r3, [r1, #16]
 8005c64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	bfb8      	it	lt
 8005c6c:	4613      	movlt	r3, r2
 8005c6e:	6033      	str	r3, [r6, #0]
 8005c70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c74:	4607      	mov	r7, r0
 8005c76:	460c      	mov	r4, r1
 8005c78:	b10a      	cbz	r2, 8005c7e <_printf_common+0x26>
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	6033      	str	r3, [r6, #0]
 8005c7e:	6823      	ldr	r3, [r4, #0]
 8005c80:	0699      	lsls	r1, r3, #26
 8005c82:	bf42      	ittt	mi
 8005c84:	6833      	ldrmi	r3, [r6, #0]
 8005c86:	3302      	addmi	r3, #2
 8005c88:	6033      	strmi	r3, [r6, #0]
 8005c8a:	6825      	ldr	r5, [r4, #0]
 8005c8c:	f015 0506 	ands.w	r5, r5, #6
 8005c90:	d106      	bne.n	8005ca0 <_printf_common+0x48>
 8005c92:	f104 0a19 	add.w	sl, r4, #25
 8005c96:	68e3      	ldr	r3, [r4, #12]
 8005c98:	6832      	ldr	r2, [r6, #0]
 8005c9a:	1a9b      	subs	r3, r3, r2
 8005c9c:	42ab      	cmp	r3, r5
 8005c9e:	dc26      	bgt.n	8005cee <_printf_common+0x96>
 8005ca0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ca4:	1e13      	subs	r3, r2, #0
 8005ca6:	6822      	ldr	r2, [r4, #0]
 8005ca8:	bf18      	it	ne
 8005caa:	2301      	movne	r3, #1
 8005cac:	0692      	lsls	r2, r2, #26
 8005cae:	d42b      	bmi.n	8005d08 <_printf_common+0xb0>
 8005cb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cb4:	4649      	mov	r1, r9
 8005cb6:	4638      	mov	r0, r7
 8005cb8:	47c0      	blx	r8
 8005cba:	3001      	adds	r0, #1
 8005cbc:	d01e      	beq.n	8005cfc <_printf_common+0xa4>
 8005cbe:	6823      	ldr	r3, [r4, #0]
 8005cc0:	6922      	ldr	r2, [r4, #16]
 8005cc2:	f003 0306 	and.w	r3, r3, #6
 8005cc6:	2b04      	cmp	r3, #4
 8005cc8:	bf02      	ittt	eq
 8005cca:	68e5      	ldreq	r5, [r4, #12]
 8005ccc:	6833      	ldreq	r3, [r6, #0]
 8005cce:	1aed      	subeq	r5, r5, r3
 8005cd0:	68a3      	ldr	r3, [r4, #8]
 8005cd2:	bf0c      	ite	eq
 8005cd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cd8:	2500      	movne	r5, #0
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	bfc4      	itt	gt
 8005cde:	1a9b      	subgt	r3, r3, r2
 8005ce0:	18ed      	addgt	r5, r5, r3
 8005ce2:	2600      	movs	r6, #0
 8005ce4:	341a      	adds	r4, #26
 8005ce6:	42b5      	cmp	r5, r6
 8005ce8:	d11a      	bne.n	8005d20 <_printf_common+0xc8>
 8005cea:	2000      	movs	r0, #0
 8005cec:	e008      	b.n	8005d00 <_printf_common+0xa8>
 8005cee:	2301      	movs	r3, #1
 8005cf0:	4652      	mov	r2, sl
 8005cf2:	4649      	mov	r1, r9
 8005cf4:	4638      	mov	r0, r7
 8005cf6:	47c0      	blx	r8
 8005cf8:	3001      	adds	r0, #1
 8005cfa:	d103      	bne.n	8005d04 <_printf_common+0xac>
 8005cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8005d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d04:	3501      	adds	r5, #1
 8005d06:	e7c6      	b.n	8005c96 <_printf_common+0x3e>
 8005d08:	18e1      	adds	r1, r4, r3
 8005d0a:	1c5a      	adds	r2, r3, #1
 8005d0c:	2030      	movs	r0, #48	; 0x30
 8005d0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d12:	4422      	add	r2, r4
 8005d14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d1c:	3302      	adds	r3, #2
 8005d1e:	e7c7      	b.n	8005cb0 <_printf_common+0x58>
 8005d20:	2301      	movs	r3, #1
 8005d22:	4622      	mov	r2, r4
 8005d24:	4649      	mov	r1, r9
 8005d26:	4638      	mov	r0, r7
 8005d28:	47c0      	blx	r8
 8005d2a:	3001      	adds	r0, #1
 8005d2c:	d0e6      	beq.n	8005cfc <_printf_common+0xa4>
 8005d2e:	3601      	adds	r6, #1
 8005d30:	e7d9      	b.n	8005ce6 <_printf_common+0x8e>
	...

08005d34 <_printf_i>:
 8005d34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d38:	7e0f      	ldrb	r7, [r1, #24]
 8005d3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d3c:	2f78      	cmp	r7, #120	; 0x78
 8005d3e:	4691      	mov	r9, r2
 8005d40:	4680      	mov	r8, r0
 8005d42:	460c      	mov	r4, r1
 8005d44:	469a      	mov	sl, r3
 8005d46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d4a:	d807      	bhi.n	8005d5c <_printf_i+0x28>
 8005d4c:	2f62      	cmp	r7, #98	; 0x62
 8005d4e:	d80a      	bhi.n	8005d66 <_printf_i+0x32>
 8005d50:	2f00      	cmp	r7, #0
 8005d52:	f000 80d4 	beq.w	8005efe <_printf_i+0x1ca>
 8005d56:	2f58      	cmp	r7, #88	; 0x58
 8005d58:	f000 80c0 	beq.w	8005edc <_printf_i+0x1a8>
 8005d5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d64:	e03a      	b.n	8005ddc <_printf_i+0xa8>
 8005d66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d6a:	2b15      	cmp	r3, #21
 8005d6c:	d8f6      	bhi.n	8005d5c <_printf_i+0x28>
 8005d6e:	a101      	add	r1, pc, #4	; (adr r1, 8005d74 <_printf_i+0x40>)
 8005d70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d74:	08005dcd 	.word	0x08005dcd
 8005d78:	08005de1 	.word	0x08005de1
 8005d7c:	08005d5d 	.word	0x08005d5d
 8005d80:	08005d5d 	.word	0x08005d5d
 8005d84:	08005d5d 	.word	0x08005d5d
 8005d88:	08005d5d 	.word	0x08005d5d
 8005d8c:	08005de1 	.word	0x08005de1
 8005d90:	08005d5d 	.word	0x08005d5d
 8005d94:	08005d5d 	.word	0x08005d5d
 8005d98:	08005d5d 	.word	0x08005d5d
 8005d9c:	08005d5d 	.word	0x08005d5d
 8005da0:	08005ee5 	.word	0x08005ee5
 8005da4:	08005e0d 	.word	0x08005e0d
 8005da8:	08005e9f 	.word	0x08005e9f
 8005dac:	08005d5d 	.word	0x08005d5d
 8005db0:	08005d5d 	.word	0x08005d5d
 8005db4:	08005f07 	.word	0x08005f07
 8005db8:	08005d5d 	.word	0x08005d5d
 8005dbc:	08005e0d 	.word	0x08005e0d
 8005dc0:	08005d5d 	.word	0x08005d5d
 8005dc4:	08005d5d 	.word	0x08005d5d
 8005dc8:	08005ea7 	.word	0x08005ea7
 8005dcc:	682b      	ldr	r3, [r5, #0]
 8005dce:	1d1a      	adds	r2, r3, #4
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	602a      	str	r2, [r5, #0]
 8005dd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e09f      	b.n	8005f20 <_printf_i+0x1ec>
 8005de0:	6820      	ldr	r0, [r4, #0]
 8005de2:	682b      	ldr	r3, [r5, #0]
 8005de4:	0607      	lsls	r7, r0, #24
 8005de6:	f103 0104 	add.w	r1, r3, #4
 8005dea:	6029      	str	r1, [r5, #0]
 8005dec:	d501      	bpl.n	8005df2 <_printf_i+0xbe>
 8005dee:	681e      	ldr	r6, [r3, #0]
 8005df0:	e003      	b.n	8005dfa <_printf_i+0xc6>
 8005df2:	0646      	lsls	r6, r0, #25
 8005df4:	d5fb      	bpl.n	8005dee <_printf_i+0xba>
 8005df6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005dfa:	2e00      	cmp	r6, #0
 8005dfc:	da03      	bge.n	8005e06 <_printf_i+0xd2>
 8005dfe:	232d      	movs	r3, #45	; 0x2d
 8005e00:	4276      	negs	r6, r6
 8005e02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e06:	485a      	ldr	r0, [pc, #360]	; (8005f70 <_printf_i+0x23c>)
 8005e08:	230a      	movs	r3, #10
 8005e0a:	e012      	b.n	8005e32 <_printf_i+0xfe>
 8005e0c:	682b      	ldr	r3, [r5, #0]
 8005e0e:	6820      	ldr	r0, [r4, #0]
 8005e10:	1d19      	adds	r1, r3, #4
 8005e12:	6029      	str	r1, [r5, #0]
 8005e14:	0605      	lsls	r5, r0, #24
 8005e16:	d501      	bpl.n	8005e1c <_printf_i+0xe8>
 8005e18:	681e      	ldr	r6, [r3, #0]
 8005e1a:	e002      	b.n	8005e22 <_printf_i+0xee>
 8005e1c:	0641      	lsls	r1, r0, #25
 8005e1e:	d5fb      	bpl.n	8005e18 <_printf_i+0xe4>
 8005e20:	881e      	ldrh	r6, [r3, #0]
 8005e22:	4853      	ldr	r0, [pc, #332]	; (8005f70 <_printf_i+0x23c>)
 8005e24:	2f6f      	cmp	r7, #111	; 0x6f
 8005e26:	bf0c      	ite	eq
 8005e28:	2308      	moveq	r3, #8
 8005e2a:	230a      	movne	r3, #10
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e32:	6865      	ldr	r5, [r4, #4]
 8005e34:	60a5      	str	r5, [r4, #8]
 8005e36:	2d00      	cmp	r5, #0
 8005e38:	bfa2      	ittt	ge
 8005e3a:	6821      	ldrge	r1, [r4, #0]
 8005e3c:	f021 0104 	bicge.w	r1, r1, #4
 8005e40:	6021      	strge	r1, [r4, #0]
 8005e42:	b90e      	cbnz	r6, 8005e48 <_printf_i+0x114>
 8005e44:	2d00      	cmp	r5, #0
 8005e46:	d04b      	beq.n	8005ee0 <_printf_i+0x1ac>
 8005e48:	4615      	mov	r5, r2
 8005e4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e4e:	fb03 6711 	mls	r7, r3, r1, r6
 8005e52:	5dc7      	ldrb	r7, [r0, r7]
 8005e54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e58:	4637      	mov	r7, r6
 8005e5a:	42bb      	cmp	r3, r7
 8005e5c:	460e      	mov	r6, r1
 8005e5e:	d9f4      	bls.n	8005e4a <_printf_i+0x116>
 8005e60:	2b08      	cmp	r3, #8
 8005e62:	d10b      	bne.n	8005e7c <_printf_i+0x148>
 8005e64:	6823      	ldr	r3, [r4, #0]
 8005e66:	07de      	lsls	r6, r3, #31
 8005e68:	d508      	bpl.n	8005e7c <_printf_i+0x148>
 8005e6a:	6923      	ldr	r3, [r4, #16]
 8005e6c:	6861      	ldr	r1, [r4, #4]
 8005e6e:	4299      	cmp	r1, r3
 8005e70:	bfde      	ittt	le
 8005e72:	2330      	movle	r3, #48	; 0x30
 8005e74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e7c:	1b52      	subs	r2, r2, r5
 8005e7e:	6122      	str	r2, [r4, #16]
 8005e80:	f8cd a000 	str.w	sl, [sp]
 8005e84:	464b      	mov	r3, r9
 8005e86:	aa03      	add	r2, sp, #12
 8005e88:	4621      	mov	r1, r4
 8005e8a:	4640      	mov	r0, r8
 8005e8c:	f7ff fee4 	bl	8005c58 <_printf_common>
 8005e90:	3001      	adds	r0, #1
 8005e92:	d14a      	bne.n	8005f2a <_printf_i+0x1f6>
 8005e94:	f04f 30ff 	mov.w	r0, #4294967295
 8005e98:	b004      	add	sp, #16
 8005e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e9e:	6823      	ldr	r3, [r4, #0]
 8005ea0:	f043 0320 	orr.w	r3, r3, #32
 8005ea4:	6023      	str	r3, [r4, #0]
 8005ea6:	4833      	ldr	r0, [pc, #204]	; (8005f74 <_printf_i+0x240>)
 8005ea8:	2778      	movs	r7, #120	; 0x78
 8005eaa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	6829      	ldr	r1, [r5, #0]
 8005eb2:	061f      	lsls	r7, r3, #24
 8005eb4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005eb8:	d402      	bmi.n	8005ec0 <_printf_i+0x18c>
 8005eba:	065f      	lsls	r7, r3, #25
 8005ebc:	bf48      	it	mi
 8005ebe:	b2b6      	uxthmi	r6, r6
 8005ec0:	07df      	lsls	r7, r3, #31
 8005ec2:	bf48      	it	mi
 8005ec4:	f043 0320 	orrmi.w	r3, r3, #32
 8005ec8:	6029      	str	r1, [r5, #0]
 8005eca:	bf48      	it	mi
 8005ecc:	6023      	strmi	r3, [r4, #0]
 8005ece:	b91e      	cbnz	r6, 8005ed8 <_printf_i+0x1a4>
 8005ed0:	6823      	ldr	r3, [r4, #0]
 8005ed2:	f023 0320 	bic.w	r3, r3, #32
 8005ed6:	6023      	str	r3, [r4, #0]
 8005ed8:	2310      	movs	r3, #16
 8005eda:	e7a7      	b.n	8005e2c <_printf_i+0xf8>
 8005edc:	4824      	ldr	r0, [pc, #144]	; (8005f70 <_printf_i+0x23c>)
 8005ede:	e7e4      	b.n	8005eaa <_printf_i+0x176>
 8005ee0:	4615      	mov	r5, r2
 8005ee2:	e7bd      	b.n	8005e60 <_printf_i+0x12c>
 8005ee4:	682b      	ldr	r3, [r5, #0]
 8005ee6:	6826      	ldr	r6, [r4, #0]
 8005ee8:	6961      	ldr	r1, [r4, #20]
 8005eea:	1d18      	adds	r0, r3, #4
 8005eec:	6028      	str	r0, [r5, #0]
 8005eee:	0635      	lsls	r5, r6, #24
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	d501      	bpl.n	8005ef8 <_printf_i+0x1c4>
 8005ef4:	6019      	str	r1, [r3, #0]
 8005ef6:	e002      	b.n	8005efe <_printf_i+0x1ca>
 8005ef8:	0670      	lsls	r0, r6, #25
 8005efa:	d5fb      	bpl.n	8005ef4 <_printf_i+0x1c0>
 8005efc:	8019      	strh	r1, [r3, #0]
 8005efe:	2300      	movs	r3, #0
 8005f00:	6123      	str	r3, [r4, #16]
 8005f02:	4615      	mov	r5, r2
 8005f04:	e7bc      	b.n	8005e80 <_printf_i+0x14c>
 8005f06:	682b      	ldr	r3, [r5, #0]
 8005f08:	1d1a      	adds	r2, r3, #4
 8005f0a:	602a      	str	r2, [r5, #0]
 8005f0c:	681d      	ldr	r5, [r3, #0]
 8005f0e:	6862      	ldr	r2, [r4, #4]
 8005f10:	2100      	movs	r1, #0
 8005f12:	4628      	mov	r0, r5
 8005f14:	f7fa f97c 	bl	8000210 <memchr>
 8005f18:	b108      	cbz	r0, 8005f1e <_printf_i+0x1ea>
 8005f1a:	1b40      	subs	r0, r0, r5
 8005f1c:	6060      	str	r0, [r4, #4]
 8005f1e:	6863      	ldr	r3, [r4, #4]
 8005f20:	6123      	str	r3, [r4, #16]
 8005f22:	2300      	movs	r3, #0
 8005f24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f28:	e7aa      	b.n	8005e80 <_printf_i+0x14c>
 8005f2a:	6923      	ldr	r3, [r4, #16]
 8005f2c:	462a      	mov	r2, r5
 8005f2e:	4649      	mov	r1, r9
 8005f30:	4640      	mov	r0, r8
 8005f32:	47d0      	blx	sl
 8005f34:	3001      	adds	r0, #1
 8005f36:	d0ad      	beq.n	8005e94 <_printf_i+0x160>
 8005f38:	6823      	ldr	r3, [r4, #0]
 8005f3a:	079b      	lsls	r3, r3, #30
 8005f3c:	d413      	bmi.n	8005f66 <_printf_i+0x232>
 8005f3e:	68e0      	ldr	r0, [r4, #12]
 8005f40:	9b03      	ldr	r3, [sp, #12]
 8005f42:	4298      	cmp	r0, r3
 8005f44:	bfb8      	it	lt
 8005f46:	4618      	movlt	r0, r3
 8005f48:	e7a6      	b.n	8005e98 <_printf_i+0x164>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	4632      	mov	r2, r6
 8005f4e:	4649      	mov	r1, r9
 8005f50:	4640      	mov	r0, r8
 8005f52:	47d0      	blx	sl
 8005f54:	3001      	adds	r0, #1
 8005f56:	d09d      	beq.n	8005e94 <_printf_i+0x160>
 8005f58:	3501      	adds	r5, #1
 8005f5a:	68e3      	ldr	r3, [r4, #12]
 8005f5c:	9903      	ldr	r1, [sp, #12]
 8005f5e:	1a5b      	subs	r3, r3, r1
 8005f60:	42ab      	cmp	r3, r5
 8005f62:	dcf2      	bgt.n	8005f4a <_printf_i+0x216>
 8005f64:	e7eb      	b.n	8005f3e <_printf_i+0x20a>
 8005f66:	2500      	movs	r5, #0
 8005f68:	f104 0619 	add.w	r6, r4, #25
 8005f6c:	e7f5      	b.n	8005f5a <_printf_i+0x226>
 8005f6e:	bf00      	nop
 8005f70:	080063b5 	.word	0x080063b5
 8005f74:	080063c6 	.word	0x080063c6

08005f78 <__sflush_r>:
 8005f78:	898a      	ldrh	r2, [r1, #12]
 8005f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f7e:	4605      	mov	r5, r0
 8005f80:	0710      	lsls	r0, r2, #28
 8005f82:	460c      	mov	r4, r1
 8005f84:	d458      	bmi.n	8006038 <__sflush_r+0xc0>
 8005f86:	684b      	ldr	r3, [r1, #4]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	dc05      	bgt.n	8005f98 <__sflush_r+0x20>
 8005f8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	dc02      	bgt.n	8005f98 <__sflush_r+0x20>
 8005f92:	2000      	movs	r0, #0
 8005f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f9a:	2e00      	cmp	r6, #0
 8005f9c:	d0f9      	beq.n	8005f92 <__sflush_r+0x1a>
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005fa4:	682f      	ldr	r7, [r5, #0]
 8005fa6:	6a21      	ldr	r1, [r4, #32]
 8005fa8:	602b      	str	r3, [r5, #0]
 8005faa:	d032      	beq.n	8006012 <__sflush_r+0x9a>
 8005fac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005fae:	89a3      	ldrh	r3, [r4, #12]
 8005fb0:	075a      	lsls	r2, r3, #29
 8005fb2:	d505      	bpl.n	8005fc0 <__sflush_r+0x48>
 8005fb4:	6863      	ldr	r3, [r4, #4]
 8005fb6:	1ac0      	subs	r0, r0, r3
 8005fb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005fba:	b10b      	cbz	r3, 8005fc0 <__sflush_r+0x48>
 8005fbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005fbe:	1ac0      	subs	r0, r0, r3
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005fc6:	6a21      	ldr	r1, [r4, #32]
 8005fc8:	4628      	mov	r0, r5
 8005fca:	47b0      	blx	r6
 8005fcc:	1c43      	adds	r3, r0, #1
 8005fce:	89a3      	ldrh	r3, [r4, #12]
 8005fd0:	d106      	bne.n	8005fe0 <__sflush_r+0x68>
 8005fd2:	6829      	ldr	r1, [r5, #0]
 8005fd4:	291d      	cmp	r1, #29
 8005fd6:	d82b      	bhi.n	8006030 <__sflush_r+0xb8>
 8005fd8:	4a29      	ldr	r2, [pc, #164]	; (8006080 <__sflush_r+0x108>)
 8005fda:	410a      	asrs	r2, r1
 8005fdc:	07d6      	lsls	r6, r2, #31
 8005fde:	d427      	bmi.n	8006030 <__sflush_r+0xb8>
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	6062      	str	r2, [r4, #4]
 8005fe4:	04d9      	lsls	r1, r3, #19
 8005fe6:	6922      	ldr	r2, [r4, #16]
 8005fe8:	6022      	str	r2, [r4, #0]
 8005fea:	d504      	bpl.n	8005ff6 <__sflush_r+0x7e>
 8005fec:	1c42      	adds	r2, r0, #1
 8005fee:	d101      	bne.n	8005ff4 <__sflush_r+0x7c>
 8005ff0:	682b      	ldr	r3, [r5, #0]
 8005ff2:	b903      	cbnz	r3, 8005ff6 <__sflush_r+0x7e>
 8005ff4:	6560      	str	r0, [r4, #84]	; 0x54
 8005ff6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ff8:	602f      	str	r7, [r5, #0]
 8005ffa:	2900      	cmp	r1, #0
 8005ffc:	d0c9      	beq.n	8005f92 <__sflush_r+0x1a>
 8005ffe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006002:	4299      	cmp	r1, r3
 8006004:	d002      	beq.n	800600c <__sflush_r+0x94>
 8006006:	4628      	mov	r0, r5
 8006008:	f7ff fc96 	bl	8005938 <_free_r>
 800600c:	2000      	movs	r0, #0
 800600e:	6360      	str	r0, [r4, #52]	; 0x34
 8006010:	e7c0      	b.n	8005f94 <__sflush_r+0x1c>
 8006012:	2301      	movs	r3, #1
 8006014:	4628      	mov	r0, r5
 8006016:	47b0      	blx	r6
 8006018:	1c41      	adds	r1, r0, #1
 800601a:	d1c8      	bne.n	8005fae <__sflush_r+0x36>
 800601c:	682b      	ldr	r3, [r5, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d0c5      	beq.n	8005fae <__sflush_r+0x36>
 8006022:	2b1d      	cmp	r3, #29
 8006024:	d001      	beq.n	800602a <__sflush_r+0xb2>
 8006026:	2b16      	cmp	r3, #22
 8006028:	d101      	bne.n	800602e <__sflush_r+0xb6>
 800602a:	602f      	str	r7, [r5, #0]
 800602c:	e7b1      	b.n	8005f92 <__sflush_r+0x1a>
 800602e:	89a3      	ldrh	r3, [r4, #12]
 8006030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006034:	81a3      	strh	r3, [r4, #12]
 8006036:	e7ad      	b.n	8005f94 <__sflush_r+0x1c>
 8006038:	690f      	ldr	r7, [r1, #16]
 800603a:	2f00      	cmp	r7, #0
 800603c:	d0a9      	beq.n	8005f92 <__sflush_r+0x1a>
 800603e:	0793      	lsls	r3, r2, #30
 8006040:	680e      	ldr	r6, [r1, #0]
 8006042:	bf08      	it	eq
 8006044:	694b      	ldreq	r3, [r1, #20]
 8006046:	600f      	str	r7, [r1, #0]
 8006048:	bf18      	it	ne
 800604a:	2300      	movne	r3, #0
 800604c:	eba6 0807 	sub.w	r8, r6, r7
 8006050:	608b      	str	r3, [r1, #8]
 8006052:	f1b8 0f00 	cmp.w	r8, #0
 8006056:	dd9c      	ble.n	8005f92 <__sflush_r+0x1a>
 8006058:	6a21      	ldr	r1, [r4, #32]
 800605a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800605c:	4643      	mov	r3, r8
 800605e:	463a      	mov	r2, r7
 8006060:	4628      	mov	r0, r5
 8006062:	47b0      	blx	r6
 8006064:	2800      	cmp	r0, #0
 8006066:	dc06      	bgt.n	8006076 <__sflush_r+0xfe>
 8006068:	89a3      	ldrh	r3, [r4, #12]
 800606a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800606e:	81a3      	strh	r3, [r4, #12]
 8006070:	f04f 30ff 	mov.w	r0, #4294967295
 8006074:	e78e      	b.n	8005f94 <__sflush_r+0x1c>
 8006076:	4407      	add	r7, r0
 8006078:	eba8 0800 	sub.w	r8, r8, r0
 800607c:	e7e9      	b.n	8006052 <__sflush_r+0xda>
 800607e:	bf00      	nop
 8006080:	dfbffffe 	.word	0xdfbffffe

08006084 <_fflush_r>:
 8006084:	b538      	push	{r3, r4, r5, lr}
 8006086:	690b      	ldr	r3, [r1, #16]
 8006088:	4605      	mov	r5, r0
 800608a:	460c      	mov	r4, r1
 800608c:	b913      	cbnz	r3, 8006094 <_fflush_r+0x10>
 800608e:	2500      	movs	r5, #0
 8006090:	4628      	mov	r0, r5
 8006092:	bd38      	pop	{r3, r4, r5, pc}
 8006094:	b118      	cbz	r0, 800609e <_fflush_r+0x1a>
 8006096:	6a03      	ldr	r3, [r0, #32]
 8006098:	b90b      	cbnz	r3, 800609e <_fflush_r+0x1a>
 800609a:	f7ff fa35 	bl	8005508 <__sinit>
 800609e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d0f3      	beq.n	800608e <_fflush_r+0xa>
 80060a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80060a8:	07d0      	lsls	r0, r2, #31
 80060aa:	d404      	bmi.n	80060b6 <_fflush_r+0x32>
 80060ac:	0599      	lsls	r1, r3, #22
 80060ae:	d402      	bmi.n	80060b6 <_fflush_r+0x32>
 80060b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060b2:	f7ff fc3f 	bl	8005934 <__retarget_lock_acquire_recursive>
 80060b6:	4628      	mov	r0, r5
 80060b8:	4621      	mov	r1, r4
 80060ba:	f7ff ff5d 	bl	8005f78 <__sflush_r>
 80060be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060c0:	07da      	lsls	r2, r3, #31
 80060c2:	4605      	mov	r5, r0
 80060c4:	d4e4      	bmi.n	8006090 <_fflush_r+0xc>
 80060c6:	89a3      	ldrh	r3, [r4, #12]
 80060c8:	059b      	lsls	r3, r3, #22
 80060ca:	d4e1      	bmi.n	8006090 <_fflush_r+0xc>
 80060cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060ce:	f7ff fc32 	bl	8005936 <__retarget_lock_release_recursive>
 80060d2:	e7dd      	b.n	8006090 <_fflush_r+0xc>

080060d4 <__swhatbuf_r>:
 80060d4:	b570      	push	{r4, r5, r6, lr}
 80060d6:	460c      	mov	r4, r1
 80060d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060dc:	2900      	cmp	r1, #0
 80060de:	b096      	sub	sp, #88	; 0x58
 80060e0:	4615      	mov	r5, r2
 80060e2:	461e      	mov	r6, r3
 80060e4:	da0d      	bge.n	8006102 <__swhatbuf_r+0x2e>
 80060e6:	89a3      	ldrh	r3, [r4, #12]
 80060e8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80060ec:	f04f 0100 	mov.w	r1, #0
 80060f0:	bf0c      	ite	eq
 80060f2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80060f6:	2340      	movne	r3, #64	; 0x40
 80060f8:	2000      	movs	r0, #0
 80060fa:	6031      	str	r1, [r6, #0]
 80060fc:	602b      	str	r3, [r5, #0]
 80060fe:	b016      	add	sp, #88	; 0x58
 8006100:	bd70      	pop	{r4, r5, r6, pc}
 8006102:	466a      	mov	r2, sp
 8006104:	f000 f848 	bl	8006198 <_fstat_r>
 8006108:	2800      	cmp	r0, #0
 800610a:	dbec      	blt.n	80060e6 <__swhatbuf_r+0x12>
 800610c:	9901      	ldr	r1, [sp, #4]
 800610e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006112:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006116:	4259      	negs	r1, r3
 8006118:	4159      	adcs	r1, r3
 800611a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800611e:	e7eb      	b.n	80060f8 <__swhatbuf_r+0x24>

08006120 <__smakebuf_r>:
 8006120:	898b      	ldrh	r3, [r1, #12]
 8006122:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006124:	079d      	lsls	r5, r3, #30
 8006126:	4606      	mov	r6, r0
 8006128:	460c      	mov	r4, r1
 800612a:	d507      	bpl.n	800613c <__smakebuf_r+0x1c>
 800612c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006130:	6023      	str	r3, [r4, #0]
 8006132:	6123      	str	r3, [r4, #16]
 8006134:	2301      	movs	r3, #1
 8006136:	6163      	str	r3, [r4, #20]
 8006138:	b002      	add	sp, #8
 800613a:	bd70      	pop	{r4, r5, r6, pc}
 800613c:	ab01      	add	r3, sp, #4
 800613e:	466a      	mov	r2, sp
 8006140:	f7ff ffc8 	bl	80060d4 <__swhatbuf_r>
 8006144:	9900      	ldr	r1, [sp, #0]
 8006146:	4605      	mov	r5, r0
 8006148:	4630      	mov	r0, r6
 800614a:	f7ff f8d7 	bl	80052fc <_malloc_r>
 800614e:	b948      	cbnz	r0, 8006164 <__smakebuf_r+0x44>
 8006150:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006154:	059a      	lsls	r2, r3, #22
 8006156:	d4ef      	bmi.n	8006138 <__smakebuf_r+0x18>
 8006158:	f023 0303 	bic.w	r3, r3, #3
 800615c:	f043 0302 	orr.w	r3, r3, #2
 8006160:	81a3      	strh	r3, [r4, #12]
 8006162:	e7e3      	b.n	800612c <__smakebuf_r+0xc>
 8006164:	89a3      	ldrh	r3, [r4, #12]
 8006166:	6020      	str	r0, [r4, #0]
 8006168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800616c:	81a3      	strh	r3, [r4, #12]
 800616e:	9b00      	ldr	r3, [sp, #0]
 8006170:	6163      	str	r3, [r4, #20]
 8006172:	9b01      	ldr	r3, [sp, #4]
 8006174:	6120      	str	r0, [r4, #16]
 8006176:	b15b      	cbz	r3, 8006190 <__smakebuf_r+0x70>
 8006178:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800617c:	4630      	mov	r0, r6
 800617e:	f000 f81d 	bl	80061bc <_isatty_r>
 8006182:	b128      	cbz	r0, 8006190 <__smakebuf_r+0x70>
 8006184:	89a3      	ldrh	r3, [r4, #12]
 8006186:	f023 0303 	bic.w	r3, r3, #3
 800618a:	f043 0301 	orr.w	r3, r3, #1
 800618e:	81a3      	strh	r3, [r4, #12]
 8006190:	89a3      	ldrh	r3, [r4, #12]
 8006192:	431d      	orrs	r5, r3
 8006194:	81a5      	strh	r5, [r4, #12]
 8006196:	e7cf      	b.n	8006138 <__smakebuf_r+0x18>

08006198 <_fstat_r>:
 8006198:	b538      	push	{r3, r4, r5, lr}
 800619a:	4d07      	ldr	r5, [pc, #28]	; (80061b8 <_fstat_r+0x20>)
 800619c:	2300      	movs	r3, #0
 800619e:	4604      	mov	r4, r0
 80061a0:	4608      	mov	r0, r1
 80061a2:	4611      	mov	r1, r2
 80061a4:	602b      	str	r3, [r5, #0]
 80061a6:	f7fb fb0e 	bl	80017c6 <_fstat>
 80061aa:	1c43      	adds	r3, r0, #1
 80061ac:	d102      	bne.n	80061b4 <_fstat_r+0x1c>
 80061ae:	682b      	ldr	r3, [r5, #0]
 80061b0:	b103      	cbz	r3, 80061b4 <_fstat_r+0x1c>
 80061b2:	6023      	str	r3, [r4, #0]
 80061b4:	bd38      	pop	{r3, r4, r5, pc}
 80061b6:	bf00      	nop
 80061b8:	2000032c 	.word	0x2000032c

080061bc <_isatty_r>:
 80061bc:	b538      	push	{r3, r4, r5, lr}
 80061be:	4d06      	ldr	r5, [pc, #24]	; (80061d8 <_isatty_r+0x1c>)
 80061c0:	2300      	movs	r3, #0
 80061c2:	4604      	mov	r4, r0
 80061c4:	4608      	mov	r0, r1
 80061c6:	602b      	str	r3, [r5, #0]
 80061c8:	f7fb fb0d 	bl	80017e6 <_isatty>
 80061cc:	1c43      	adds	r3, r0, #1
 80061ce:	d102      	bne.n	80061d6 <_isatty_r+0x1a>
 80061d0:	682b      	ldr	r3, [r5, #0]
 80061d2:	b103      	cbz	r3, 80061d6 <_isatty_r+0x1a>
 80061d4:	6023      	str	r3, [r4, #0]
 80061d6:	bd38      	pop	{r3, r4, r5, pc}
 80061d8:	2000032c 	.word	0x2000032c

080061dc <_init>:
 80061dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061de:	bf00      	nop
 80061e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061e2:	bc08      	pop	{r3}
 80061e4:	469e      	mov	lr, r3
 80061e6:	4770      	bx	lr

080061e8 <_fini>:
 80061e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ea:	bf00      	nop
 80061ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ee:	bc08      	pop	{r3}
 80061f0:	469e      	mov	lr, r3
 80061f2:	4770      	bx	lr
